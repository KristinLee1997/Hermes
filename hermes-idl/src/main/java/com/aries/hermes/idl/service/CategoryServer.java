/**
 * Autogenerated by Thrift Compiler (0.12.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.aries.hermes.idl.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-05-28")
public class CategoryServer {

    public interface Iface {

        public java.lang.String ping() throws org.apache.thrift.TException;

        public com.aries.hermes.idl.dto.ThriftResponse addCategory(com.aries.hermes.idl.dto.CompanyDTO companyDTO, java.lang.String categoryName) throws org.apache.thrift.TException;

        public com.aries.hermes.idl.dto.CategoryDTO queryNextCategory(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id) throws org.apache.thrift.TException;

        public java.util.List<com.aries.hermes.idl.dto.CategoryDTO> queryAllCategorys(com.aries.hermes.idl.dto.CompanyDTO companyDTO) throws org.apache.thrift.TException;

        public java.util.List<com.aries.hermes.idl.dto.CategoryDTO> batchQueryCategorys(com.aries.hermes.idl.dto.CompanyDTO companyDTO, int page, int pageSize) throws org.apache.thrift.TException;

        public com.aries.hermes.idl.dto.ThriftResponse updateCategoryNameById(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id, java.lang.String categoryName) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void ping(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

        public void addCategory(com.aries.hermes.idl.dto.CompanyDTO companyDTO, java.lang.String categoryName, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler) throws org.apache.thrift.TException;

        public void queryNextCategory(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.CategoryDTO> resultHandler) throws org.apache.thrift.TException;

        public void queryAllCategorys(com.aries.hermes.idl.dto.CompanyDTO companyDTO, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.hermes.idl.dto.CategoryDTO>> resultHandler) throws org.apache.thrift.TException;

        public void batchQueryCategorys(com.aries.hermes.idl.dto.CompanyDTO companyDTO, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.hermes.idl.dto.CategoryDTO>> resultHandler) throws org.apache.thrift.TException;

        public void updateCategoryNameById(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id, java.lang.String categoryName, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public java.lang.String ping() throws org.apache.thrift.TException {
            send_ping();
            return recv_ping();
        }

        public void send_ping() throws org.apache.thrift.TException {
            ping_args args = new ping_args();
            sendBase("ping", args);
        }

        public java.lang.String recv_ping() throws org.apache.thrift.TException {
            ping_result result = new ping_result();
            receiveBase(result, "ping");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
        }

        public com.aries.hermes.idl.dto.ThriftResponse addCategory(com.aries.hermes.idl.dto.CompanyDTO companyDTO, java.lang.String categoryName) throws org.apache.thrift.TException {
            send_addCategory(companyDTO, categoryName);
            return recv_addCategory();
        }

        public void send_addCategory(com.aries.hermes.idl.dto.CompanyDTO companyDTO, java.lang.String categoryName) throws org.apache.thrift.TException {
            addCategory_args args = new addCategory_args();
            args.setCompanyDTO(companyDTO);
            args.setCategoryName(categoryName);
            sendBase("addCategory", args);
        }

        public com.aries.hermes.idl.dto.ThriftResponse recv_addCategory() throws org.apache.thrift.TException {
            addCategory_result result = new addCategory_result();
            receiveBase(result, "addCategory");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addCategory failed: unknown result");
        }

        public com.aries.hermes.idl.dto.CategoryDTO queryNextCategory(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id) throws org.apache.thrift.TException {
            send_queryNextCategory(companyDTO, id);
            return recv_queryNextCategory();
        }

        public void send_queryNextCategory(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id) throws org.apache.thrift.TException {
            queryNextCategory_args args = new queryNextCategory_args();
            args.setCompanyDTO(companyDTO);
            args.setId(id);
            sendBase("queryNextCategory", args);
        }

        public com.aries.hermes.idl.dto.CategoryDTO recv_queryNextCategory() throws org.apache.thrift.TException {
            queryNextCategory_result result = new queryNextCategory_result();
            receiveBase(result, "queryNextCategory");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryNextCategory failed: unknown result");
        }

        public java.util.List<com.aries.hermes.idl.dto.CategoryDTO> queryAllCategorys(com.aries.hermes.idl.dto.CompanyDTO companyDTO) throws org.apache.thrift.TException {
            send_queryAllCategorys(companyDTO);
            return recv_queryAllCategorys();
        }

        public void send_queryAllCategorys(com.aries.hermes.idl.dto.CompanyDTO companyDTO) throws org.apache.thrift.TException {
            queryAllCategorys_args args = new queryAllCategorys_args();
            args.setCompanyDTO(companyDTO);
            sendBase("queryAllCategorys", args);
        }

        public java.util.List<com.aries.hermes.idl.dto.CategoryDTO> recv_queryAllCategorys() throws org.apache.thrift.TException {
            queryAllCategorys_result result = new queryAllCategorys_result();
            receiveBase(result, "queryAllCategorys");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryAllCategorys failed: unknown result");
        }

        public java.util.List<com.aries.hermes.idl.dto.CategoryDTO> batchQueryCategorys(com.aries.hermes.idl.dto.CompanyDTO companyDTO, int page, int pageSize) throws org.apache.thrift.TException {
            send_batchQueryCategorys(companyDTO, page, pageSize);
            return recv_batchQueryCategorys();
        }

        public void send_batchQueryCategorys(com.aries.hermes.idl.dto.CompanyDTO companyDTO, int page, int pageSize) throws org.apache.thrift.TException {
            batchQueryCategorys_args args = new batchQueryCategorys_args();
            args.setCompanyDTO(companyDTO);
            args.setPage(page);
            args.setPageSize(pageSize);
            sendBase("batchQueryCategorys", args);
        }

        public java.util.List<com.aries.hermes.idl.dto.CategoryDTO> recv_batchQueryCategorys() throws org.apache.thrift.TException {
            batchQueryCategorys_result result = new batchQueryCategorys_result();
            receiveBase(result, "batchQueryCategorys");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchQueryCategorys failed: unknown result");
        }

        public com.aries.hermes.idl.dto.ThriftResponse updateCategoryNameById(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id, java.lang.String categoryName) throws org.apache.thrift.TException {
            send_updateCategoryNameById(companyDTO, id, categoryName);
            return recv_updateCategoryNameById();
        }

        public void send_updateCategoryNameById(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id, java.lang.String categoryName) throws org.apache.thrift.TException {
            updateCategoryNameById_args args = new updateCategoryNameById_args();
            args.setCompanyDTO(companyDTO);
            args.setId(id);
            args.setCategoryName(categoryName);
            sendBase("updateCategoryNameById", args);
        }

        public com.aries.hermes.idl.dto.ThriftResponse recv_updateCategoryNameById() throws org.apache.thrift.TException {
            updateCategoryNameById_result result = new updateCategoryNameById_result();
            receiveBase(result, "updateCategoryNameById");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCategoryNameById failed: unknown result");
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void ping(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
            public ping_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
                ping_args args = new ping_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_ping();
            }
        }

        public void addCategory(com.aries.hermes.idl.dto.CompanyDTO companyDTO, java.lang.String categoryName, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            addCategory_call method_call = new addCategory_call(companyDTO, categoryName, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class addCategory_call extends org.apache.thrift.async.TAsyncMethodCall<com.aries.hermes.idl.dto.ThriftResponse> {
            private com.aries.hermes.idl.dto.CompanyDTO companyDTO;
            private java.lang.String categoryName;

            public addCategory_call(com.aries.hermes.idl.dto.CompanyDTO companyDTO, java.lang.String categoryName, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyDTO = companyDTO;
                this.categoryName = categoryName;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addCategory", org.apache.thrift.protocol.TMessageType.CALL, 0));
                addCategory_args args = new addCategory_args();
                args.setCompanyDTO(companyDTO);
                args.setCategoryName(categoryName);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.aries.hermes.idl.dto.ThriftResponse getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_addCategory();
            }
        }

        public void queryNextCategory(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.CategoryDTO> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            queryNextCategory_call method_call = new queryNextCategory_call(companyDTO, id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class queryNextCategory_call extends org.apache.thrift.async.TAsyncMethodCall<com.aries.hermes.idl.dto.CategoryDTO> {
            private com.aries.hermes.idl.dto.CompanyDTO companyDTO;
            private long id;

            public queryNextCategory_call(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.CategoryDTO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyDTO = companyDTO;
                this.id = id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryNextCategory", org.apache.thrift.protocol.TMessageType.CALL, 0));
                queryNextCategory_args args = new queryNextCategory_args();
                args.setCompanyDTO(companyDTO);
                args.setId(id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.aries.hermes.idl.dto.CategoryDTO getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_queryNextCategory();
            }
        }

        public void queryAllCategorys(com.aries.hermes.idl.dto.CompanyDTO companyDTO, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.hermes.idl.dto.CategoryDTO>> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            queryAllCategorys_call method_call = new queryAllCategorys_call(companyDTO, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class queryAllCategorys_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.aries.hermes.idl.dto.CategoryDTO>> {
            private com.aries.hermes.idl.dto.CompanyDTO companyDTO;

            public queryAllCategorys_call(com.aries.hermes.idl.dto.CompanyDTO companyDTO, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.hermes.idl.dto.CategoryDTO>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyDTO = companyDTO;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryAllCategorys", org.apache.thrift.protocol.TMessageType.CALL, 0));
                queryAllCategorys_args args = new queryAllCategorys_args();
                args.setCompanyDTO(companyDTO);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.List<com.aries.hermes.idl.dto.CategoryDTO> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_queryAllCategorys();
            }
        }

        public void batchQueryCategorys(com.aries.hermes.idl.dto.CompanyDTO companyDTO, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.hermes.idl.dto.CategoryDTO>> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            batchQueryCategorys_call method_call = new batchQueryCategorys_call(companyDTO, page, pageSize, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class batchQueryCategorys_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.aries.hermes.idl.dto.CategoryDTO>> {
            private com.aries.hermes.idl.dto.CompanyDTO companyDTO;
            private int page;
            private int pageSize;

            public batchQueryCategorys_call(com.aries.hermes.idl.dto.CompanyDTO companyDTO, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.hermes.idl.dto.CategoryDTO>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyDTO = companyDTO;
                this.page = page;
                this.pageSize = pageSize;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchQueryCategorys", org.apache.thrift.protocol.TMessageType.CALL, 0));
                batchQueryCategorys_args args = new batchQueryCategorys_args();
                args.setCompanyDTO(companyDTO);
                args.setPage(page);
                args.setPageSize(pageSize);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.List<com.aries.hermes.idl.dto.CategoryDTO> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_batchQueryCategorys();
            }
        }

        public void updateCategoryNameById(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id, java.lang.String categoryName, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            updateCategoryNameById_call method_call = new updateCategoryNameById_call(companyDTO, id, categoryName, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class updateCategoryNameById_call extends org.apache.thrift.async.TAsyncMethodCall<com.aries.hermes.idl.dto.ThriftResponse> {
            private com.aries.hermes.idl.dto.CompanyDTO companyDTO;
            private long id;
            private java.lang.String categoryName;

            public updateCategoryNameById_call(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id, java.lang.String categoryName, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyDTO = companyDTO;
                this.id = id;
                this.categoryName = categoryName;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCategoryNameById", org.apache.thrift.protocol.TMessageType.CALL, 0));
                updateCategoryNameById_args args = new updateCategoryNameById_args();
                args.setCompanyDTO(companyDTO);
                args.setId(id);
                args.setCategoryName(categoryName);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.aries.hermes.idl.dto.ThriftResponse getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_updateCategoryNameById();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("ping", new ping());
            processMap.put("addCategory", new addCategory());
            processMap.put("queryNextCategory", new queryNextCategory());
            processMap.put("queryAllCategorys", new queryAllCategorys());
            processMap.put("batchQueryCategorys", new batchQueryCategorys());
            processMap.put("updateCategoryNameById", new updateCategoryNameById());
            return processMap;
        }

        public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
            public ping() {
                super("ping");
            }

            public ping_args getEmptyArgsInstance() {
                return new ping_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
                ping_result result = new ping_result();
                result.success = iface.ping();
                return result;
            }
        }

        public static class addCategory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addCategory_args> {
            public addCategory() {
                super("addCategory");
            }

            public addCategory_args getEmptyArgsInstance() {
                return new addCategory_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public addCategory_result getResult(I iface, addCategory_args args) throws org.apache.thrift.TException {
                addCategory_result result = new addCategory_result();
                result.success = iface.addCategory(args.companyDTO, args.categoryName);
                return result;
            }
        }

        public static class queryNextCategory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryNextCategory_args> {
            public queryNextCategory() {
                super("queryNextCategory");
            }

            public queryNextCategory_args getEmptyArgsInstance() {
                return new queryNextCategory_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public queryNextCategory_result getResult(I iface, queryNextCategory_args args) throws org.apache.thrift.TException {
                queryNextCategory_result result = new queryNextCategory_result();
                result.success = iface.queryNextCategory(args.companyDTO, args.id);
                return result;
            }
        }

        public static class queryAllCategorys<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryAllCategorys_args> {
            public queryAllCategorys() {
                super("queryAllCategorys");
            }

            public queryAllCategorys_args getEmptyArgsInstance() {
                return new queryAllCategorys_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public queryAllCategorys_result getResult(I iface, queryAllCategorys_args args) throws org.apache.thrift.TException {
                queryAllCategorys_result result = new queryAllCategorys_result();
                result.success = iface.queryAllCategorys(args.companyDTO);
                return result;
            }
        }

        public static class batchQueryCategorys<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchQueryCategorys_args> {
            public batchQueryCategorys() {
                super("batchQueryCategorys");
            }

            public batchQueryCategorys_args getEmptyArgsInstance() {
                return new batchQueryCategorys_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public batchQueryCategorys_result getResult(I iface, batchQueryCategorys_args args) throws org.apache.thrift.TException {
                batchQueryCategorys_result result = new batchQueryCategorys_result();
                result.success = iface.batchQueryCategorys(args.companyDTO, args.page, args.pageSize);
                return result;
            }
        }

        public static class updateCategoryNameById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCategoryNameById_args> {
            public updateCategoryNameById() {
                super("updateCategoryNameById");
            }

            public updateCategoryNameById_args getEmptyArgsInstance() {
                return new updateCategoryNameById_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public updateCategoryNameById_result getResult(I iface, updateCategoryNameById_args args) throws org.apache.thrift.TException {
                updateCategoryNameById_result result = new updateCategoryNameById_result();
                result.success = iface.updateCategoryNameById(args.companyDTO, args.id, args.categoryName);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("ping", new ping());
            processMap.put("addCategory", new addCategory());
            processMap.put("queryNextCategory", new queryNextCategory());
            processMap.put("queryAllCategorys", new queryAllCategorys());
            processMap.put("batchQueryCategorys", new batchQueryCategorys());
            processMap.put("updateCategoryNameById", new updateCategoryNameById());
            return processMap;
        }

        public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, java.lang.String> {
            public ping() {
                super("ping");
            }

            public ping_args getEmptyArgsInstance() {
                return new ping_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
                    public void onComplete(java.lang.String o) {
                        ping_result result = new ping_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        ping_result result = new ping_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
                iface.ping(resultHandler);
            }
        }

        public static class addCategory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addCategory_args, com.aries.hermes.idl.dto.ThriftResponse> {
            public addCategory() {
                super("addCategory");
            }

            public addCategory_args getEmptyArgsInstance() {
                return new addCategory_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse>() {
                    public void onComplete(com.aries.hermes.idl.dto.ThriftResponse o) {
                        addCategory_result result = new addCategory_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        addCategory_result result = new addCategory_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, addCategory_args args, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler) throws org.apache.thrift.TException {
                iface.addCategory(args.companyDTO, args.categoryName, resultHandler);
            }
        }

        public static class queryNextCategory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryNextCategory_args, com.aries.hermes.idl.dto.CategoryDTO> {
            public queryNextCategory() {
                super("queryNextCategory");
            }

            public queryNextCategory_args getEmptyArgsInstance() {
                return new queryNextCategory_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.CategoryDTO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.CategoryDTO>() {
                    public void onComplete(com.aries.hermes.idl.dto.CategoryDTO o) {
                        queryNextCategory_result result = new queryNextCategory_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        queryNextCategory_result result = new queryNextCategory_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, queryNextCategory_args args, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.CategoryDTO> resultHandler) throws org.apache.thrift.TException {
                iface.queryNextCategory(args.companyDTO, args.id, resultHandler);
            }
        }

        public static class queryAllCategorys<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryAllCategorys_args, java.util.List<com.aries.hermes.idl.dto.CategoryDTO>> {
            public queryAllCategorys() {
                super("queryAllCategorys");
            }

            public queryAllCategorys_args getEmptyArgsInstance() {
                return new queryAllCategorys_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.hermes.idl.dto.CategoryDTO>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.hermes.idl.dto.CategoryDTO>>() {
                    public void onComplete(java.util.List<com.aries.hermes.idl.dto.CategoryDTO> o) {
                        queryAllCategorys_result result = new queryAllCategorys_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        queryAllCategorys_result result = new queryAllCategorys_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, queryAllCategorys_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.hermes.idl.dto.CategoryDTO>> resultHandler) throws org.apache.thrift.TException {
                iface.queryAllCategorys(args.companyDTO, resultHandler);
            }
        }

        public static class batchQueryCategorys<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchQueryCategorys_args, java.util.List<com.aries.hermes.idl.dto.CategoryDTO>> {
            public batchQueryCategorys() {
                super("batchQueryCategorys");
            }

            public batchQueryCategorys_args getEmptyArgsInstance() {
                return new batchQueryCategorys_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.hermes.idl.dto.CategoryDTO>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.hermes.idl.dto.CategoryDTO>>() {
                    public void onComplete(java.util.List<com.aries.hermes.idl.dto.CategoryDTO> o) {
                        batchQueryCategorys_result result = new batchQueryCategorys_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        batchQueryCategorys_result result = new batchQueryCategorys_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, batchQueryCategorys_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.hermes.idl.dto.CategoryDTO>> resultHandler) throws org.apache.thrift.TException {
                iface.batchQueryCategorys(args.companyDTO, args.page, args.pageSize, resultHandler);
            }
        }

        public static class updateCategoryNameById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCategoryNameById_args, com.aries.hermes.idl.dto.ThriftResponse> {
            public updateCategoryNameById() {
                super("updateCategoryNameById");
            }

            public updateCategoryNameById_args getEmptyArgsInstance() {
                return new updateCategoryNameById_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse>() {
                    public void onComplete(com.aries.hermes.idl.dto.ThriftResponse o) {
                        updateCategoryNameById_result result = new updateCategoryNameById_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        updateCategoryNameById_result result = new updateCategoryNameById_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, updateCategoryNameById_args args, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler) throws org.apache.thrift.TException {
                iface.updateCategoryNameById(args.companyDTO, args.id, args.categoryName, resultHandler);
            }
        }

    }

    public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_argsTupleSchemeFactory();


        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
        }

        public ping_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ping_args(ping_args other) {
        }

        public ping_args deepCopy() {
            return new ping_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof ping_args)
                return this.equals((ping_args) that);
            return false;
        }

        public boolean equals(ping_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(ping_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class ping_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ping_argsStandardScheme getScheme() {
                return new ping_argsStandardScheme();
            }
        }

        private static class ping_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ping_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ping_argsTupleScheme getScheme() {
                return new ping_argsTupleScheme();
            }
        }

        private static class ping_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        java.lang.String success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
        }

        public ping_result() {
        }

        public ping_result(
                java.lang.String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ping_result(ping_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public ping_result deepCopy() {
            return new ping_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getSuccess() {
            return this.success;
        }

        public ping_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.String) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof ping_result)
                return this.equals((ping_result) that);
            return false;
        }

        public boolean equals(ping_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(ping_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class ping_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ping_resultStandardScheme getScheme() {
                return new ping_resultStandardScheme();
            }
        }

        private static class ping_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ping_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ping_resultTupleScheme getScheme() {
                return new ping_resultTupleScheme();
            }
        }

        private static class ping_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addCategory_args implements org.apache.thrift.TBase<addCategory_args, addCategory_args._Fields>, java.io.Serializable, Cloneable, Comparable<addCategory_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCategory_args");

        private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField CATEGORY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryName", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addCategory_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addCategory_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.CompanyDTO companyDTO; // required
        public @org.apache.thrift.annotation.Nullable
        java.lang.String categoryName; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_DTO((short) 1, "companyDTO"),
            CATEGORY_NAME((short) 2, "categoryName");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // COMPANY_DTO
                        return COMPANY_DTO;
                    case 2: // CATEGORY_NAME
                        return CATEGORY_NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.CompanyDTO.class)));
            tmpMap.put(_Fields.CATEGORY_NAME, new org.apache.thrift.meta_data.FieldMetaData("categoryName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCategory_args.class, metaDataMap);
        }

        public addCategory_args() {
        }

        public addCategory_args(
                com.aries.hermes.idl.dto.CompanyDTO companyDTO,
                java.lang.String categoryName) {
            this();
            this.companyDTO = companyDTO;
            this.categoryName = categoryName;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addCategory_args(addCategory_args other) {
            if (other.isSetCompanyDTO()) {
                this.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO(other.companyDTO);
            }
            if (other.isSetCategoryName()) {
                this.categoryName = other.categoryName;
            }
        }

        public addCategory_args deepCopy() {
            return new addCategory_args(this);
        }

        @Override
        public void clear() {
            this.companyDTO = null;
            this.categoryName = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.CompanyDTO getCompanyDTO() {
            return this.companyDTO;
        }

        public addCategory_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CompanyDTO companyDTO) {
            this.companyDTO = companyDTO;
            return this;
        }

        public void unsetCompanyDTO() {
            this.companyDTO = null;
        }

        /**
         * Returns true if field companyDTO is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCompanyDTO() {
            return this.companyDTO != null;
        }

        public void setCompanyDTOIsSet(boolean value) {
            if (!value) {
                this.companyDTO = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getCategoryName() {
            return this.categoryName;
        }

        public addCategory_args setCategoryName(@org.apache.thrift.annotation.Nullable java.lang.String categoryName) {
            this.categoryName = categoryName;
            return this;
        }

        public void unsetCategoryName() {
            this.categoryName = null;
        }

        /**
         * Returns true if field categoryName is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCategoryName() {
            return this.categoryName != null;
        }

        public void setCategoryNameIsSet(boolean value) {
            if (!value) {
                this.categoryName = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case COMPANY_DTO:
                    if (value == null) {
                        unsetCompanyDTO();
                    } else {
                        setCompanyDTO((com.aries.hermes.idl.dto.CompanyDTO) value);
                    }
                    break;

                case CATEGORY_NAME:
                    if (value == null) {
                        unsetCategoryName();
                    } else {
                        setCategoryName((java.lang.String) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_DTO:
                    return getCompanyDTO();

                case CATEGORY_NAME:
                    return getCategoryName();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_DTO:
                    return isSetCompanyDTO();
                case CATEGORY_NAME:
                    return isSetCategoryName();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addCategory_args)
                return this.equals((addCategory_args) that);
            return false;
        }

        public boolean equals(addCategory_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyDTO = true && this.isSetCompanyDTO();
            boolean that_present_companyDTO = true && that.isSetCompanyDTO();
            if (this_present_companyDTO || that_present_companyDTO) {
                if (!(this_present_companyDTO && that_present_companyDTO))
                    return false;
                if (!this.companyDTO.equals(that.companyDTO))
                    return false;
            }

            boolean this_present_categoryName = true && this.isSetCategoryName();
            boolean that_present_categoryName = true && that.isSetCategoryName();
            if (this_present_categoryName || that_present_categoryName) {
                if (!(this_present_categoryName && that_present_categoryName))
                    return false;
                if (!this.categoryName.equals(that.categoryName))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
            if (isSetCompanyDTO())
                hashCode = hashCode * 8191 + companyDTO.hashCode();

            hashCode = hashCode * 8191 + ((isSetCategoryName()) ? 131071 : 524287);
            if (isSetCategoryName())
                hashCode = hashCode * 8191 + categoryName.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addCategory_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyDTO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCategoryName()).compareTo(other.isSetCategoryName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCategoryName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryName, other.categoryName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addCategory_args(");
            boolean first = true;

            sb.append("companyDTO:");
            if (this.companyDTO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyDTO);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("categoryName:");
            if (this.categoryName == null) {
                sb.append("null");
            } else {
                sb.append(this.categoryName);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyDTO != null) {
                companyDTO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addCategory_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addCategory_argsStandardScheme getScheme() {
                return new addCategory_argsStandardScheme();
            }
        }

        private static class addCategory_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addCategory_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addCategory_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                                struct.companyDTO.read(iprot);
                                struct.setCompanyDTOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // CATEGORY_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.categoryName = iprot.readString();
                                struct.setCategoryNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addCategory_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyDTO != null) {
                    oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
                    struct.companyDTO.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.categoryName != null) {
                    oprot.writeFieldBegin(CATEGORY_NAME_FIELD_DESC);
                    oprot.writeString(struct.categoryName);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addCategory_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addCategory_argsTupleScheme getScheme() {
                return new addCategory_argsTupleScheme();
            }
        }

        private static class addCategory_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addCategory_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addCategory_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyDTO()) {
                    optionals.set(0);
                }
                if (struct.isSetCategoryName()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCompanyDTO()) {
                    struct.companyDTO.write(oprot);
                }
                if (struct.isSetCategoryName()) {
                    oprot.writeString(struct.categoryName);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addCategory_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                    struct.companyDTO.read(iprot);
                    struct.setCompanyDTOIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.categoryName = iprot.readString();
                    struct.setCategoryNameIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addCategory_result implements org.apache.thrift.TBase<addCategory_result, addCategory_result._Fields>, java.io.Serializable, Cloneable, Comparable<addCategory_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCategory_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addCategory_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addCategory_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.ThriftResponse success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.ThriftResponse.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCategory_result.class, metaDataMap);
        }

        public addCategory_result() {
        }

        public addCategory_result(
                com.aries.hermes.idl.dto.ThriftResponse success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addCategory_result(addCategory_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.aries.hermes.idl.dto.ThriftResponse(other.success);
            }
        }

        public addCategory_result deepCopy() {
            return new addCategory_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.ThriftResponse getSuccess() {
            return this.success;
        }

        public addCategory_result setSuccess(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.ThriftResponse success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.aries.hermes.idl.dto.ThriftResponse) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addCategory_result)
                return this.equals((addCategory_result) that);
            return false;
        }

        public boolean equals(addCategory_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addCategory_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addCategory_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addCategory_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addCategory_resultStandardScheme getScheme() {
                return new addCategory_resultStandardScheme();
            }
        }

        private static class addCategory_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addCategory_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addCategory_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.aries.hermes.idl.dto.ThriftResponse();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addCategory_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addCategory_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addCategory_resultTupleScheme getScheme() {
                return new addCategory_resultTupleScheme();
            }
        }

        private static class addCategory_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addCategory_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addCategory_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addCategory_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.aries.hermes.idl.dto.ThriftResponse();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryNextCategory_args implements org.apache.thrift.TBase<queryNextCategory_args, queryNextCategory_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryNextCategory_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryNextCategory_args");

        private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryNextCategory_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryNextCategory_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.CompanyDTO companyDTO; // required
        public long id; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_DTO((short) 1, "companyDTO"),
            ID((short) 2, "id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // COMPANY_DTO
                        return COMPANY_DTO;
                    case 2: // ID
                        return ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.CompanyDTO.class)));
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryNextCategory_args.class, metaDataMap);
        }

        public queryNextCategory_args() {
        }

        public queryNextCategory_args(
                com.aries.hermes.idl.dto.CompanyDTO companyDTO,
                long id) {
            this();
            this.companyDTO = companyDTO;
            this.id = id;
            setIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryNextCategory_args(queryNextCategory_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetCompanyDTO()) {
                this.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO(other.companyDTO);
            }
            this.id = other.id;
        }

        public queryNextCategory_args deepCopy() {
            return new queryNextCategory_args(this);
        }

        @Override
        public void clear() {
            this.companyDTO = null;
            setIdIsSet(false);
            this.id = 0;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.CompanyDTO getCompanyDTO() {
            return this.companyDTO;
        }

        public queryNextCategory_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CompanyDTO companyDTO) {
            this.companyDTO = companyDTO;
            return this;
        }

        public void unsetCompanyDTO() {
            this.companyDTO = null;
        }

        /**
         * Returns true if field companyDTO is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCompanyDTO() {
            return this.companyDTO != null;
        }

        public void setCompanyDTOIsSet(boolean value) {
            if (!value) {
                this.companyDTO = null;
            }
        }

        public long getId() {
            return this.id;
        }

        public queryNextCategory_args setId(long id) {
            this.id = id;
            setIdIsSet(true);
            return this;
        }

        public void unsetId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
        }

        /**
         * Returns true if field id is set (has been assigned a value) and false otherwise
         */
        public boolean isSetId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case COMPANY_DTO:
                    if (value == null) {
                        unsetCompanyDTO();
                    } else {
                        setCompanyDTO((com.aries.hermes.idl.dto.CompanyDTO) value);
                    }
                    break;

                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_DTO:
                    return getCompanyDTO();

                case ID:
                    return getId();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_DTO:
                    return isSetCompanyDTO();
                case ID:
                    return isSetId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof queryNextCategory_args)
                return this.equals((queryNextCategory_args) that);
            return false;
        }

        public boolean equals(queryNextCategory_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyDTO = true && this.isSetCompanyDTO();
            boolean that_present_companyDTO = true && that.isSetCompanyDTO();
            if (this_present_companyDTO || that_present_companyDTO) {
                if (!(this_present_companyDTO && that_present_companyDTO))
                    return false;
                if (!this.companyDTO.equals(that.companyDTO))
                    return false;
            }

            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
            if (isSetCompanyDTO())
                hashCode = hashCode * 8191 + companyDTO.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

            return hashCode;
        }

        @Override
        public int compareTo(queryNextCategory_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyDTO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryNextCategory_args(");
            boolean first = true;

            sb.append("companyDTO:");
            if (this.companyDTO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyDTO);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("id:");
            sb.append(this.id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyDTO != null) {
                companyDTO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryNextCategory_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryNextCategory_argsStandardScheme getScheme() {
                return new queryNextCategory_argsStandardScheme();
            }
        }

        private static class queryNextCategory_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryNextCategory_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryNextCategory_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                                struct.companyDTO.read(iprot);
                                struct.setCompanyDTOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.id = iprot.readI64();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryNextCategory_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyDTO != null) {
                    oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
                    struct.companyDTO.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI64(struct.id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryNextCategory_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryNextCategory_argsTupleScheme getScheme() {
                return new queryNextCategory_argsTupleScheme();
            }
        }

        private static class queryNextCategory_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryNextCategory_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryNextCategory_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyDTO()) {
                    optionals.set(0);
                }
                if (struct.isSetId()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCompanyDTO()) {
                    struct.companyDTO.write(oprot);
                }
                if (struct.isSetId()) {
                    oprot.writeI64(struct.id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryNextCategory_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                    struct.companyDTO.read(iprot);
                    struct.setCompanyDTOIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.id = iprot.readI64();
                    struct.setIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryNextCategory_result implements org.apache.thrift.TBase<queryNextCategory_result, queryNextCategory_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryNextCategory_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryNextCategory_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryNextCategory_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryNextCategory_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.CategoryDTO success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.CategoryDTO.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryNextCategory_result.class, metaDataMap);
        }

        public queryNextCategory_result() {
        }

        public queryNextCategory_result(
                com.aries.hermes.idl.dto.CategoryDTO success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryNextCategory_result(queryNextCategory_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.aries.hermes.idl.dto.CategoryDTO(other.success);
            }
        }

        public queryNextCategory_result deepCopy() {
            return new queryNextCategory_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.CategoryDTO getSuccess() {
            return this.success;
        }

        public queryNextCategory_result setSuccess(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CategoryDTO success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.aries.hermes.idl.dto.CategoryDTO) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof queryNextCategory_result)
                return this.equals((queryNextCategory_result) that);
            return false;
        }

        public boolean equals(queryNextCategory_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryNextCategory_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryNextCategory_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryNextCategory_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryNextCategory_resultStandardScheme getScheme() {
                return new queryNextCategory_resultStandardScheme();
            }
        }

        private static class queryNextCategory_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryNextCategory_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryNextCategory_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.aries.hermes.idl.dto.CategoryDTO();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryNextCategory_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryNextCategory_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryNextCategory_resultTupleScheme getScheme() {
                return new queryNextCategory_resultTupleScheme();
            }
        }

        private static class queryNextCategory_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryNextCategory_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryNextCategory_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryNextCategory_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.aries.hermes.idl.dto.CategoryDTO();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryAllCategorys_args implements org.apache.thrift.TBase<queryAllCategorys_args, queryAllCategorys_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryAllCategorys_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAllCategorys_args");

        private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryAllCategorys_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryAllCategorys_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.CompanyDTO companyDTO; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_DTO((short) 1, "companyDTO");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // COMPANY_DTO
                        return COMPANY_DTO;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.CompanyDTO.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAllCategorys_args.class, metaDataMap);
        }

        public queryAllCategorys_args() {
        }

        public queryAllCategorys_args(
                com.aries.hermes.idl.dto.CompanyDTO companyDTO) {
            this();
            this.companyDTO = companyDTO;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryAllCategorys_args(queryAllCategorys_args other) {
            if (other.isSetCompanyDTO()) {
                this.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO(other.companyDTO);
            }
        }

        public queryAllCategorys_args deepCopy() {
            return new queryAllCategorys_args(this);
        }

        @Override
        public void clear() {
            this.companyDTO = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.CompanyDTO getCompanyDTO() {
            return this.companyDTO;
        }

        public queryAllCategorys_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CompanyDTO companyDTO) {
            this.companyDTO = companyDTO;
            return this;
        }

        public void unsetCompanyDTO() {
            this.companyDTO = null;
        }

        /**
         * Returns true if field companyDTO is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCompanyDTO() {
            return this.companyDTO != null;
        }

        public void setCompanyDTOIsSet(boolean value) {
            if (!value) {
                this.companyDTO = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case COMPANY_DTO:
                    if (value == null) {
                        unsetCompanyDTO();
                    } else {
                        setCompanyDTO((com.aries.hermes.idl.dto.CompanyDTO) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_DTO:
                    return getCompanyDTO();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_DTO:
                    return isSetCompanyDTO();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof queryAllCategorys_args)
                return this.equals((queryAllCategorys_args) that);
            return false;
        }

        public boolean equals(queryAllCategorys_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyDTO = true && this.isSetCompanyDTO();
            boolean that_present_companyDTO = true && that.isSetCompanyDTO();
            if (this_present_companyDTO || that_present_companyDTO) {
                if (!(this_present_companyDTO && that_present_companyDTO))
                    return false;
                if (!this.companyDTO.equals(that.companyDTO))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
            if (isSetCompanyDTO())
                hashCode = hashCode * 8191 + companyDTO.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryAllCategorys_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyDTO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryAllCategorys_args(");
            boolean first = true;

            sb.append("companyDTO:");
            if (this.companyDTO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyDTO);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyDTO != null) {
                companyDTO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryAllCategorys_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllCategorys_argsStandardScheme getScheme() {
                return new queryAllCategorys_argsStandardScheme();
            }
        }

        private static class queryAllCategorys_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryAllCategorys_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryAllCategorys_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                                struct.companyDTO.read(iprot);
                                struct.setCompanyDTOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryAllCategorys_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyDTO != null) {
                    oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
                    struct.companyDTO.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryAllCategorys_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllCategorys_argsTupleScheme getScheme() {
                return new queryAllCategorys_argsTupleScheme();
            }
        }

        private static class queryAllCategorys_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryAllCategorys_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryAllCategorys_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyDTO()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetCompanyDTO()) {
                    struct.companyDTO.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryAllCategorys_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                    struct.companyDTO.read(iprot);
                    struct.setCompanyDTOIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryAllCategorys_result implements org.apache.thrift.TBase<queryAllCategorys_result, queryAllCategorys_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryAllCategorys_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAllCategorys_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryAllCategorys_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryAllCategorys_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        java.util.List<com.aries.hermes.idl.dto.CategoryDTO> success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.CategoryDTO.class))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAllCategorys_result.class, metaDataMap);
        }

        public queryAllCategorys_result() {
        }

        public queryAllCategorys_result(
                java.util.List<com.aries.hermes.idl.dto.CategoryDTO> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryAllCategorys_result(queryAllCategorys_result other) {
            if (other.isSetSuccess()) {
                java.util.List<com.aries.hermes.idl.dto.CategoryDTO> __this__success = new java.util.ArrayList<com.aries.hermes.idl.dto.CategoryDTO>(other.success.size());
                for (com.aries.hermes.idl.dto.CategoryDTO other_element : other.success) {
                    __this__success.add(new com.aries.hermes.idl.dto.CategoryDTO(other_element));
                }
                this.success = __this__success;
            }
        }

        public queryAllCategorys_result deepCopy() {
            return new queryAllCategorys_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        @org.apache.thrift.annotation.Nullable
        public java.util.Iterator<com.aries.hermes.idl.dto.CategoryDTO> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(com.aries.hermes.idl.dto.CategoryDTO elem) {
            if (this.success == null) {
                this.success = new java.util.ArrayList<com.aries.hermes.idl.dto.CategoryDTO>();
            }
            this.success.add(elem);
        }

        @org.apache.thrift.annotation.Nullable
        public java.util.List<com.aries.hermes.idl.dto.CategoryDTO> getSuccess() {
            return this.success;
        }

        public queryAllCategorys_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<com.aries.hermes.idl.dto.CategoryDTO> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.util.List<com.aries.hermes.idl.dto.CategoryDTO>) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof queryAllCategorys_result)
                return this.equals((queryAllCategorys_result) that);
            return false;
        }

        public boolean equals(queryAllCategorys_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryAllCategorys_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryAllCategorys_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryAllCategorys_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllCategorys_resultStandardScheme getScheme() {
                return new queryAllCategorys_resultStandardScheme();
            }
        }

        private static class queryAllCategorys_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryAllCategorys_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryAllCategorys_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                                    struct.success = new java.util.ArrayList<com.aries.hermes.idl.dto.CategoryDTO>(_list32.size);
                                    @org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CategoryDTO _elem33;
                                    for (int _i34 = 0; _i34 < _list32.size; ++_i34) {
                                        _elem33 = new com.aries.hermes.idl.dto.CategoryDTO();
                                        _elem33.read(iprot);
                                        struct.success.add(_elem33);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryAllCategorys_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (com.aries.hermes.idl.dto.CategoryDTO _iter35 : struct.success) {
                            _iter35.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryAllCategorys_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllCategorys_resultTupleScheme getScheme() {
                return new queryAllCategorys_resultTupleScheme();
            }
        }

        private static class queryAllCategorys_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryAllCategorys_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryAllCategorys_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (com.aries.hermes.idl.dto.CategoryDTO _iter36 : struct.success) {
                            _iter36.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryAllCategorys_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new java.util.ArrayList<com.aries.hermes.idl.dto.CategoryDTO>(_list37.size);
                        @org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CategoryDTO _elem38;
                        for (int _i39 = 0; _i39 < _list37.size; ++_i39) {
                            _elem38 = new com.aries.hermes.idl.dto.CategoryDTO();
                            _elem38.read(iprot);
                            struct.success.add(_elem38);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchQueryCategorys_args implements org.apache.thrift.TBase<batchQueryCategorys_args, batchQueryCategorys_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchQueryCategorys_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchQueryCategorys_args");

        private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short) 2);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchQueryCategorys_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchQueryCategorys_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.CompanyDTO companyDTO; // required
        public int page; // required
        public int pageSize; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_DTO((short) 1, "companyDTO"),
            PAGE((short) 2, "page"),
            PAGE_SIZE((short) 3, "pageSize");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // COMPANY_DTO
                        return COMPANY_DTO;
                    case 2: // PAGE
                        return PAGE;
                    case 3: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PAGE_ISSET_ID = 0;
        private static final int __PAGESIZE_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.CompanyDTO.class)));
            tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchQueryCategorys_args.class, metaDataMap);
        }

        public batchQueryCategorys_args() {
        }

        public batchQueryCategorys_args(
                com.aries.hermes.idl.dto.CompanyDTO companyDTO,
                int page,
                int pageSize) {
            this();
            this.companyDTO = companyDTO;
            this.page = page;
            setPageIsSet(true);
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchQueryCategorys_args(batchQueryCategorys_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetCompanyDTO()) {
                this.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO(other.companyDTO);
            }
            this.page = other.page;
            this.pageSize = other.pageSize;
        }

        public batchQueryCategorys_args deepCopy() {
            return new batchQueryCategorys_args(this);
        }

        @Override
        public void clear() {
            this.companyDTO = null;
            setPageIsSet(false);
            this.page = 0;
            setPageSizeIsSet(false);
            this.pageSize = 0;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.CompanyDTO getCompanyDTO() {
            return this.companyDTO;
        }

        public batchQueryCategorys_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CompanyDTO companyDTO) {
            this.companyDTO = companyDTO;
            return this;
        }

        public void unsetCompanyDTO() {
            this.companyDTO = null;
        }

        /**
         * Returns true if field companyDTO is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCompanyDTO() {
            return this.companyDTO != null;
        }

        public void setCompanyDTOIsSet(boolean value) {
            if (!value) {
                this.companyDTO = null;
            }
        }

        public int getPage() {
            return this.page;
        }

        public batchQueryCategorys_args setPage(int page) {
            this.page = page;
            setPageIsSet(true);
            return this;
        }

        public void unsetPage() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        /**
         * Returns true if field page is set (has been assigned a value) and false otherwise
         */
        public boolean isSetPage() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        public void setPageIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
        }

        public int getPageSize() {
            return this.pageSize;
        }

        public batchQueryCategorys_args setPageSize(int pageSize) {
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
            return this;
        }

        public void unsetPageSize() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        /**
         * Returns true if field pageSize is set (has been assigned a value) and false otherwise
         */
        public boolean isSetPageSize() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        public void setPageSizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case COMPANY_DTO:
                    if (value == null) {
                        unsetCompanyDTO();
                    } else {
                        setCompanyDTO((com.aries.hermes.idl.dto.CompanyDTO) value);
                    }
                    break;

                case PAGE:
                    if (value == null) {
                        unsetPage();
                    } else {
                        setPage((java.lang.Integer) value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPageSize();
                    } else {
                        setPageSize((java.lang.Integer) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_DTO:
                    return getCompanyDTO();

                case PAGE:
                    return getPage();

                case PAGE_SIZE:
                    return getPageSize();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_DTO:
                    return isSetCompanyDTO();
                case PAGE:
                    return isSetPage();
                case PAGE_SIZE:
                    return isSetPageSize();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchQueryCategorys_args)
                return this.equals((batchQueryCategorys_args) that);
            return false;
        }

        public boolean equals(batchQueryCategorys_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyDTO = true && this.isSetCompanyDTO();
            boolean that_present_companyDTO = true && that.isSetCompanyDTO();
            if (this_present_companyDTO || that_present_companyDTO) {
                if (!(this_present_companyDTO && that_present_companyDTO))
                    return false;
                if (!this.companyDTO.equals(that.companyDTO))
                    return false;
            }

            boolean this_present_page = true;
            boolean that_present_page = true;
            if (this_present_page || that_present_page) {
                if (!(this_present_page && that_present_page))
                    return false;
                if (this.page != that.page)
                    return false;
            }

            boolean this_present_pageSize = true;
            boolean that_present_pageSize = true;
            if (this_present_pageSize || that_present_pageSize) {
                if (!(this_present_pageSize && that_present_pageSize))
                    return false;
                if (this.pageSize != that.pageSize)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
            if (isSetCompanyDTO())
                hashCode = hashCode * 8191 + companyDTO.hashCode();

            hashCode = hashCode * 8191 + page;

            hashCode = hashCode * 8191 + pageSize;

            return hashCode;
        }

        @Override
        public int compareTo(batchQueryCategorys_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyDTO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPageSize()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchQueryCategorys_args(");
            boolean first = true;

            sb.append("companyDTO:");
            if (this.companyDTO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyDTO);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("page:");
            sb.append(this.page);
            first = false;
            if (!first) sb.append(", ");
            sb.append("pageSize:");
            sb.append(this.pageSize);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyDTO != null) {
                companyDTO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchQueryCategorys_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchQueryCategorys_argsStandardScheme getScheme() {
                return new batchQueryCategorys_argsStandardScheme();
            }
        }

        private static class batchQueryCategorys_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchQueryCategorys_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchQueryCategorys_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                                struct.companyDTO.read(iprot);
                                struct.setCompanyDTOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page = iprot.readI32();
                                struct.setPageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pageSize = iprot.readI32();
                                struct.setPageSizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchQueryCategorys_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyDTO != null) {
                    oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
                    struct.companyDTO.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(PAGE_FIELD_DESC);
                oprot.writeI32(struct.page);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.pageSize);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchQueryCategorys_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchQueryCategorys_argsTupleScheme getScheme() {
                return new batchQueryCategorys_argsTupleScheme();
            }
        }

        private static class batchQueryCategorys_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchQueryCategorys_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchQueryCategorys_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyDTO()) {
                    optionals.set(0);
                }
                if (struct.isSetPage()) {
                    optionals.set(1);
                }
                if (struct.isSetPageSize()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetCompanyDTO()) {
                    struct.companyDTO.write(oprot);
                }
                if (struct.isSetPage()) {
                    oprot.writeI32(struct.page);
                }
                if (struct.isSetPageSize()) {
                    oprot.writeI32(struct.pageSize);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchQueryCategorys_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                    struct.companyDTO.read(iprot);
                    struct.setCompanyDTOIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.page = iprot.readI32();
                    struct.setPageIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.pageSize = iprot.readI32();
                    struct.setPageSizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchQueryCategorys_result implements org.apache.thrift.TBase<batchQueryCategorys_result, batchQueryCategorys_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchQueryCategorys_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchQueryCategorys_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchQueryCategorys_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchQueryCategorys_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        java.util.List<com.aries.hermes.idl.dto.CategoryDTO> success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.CategoryDTO.class))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchQueryCategorys_result.class, metaDataMap);
        }

        public batchQueryCategorys_result() {
        }

        public batchQueryCategorys_result(
                java.util.List<com.aries.hermes.idl.dto.CategoryDTO> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchQueryCategorys_result(batchQueryCategorys_result other) {
            if (other.isSetSuccess()) {
                java.util.List<com.aries.hermes.idl.dto.CategoryDTO> __this__success = new java.util.ArrayList<com.aries.hermes.idl.dto.CategoryDTO>(other.success.size());
                for (com.aries.hermes.idl.dto.CategoryDTO other_element : other.success) {
                    __this__success.add(new com.aries.hermes.idl.dto.CategoryDTO(other_element));
                }
                this.success = __this__success;
            }
        }

        public batchQueryCategorys_result deepCopy() {
            return new batchQueryCategorys_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        @org.apache.thrift.annotation.Nullable
        public java.util.Iterator<com.aries.hermes.idl.dto.CategoryDTO> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(com.aries.hermes.idl.dto.CategoryDTO elem) {
            if (this.success == null) {
                this.success = new java.util.ArrayList<com.aries.hermes.idl.dto.CategoryDTO>();
            }
            this.success.add(elem);
        }

        @org.apache.thrift.annotation.Nullable
        public java.util.List<com.aries.hermes.idl.dto.CategoryDTO> getSuccess() {
            return this.success;
        }

        public batchQueryCategorys_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<com.aries.hermes.idl.dto.CategoryDTO> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.util.List<com.aries.hermes.idl.dto.CategoryDTO>) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchQueryCategorys_result)
                return this.equals((batchQueryCategorys_result) that);
            return false;
        }

        public boolean equals(batchQueryCategorys_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(batchQueryCategorys_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchQueryCategorys_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchQueryCategorys_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchQueryCategorys_resultStandardScheme getScheme() {
                return new batchQueryCategorys_resultStandardScheme();
            }
        }

        private static class batchQueryCategorys_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchQueryCategorys_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchQueryCategorys_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                                    struct.success = new java.util.ArrayList<com.aries.hermes.idl.dto.CategoryDTO>(_list40.size);
                                    @org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CategoryDTO _elem41;
                                    for (int _i42 = 0; _i42 < _list40.size; ++_i42) {
                                        _elem41 = new com.aries.hermes.idl.dto.CategoryDTO();
                                        _elem41.read(iprot);
                                        struct.success.add(_elem41);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchQueryCategorys_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (com.aries.hermes.idl.dto.CategoryDTO _iter43 : struct.success) {
                            _iter43.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchQueryCategorys_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchQueryCategorys_resultTupleScheme getScheme() {
                return new batchQueryCategorys_resultTupleScheme();
            }
        }

        private static class batchQueryCategorys_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchQueryCategorys_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchQueryCategorys_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (com.aries.hermes.idl.dto.CategoryDTO _iter44 : struct.success) {
                            _iter44.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchQueryCategorys_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new java.util.ArrayList<com.aries.hermes.idl.dto.CategoryDTO>(_list45.size);
                        @org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CategoryDTO _elem46;
                        for (int _i47 = 0; _i47 < _list45.size; ++_i47) {
                            _elem46 = new com.aries.hermes.idl.dto.CategoryDTO();
                            _elem46.read(iprot);
                            struct.success.add(_elem46);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updateCategoryNameById_args implements org.apache.thrift.TBase<updateCategoryNameById_args, updateCategoryNameById_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateCategoryNameById_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCategoryNameById_args");

        private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short) 2);
        private static final org.apache.thrift.protocol.TField CATEGORY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryName", org.apache.thrift.protocol.TType.STRING, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateCategoryNameById_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateCategoryNameById_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.CompanyDTO companyDTO; // required
        public long id; // required
        public @org.apache.thrift.annotation.Nullable
        java.lang.String categoryName; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_DTO((short) 1, "companyDTO"),
            ID((short) 2, "id"),
            CATEGORY_NAME((short) 3, "categoryName");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // COMPANY_DTO
                        return COMPANY_DTO;
                    case 2: // ID
                        return ID;
                    case 3: // CATEGORY_NAME
                        return CATEGORY_NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.CompanyDTO.class)));
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.CATEGORY_NAME, new org.apache.thrift.meta_data.FieldMetaData("categoryName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCategoryNameById_args.class, metaDataMap);
        }

        public updateCategoryNameById_args() {
        }

        public updateCategoryNameById_args(
                com.aries.hermes.idl.dto.CompanyDTO companyDTO,
                long id,
                java.lang.String categoryName) {
            this();
            this.companyDTO = companyDTO;
            this.id = id;
            setIdIsSet(true);
            this.categoryName = categoryName;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateCategoryNameById_args(updateCategoryNameById_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetCompanyDTO()) {
                this.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO(other.companyDTO);
            }
            this.id = other.id;
            if (other.isSetCategoryName()) {
                this.categoryName = other.categoryName;
            }
        }

        public updateCategoryNameById_args deepCopy() {
            return new updateCategoryNameById_args(this);
        }

        @Override
        public void clear() {
            this.companyDTO = null;
            setIdIsSet(false);
            this.id = 0;
            this.categoryName = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.CompanyDTO getCompanyDTO() {
            return this.companyDTO;
        }

        public updateCategoryNameById_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CompanyDTO companyDTO) {
            this.companyDTO = companyDTO;
            return this;
        }

        public void unsetCompanyDTO() {
            this.companyDTO = null;
        }

        /**
         * Returns true if field companyDTO is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCompanyDTO() {
            return this.companyDTO != null;
        }

        public void setCompanyDTOIsSet(boolean value) {
            if (!value) {
                this.companyDTO = null;
            }
        }

        public long getId() {
            return this.id;
        }

        public updateCategoryNameById_args setId(long id) {
            this.id = id;
            setIdIsSet(true);
            return this;
        }

        public void unsetId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
        }

        /**
         * Returns true if field id is set (has been assigned a value) and false otherwise
         */
        public boolean isSetId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getCategoryName() {
            return this.categoryName;
        }

        public updateCategoryNameById_args setCategoryName(@org.apache.thrift.annotation.Nullable java.lang.String categoryName) {
            this.categoryName = categoryName;
            return this;
        }

        public void unsetCategoryName() {
            this.categoryName = null;
        }

        /**
         * Returns true if field categoryName is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCategoryName() {
            return this.categoryName != null;
        }

        public void setCategoryNameIsSet(boolean value) {
            if (!value) {
                this.categoryName = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case COMPANY_DTO:
                    if (value == null) {
                        unsetCompanyDTO();
                    } else {
                        setCompanyDTO((com.aries.hermes.idl.dto.CompanyDTO) value);
                    }
                    break;

                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((java.lang.Long) value);
                    }
                    break;

                case CATEGORY_NAME:
                    if (value == null) {
                        unsetCategoryName();
                    } else {
                        setCategoryName((java.lang.String) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_DTO:
                    return getCompanyDTO();

                case ID:
                    return getId();

                case CATEGORY_NAME:
                    return getCategoryName();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_DTO:
                    return isSetCompanyDTO();
                case ID:
                    return isSetId();
                case CATEGORY_NAME:
                    return isSetCategoryName();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updateCategoryNameById_args)
                return this.equals((updateCategoryNameById_args) that);
            return false;
        }

        public boolean equals(updateCategoryNameById_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyDTO = true && this.isSetCompanyDTO();
            boolean that_present_companyDTO = true && that.isSetCompanyDTO();
            if (this_present_companyDTO || that_present_companyDTO) {
                if (!(this_present_companyDTO && that_present_companyDTO))
                    return false;
                if (!this.companyDTO.equals(that.companyDTO))
                    return false;
            }

            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            boolean this_present_categoryName = true && this.isSetCategoryName();
            boolean that_present_categoryName = true && that.isSetCategoryName();
            if (this_present_categoryName || that_present_categoryName) {
                if (!(this_present_categoryName && that_present_categoryName))
                    return false;
                if (!this.categoryName.equals(that.categoryName))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
            if (isSetCompanyDTO())
                hashCode = hashCode * 8191 + companyDTO.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

            hashCode = hashCode * 8191 + ((isSetCategoryName()) ? 131071 : 524287);
            if (isSetCategoryName())
                hashCode = hashCode * 8191 + categoryName.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updateCategoryNameById_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyDTO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCategoryName()).compareTo(other.isSetCategoryName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCategoryName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryName, other.categoryName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updateCategoryNameById_args(");
            boolean first = true;

            sb.append("companyDTO:");
            if (this.companyDTO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyDTO);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("id:");
            sb.append(this.id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("categoryName:");
            if (this.categoryName == null) {
                sb.append("null");
            } else {
                sb.append(this.categoryName);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyDTO != null) {
                companyDTO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateCategoryNameById_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateCategoryNameById_argsStandardScheme getScheme() {
                return new updateCategoryNameById_argsStandardScheme();
            }
        }

        private static class updateCategoryNameById_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateCategoryNameById_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateCategoryNameById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                                struct.companyDTO.read(iprot);
                                struct.setCompanyDTOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.id = iprot.readI64();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // CATEGORY_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.categoryName = iprot.readString();
                                struct.setCategoryNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateCategoryNameById_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyDTO != null) {
                    oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
                    struct.companyDTO.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI64(struct.id);
                oprot.writeFieldEnd();
                if (struct.categoryName != null) {
                    oprot.writeFieldBegin(CATEGORY_NAME_FIELD_DESC);
                    oprot.writeString(struct.categoryName);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateCategoryNameById_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateCategoryNameById_argsTupleScheme getScheme() {
                return new updateCategoryNameById_argsTupleScheme();
            }
        }

        private static class updateCategoryNameById_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateCategoryNameById_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateCategoryNameById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyDTO()) {
                    optionals.set(0);
                }
                if (struct.isSetId()) {
                    optionals.set(1);
                }
                if (struct.isSetCategoryName()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetCompanyDTO()) {
                    struct.companyDTO.write(oprot);
                }
                if (struct.isSetId()) {
                    oprot.writeI64(struct.id);
                }
                if (struct.isSetCategoryName()) {
                    oprot.writeString(struct.categoryName);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateCategoryNameById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                    struct.companyDTO.read(iprot);
                    struct.setCompanyDTOIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.id = iprot.readI64();
                    struct.setIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.categoryName = iprot.readString();
                    struct.setCategoryNameIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updateCategoryNameById_result implements org.apache.thrift.TBase<updateCategoryNameById_result, updateCategoryNameById_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateCategoryNameById_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCategoryNameById_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateCategoryNameById_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateCategoryNameById_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.ThriftResponse success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.ThriftResponse.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCategoryNameById_result.class, metaDataMap);
        }

        public updateCategoryNameById_result() {
        }

        public updateCategoryNameById_result(
                com.aries.hermes.idl.dto.ThriftResponse success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateCategoryNameById_result(updateCategoryNameById_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.aries.hermes.idl.dto.ThriftResponse(other.success);
            }
        }

        public updateCategoryNameById_result deepCopy() {
            return new updateCategoryNameById_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.ThriftResponse getSuccess() {
            return this.success;
        }

        public updateCategoryNameById_result setSuccess(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.ThriftResponse success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.aries.hermes.idl.dto.ThriftResponse) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updateCategoryNameById_result)
                return this.equals((updateCategoryNameById_result) that);
            return false;
        }

        public boolean equals(updateCategoryNameById_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updateCategoryNameById_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updateCategoryNameById_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateCategoryNameById_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateCategoryNameById_resultStandardScheme getScheme() {
                return new updateCategoryNameById_resultStandardScheme();
            }
        }

        private static class updateCategoryNameById_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateCategoryNameById_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateCategoryNameById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.aries.hermes.idl.dto.ThriftResponse();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateCategoryNameById_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateCategoryNameById_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateCategoryNameById_resultTupleScheme getScheme() {
                return new updateCategoryNameById_resultTupleScheme();
            }
        }

        private static class updateCategoryNameById_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateCategoryNameById_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateCategoryNameById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateCategoryNameById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.aries.hermes.idl.dto.ThriftResponse();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
