/**
 * Autogenerated by Thrift Compiler (0.12.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.aries.hermes.idl.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-05-28")
public class ReplyServer {

    public interface Iface {

        public java.lang.String ping() throws org.apache.thrift.TException;

        public com.aries.hermes.idl.dto.ThriftResponse addReply(com.aries.hermes.idl.dto.CompanyDTO companyDTO, com.aries.hermes.idl.dto.ReplyDTO replyDTO) throws org.apache.thrift.TException;

        public com.aries.hermes.idl.dto.ReplyDTO queryFirst(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId) throws org.apache.thrift.TException;

        public com.aries.hermes.idl.dto.ReplyDTO queryById(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long replyId) throws org.apache.thrift.TException;

        public com.aries.hermes.idl.dto.ReplyDTO queryNext(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId, long lastReplyId) throws org.apache.thrift.TException;

        public java.util.List<com.aries.hermes.idl.dto.ReplyDTO> queryAllByTopicId(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId) throws org.apache.thrift.TException;

        public java.util.List<com.aries.hermes.idl.dto.ReplyDTO> batchQueryByTopicId(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId, int page, int pageSize) throws org.apache.thrift.TException;

        public com.aries.hermes.idl.dto.ThriftResponse updateContent(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long replyId, java.lang.String content) throws org.apache.thrift.TException;

        public com.aries.hermes.idl.dto.ThriftResponse deleteByReplyId(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long replyId) throws org.apache.thrift.TException;

        public com.aries.hermes.idl.dto.ThriftResponse batchDeleteByTopicId(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId) throws org.apache.thrift.TException;

        public long getReplyCount(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void ping(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

        public void addReply(com.aries.hermes.idl.dto.CompanyDTO companyDTO, com.aries.hermes.idl.dto.ReplyDTO replyDTO, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler) throws org.apache.thrift.TException;

        public void queryFirst(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ReplyDTO> resultHandler) throws org.apache.thrift.TException;

        public void queryById(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long replyId, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ReplyDTO> resultHandler) throws org.apache.thrift.TException;

        public void queryNext(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId, long lastReplyId, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ReplyDTO> resultHandler) throws org.apache.thrift.TException;

        public void queryAllByTopicId(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.hermes.idl.dto.ReplyDTO>> resultHandler) throws org.apache.thrift.TException;

        public void batchQueryByTopicId(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.hermes.idl.dto.ReplyDTO>> resultHandler) throws org.apache.thrift.TException;

        public void updateContent(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long replyId, java.lang.String content, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler) throws org.apache.thrift.TException;

        public void deleteByReplyId(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long replyId, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler) throws org.apache.thrift.TException;

        public void batchDeleteByTopicId(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler) throws org.apache.thrift.TException;

        public void getReplyCount(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public java.lang.String ping() throws org.apache.thrift.TException {
            send_ping();
            return recv_ping();
        }

        public void send_ping() throws org.apache.thrift.TException {
            ping_args args = new ping_args();
            sendBase("ping", args);
        }

        public java.lang.String recv_ping() throws org.apache.thrift.TException {
            ping_result result = new ping_result();
            receiveBase(result, "ping");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
        }

        public com.aries.hermes.idl.dto.ThriftResponse addReply(com.aries.hermes.idl.dto.CompanyDTO companyDTO, com.aries.hermes.idl.dto.ReplyDTO replyDTO) throws org.apache.thrift.TException {
            send_addReply(companyDTO, replyDTO);
            return recv_addReply();
        }

        public void send_addReply(com.aries.hermes.idl.dto.CompanyDTO companyDTO, com.aries.hermes.idl.dto.ReplyDTO replyDTO) throws org.apache.thrift.TException {
            addReply_args args = new addReply_args();
            args.setCompanyDTO(companyDTO);
            args.setReplyDTO(replyDTO);
            sendBase("addReply", args);
        }

        public com.aries.hermes.idl.dto.ThriftResponse recv_addReply() throws org.apache.thrift.TException {
            addReply_result result = new addReply_result();
            receiveBase(result, "addReply");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addReply failed: unknown result");
        }

        public com.aries.hermes.idl.dto.ReplyDTO queryFirst(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId) throws org.apache.thrift.TException {
            send_queryFirst(companyDTO, topicId);
            return recv_queryFirst();
        }

        public void send_queryFirst(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId) throws org.apache.thrift.TException {
            queryFirst_args args = new queryFirst_args();
            args.setCompanyDTO(companyDTO);
            args.setTopicId(topicId);
            sendBase("queryFirst", args);
        }

        public com.aries.hermes.idl.dto.ReplyDTO recv_queryFirst() throws org.apache.thrift.TException {
            queryFirst_result result = new queryFirst_result();
            receiveBase(result, "queryFirst");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryFirst failed: unknown result");
        }

        public com.aries.hermes.idl.dto.ReplyDTO queryById(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long replyId) throws org.apache.thrift.TException {
            send_queryById(companyDTO, replyId);
            return recv_queryById();
        }

        public void send_queryById(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long replyId) throws org.apache.thrift.TException {
            queryById_args args = new queryById_args();
            args.setCompanyDTO(companyDTO);
            args.setReplyId(replyId);
            sendBase("queryById", args);
        }

        public com.aries.hermes.idl.dto.ReplyDTO recv_queryById() throws org.apache.thrift.TException {
            queryById_result result = new queryById_result();
            receiveBase(result, "queryById");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryById failed: unknown result");
        }

        public com.aries.hermes.idl.dto.ReplyDTO queryNext(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId, long lastReplyId) throws org.apache.thrift.TException {
            send_queryNext(companyDTO, topicId, lastReplyId);
            return recv_queryNext();
        }

        public void send_queryNext(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId, long lastReplyId) throws org.apache.thrift.TException {
            queryNext_args args = new queryNext_args();
            args.setCompanyDTO(companyDTO);
            args.setTopicId(topicId);
            args.setLastReplyId(lastReplyId);
            sendBase("queryNext", args);
        }

        public com.aries.hermes.idl.dto.ReplyDTO recv_queryNext() throws org.apache.thrift.TException {
            queryNext_result result = new queryNext_result();
            receiveBase(result, "queryNext");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryNext failed: unknown result");
        }

        public java.util.List<com.aries.hermes.idl.dto.ReplyDTO> queryAllByTopicId(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId) throws org.apache.thrift.TException {
            send_queryAllByTopicId(companyDTO, topicId);
            return recv_queryAllByTopicId();
        }

        public void send_queryAllByTopicId(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId) throws org.apache.thrift.TException {
            queryAllByTopicId_args args = new queryAllByTopicId_args();
            args.setCompanyDTO(companyDTO);
            args.setTopicId(topicId);
            sendBase("queryAllByTopicId", args);
        }

        public java.util.List<com.aries.hermes.idl.dto.ReplyDTO> recv_queryAllByTopicId() throws org.apache.thrift.TException {
            queryAllByTopicId_result result = new queryAllByTopicId_result();
            receiveBase(result, "queryAllByTopicId");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryAllByTopicId failed: unknown result");
        }

        public java.util.List<com.aries.hermes.idl.dto.ReplyDTO> batchQueryByTopicId(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId, int page, int pageSize) throws org.apache.thrift.TException {
            send_batchQueryByTopicId(companyDTO, topicId, page, pageSize);
            return recv_batchQueryByTopicId();
        }

        public void send_batchQueryByTopicId(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId, int page, int pageSize) throws org.apache.thrift.TException {
            batchQueryByTopicId_args args = new batchQueryByTopicId_args();
            args.setCompanyDTO(companyDTO);
            args.setTopicId(topicId);
            args.setPage(page);
            args.setPageSize(pageSize);
            sendBase("batchQueryByTopicId", args);
        }

        public java.util.List<com.aries.hermes.idl.dto.ReplyDTO> recv_batchQueryByTopicId() throws org.apache.thrift.TException {
            batchQueryByTopicId_result result = new batchQueryByTopicId_result();
            receiveBase(result, "batchQueryByTopicId");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchQueryByTopicId failed: unknown result");
        }

        public com.aries.hermes.idl.dto.ThriftResponse updateContent(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long replyId, java.lang.String content) throws org.apache.thrift.TException {
            send_updateContent(companyDTO, replyId, content);
            return recv_updateContent();
        }

        public void send_updateContent(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long replyId, java.lang.String content) throws org.apache.thrift.TException {
            updateContent_args args = new updateContent_args();
            args.setCompanyDTO(companyDTO);
            args.setReplyId(replyId);
            args.setContent(content);
            sendBase("updateContent", args);
        }

        public com.aries.hermes.idl.dto.ThriftResponse recv_updateContent() throws org.apache.thrift.TException {
            updateContent_result result = new updateContent_result();
            receiveBase(result, "updateContent");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateContent failed: unknown result");
        }

        public com.aries.hermes.idl.dto.ThriftResponse deleteByReplyId(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long replyId) throws org.apache.thrift.TException {
            send_deleteByReplyId(companyDTO, replyId);
            return recv_deleteByReplyId();
        }

        public void send_deleteByReplyId(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long replyId) throws org.apache.thrift.TException {
            deleteByReplyId_args args = new deleteByReplyId_args();
            args.setCompanyDTO(companyDTO);
            args.setReplyId(replyId);
            sendBase("deleteByReplyId", args);
        }

        public com.aries.hermes.idl.dto.ThriftResponse recv_deleteByReplyId() throws org.apache.thrift.TException {
            deleteByReplyId_result result = new deleteByReplyId_result();
            receiveBase(result, "deleteByReplyId");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteByReplyId failed: unknown result");
        }

        public com.aries.hermes.idl.dto.ThriftResponse batchDeleteByTopicId(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId) throws org.apache.thrift.TException {
            send_batchDeleteByTopicId(companyDTO, topicId);
            return recv_batchDeleteByTopicId();
        }

        public void send_batchDeleteByTopicId(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId) throws org.apache.thrift.TException {
            batchDeleteByTopicId_args args = new batchDeleteByTopicId_args();
            args.setCompanyDTO(companyDTO);
            args.setTopicId(topicId);
            sendBase("batchDeleteByTopicId", args);
        }

        public com.aries.hermes.idl.dto.ThriftResponse recv_batchDeleteByTopicId() throws org.apache.thrift.TException {
            batchDeleteByTopicId_result result = new batchDeleteByTopicId_result();
            receiveBase(result, "batchDeleteByTopicId");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchDeleteByTopicId failed: unknown result");
        }

        public long getReplyCount(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId) throws org.apache.thrift.TException {
            send_getReplyCount(companyDTO, topicId);
            return recv_getReplyCount();
        }

        public void send_getReplyCount(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId) throws org.apache.thrift.TException {
            getReplyCount_args args = new getReplyCount_args();
            args.setCompanyDTO(companyDTO);
            args.setTopicId(topicId);
            sendBase("getReplyCount", args);
        }

        public long recv_getReplyCount() throws org.apache.thrift.TException {
            getReplyCount_result result = new getReplyCount_result();
            receiveBase(result, "getReplyCount");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getReplyCount failed: unknown result");
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void ping(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
            public ping_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
                ping_args args = new ping_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_ping();
            }
        }

        public void addReply(com.aries.hermes.idl.dto.CompanyDTO companyDTO, com.aries.hermes.idl.dto.ReplyDTO replyDTO, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            addReply_call method_call = new addReply_call(companyDTO, replyDTO, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class addReply_call extends org.apache.thrift.async.TAsyncMethodCall<com.aries.hermes.idl.dto.ThriftResponse> {
            private com.aries.hermes.idl.dto.CompanyDTO companyDTO;
            private com.aries.hermes.idl.dto.ReplyDTO replyDTO;

            public addReply_call(com.aries.hermes.idl.dto.CompanyDTO companyDTO, com.aries.hermes.idl.dto.ReplyDTO replyDTO, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyDTO = companyDTO;
                this.replyDTO = replyDTO;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addReply", org.apache.thrift.protocol.TMessageType.CALL, 0));
                addReply_args args = new addReply_args();
                args.setCompanyDTO(companyDTO);
                args.setReplyDTO(replyDTO);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.aries.hermes.idl.dto.ThriftResponse getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_addReply();
            }
        }

        public void queryFirst(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ReplyDTO> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            queryFirst_call method_call = new queryFirst_call(companyDTO, topicId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class queryFirst_call extends org.apache.thrift.async.TAsyncMethodCall<com.aries.hermes.idl.dto.ReplyDTO> {
            private com.aries.hermes.idl.dto.CompanyDTO companyDTO;
            private long topicId;

            public queryFirst_call(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ReplyDTO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyDTO = companyDTO;
                this.topicId = topicId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryFirst", org.apache.thrift.protocol.TMessageType.CALL, 0));
                queryFirst_args args = new queryFirst_args();
                args.setCompanyDTO(companyDTO);
                args.setTopicId(topicId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.aries.hermes.idl.dto.ReplyDTO getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_queryFirst();
            }
        }

        public void queryById(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long replyId, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ReplyDTO> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            queryById_call method_call = new queryById_call(companyDTO, replyId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class queryById_call extends org.apache.thrift.async.TAsyncMethodCall<com.aries.hermes.idl.dto.ReplyDTO> {
            private com.aries.hermes.idl.dto.CompanyDTO companyDTO;
            private long replyId;

            public queryById_call(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long replyId, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ReplyDTO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyDTO = companyDTO;
                this.replyId = replyId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryById", org.apache.thrift.protocol.TMessageType.CALL, 0));
                queryById_args args = new queryById_args();
                args.setCompanyDTO(companyDTO);
                args.setReplyId(replyId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.aries.hermes.idl.dto.ReplyDTO getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_queryById();
            }
        }

        public void queryNext(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId, long lastReplyId, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ReplyDTO> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            queryNext_call method_call = new queryNext_call(companyDTO, topicId, lastReplyId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class queryNext_call extends org.apache.thrift.async.TAsyncMethodCall<com.aries.hermes.idl.dto.ReplyDTO> {
            private com.aries.hermes.idl.dto.CompanyDTO companyDTO;
            private long topicId;
            private long lastReplyId;

            public queryNext_call(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId, long lastReplyId, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ReplyDTO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyDTO = companyDTO;
                this.topicId = topicId;
                this.lastReplyId = lastReplyId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryNext", org.apache.thrift.protocol.TMessageType.CALL, 0));
                queryNext_args args = new queryNext_args();
                args.setCompanyDTO(companyDTO);
                args.setTopicId(topicId);
                args.setLastReplyId(lastReplyId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.aries.hermes.idl.dto.ReplyDTO getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_queryNext();
            }
        }

        public void queryAllByTopicId(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.hermes.idl.dto.ReplyDTO>> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            queryAllByTopicId_call method_call = new queryAllByTopicId_call(companyDTO, topicId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class queryAllByTopicId_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.aries.hermes.idl.dto.ReplyDTO>> {
            private com.aries.hermes.idl.dto.CompanyDTO companyDTO;
            private long topicId;

            public queryAllByTopicId_call(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.hermes.idl.dto.ReplyDTO>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyDTO = companyDTO;
                this.topicId = topicId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryAllByTopicId", org.apache.thrift.protocol.TMessageType.CALL, 0));
                queryAllByTopicId_args args = new queryAllByTopicId_args();
                args.setCompanyDTO(companyDTO);
                args.setTopicId(topicId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.List<com.aries.hermes.idl.dto.ReplyDTO> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_queryAllByTopicId();
            }
        }

        public void batchQueryByTopicId(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.hermes.idl.dto.ReplyDTO>> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            batchQueryByTopicId_call method_call = new batchQueryByTopicId_call(companyDTO, topicId, page, pageSize, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class batchQueryByTopicId_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.aries.hermes.idl.dto.ReplyDTO>> {
            private com.aries.hermes.idl.dto.CompanyDTO companyDTO;
            private long topicId;
            private int page;
            private int pageSize;

            public batchQueryByTopicId_call(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.hermes.idl.dto.ReplyDTO>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyDTO = companyDTO;
                this.topicId = topicId;
                this.page = page;
                this.pageSize = pageSize;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchQueryByTopicId", org.apache.thrift.protocol.TMessageType.CALL, 0));
                batchQueryByTopicId_args args = new batchQueryByTopicId_args();
                args.setCompanyDTO(companyDTO);
                args.setTopicId(topicId);
                args.setPage(page);
                args.setPageSize(pageSize);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.List<com.aries.hermes.idl.dto.ReplyDTO> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_batchQueryByTopicId();
            }
        }

        public void updateContent(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long replyId, java.lang.String content, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            updateContent_call method_call = new updateContent_call(companyDTO, replyId, content, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class updateContent_call extends org.apache.thrift.async.TAsyncMethodCall<com.aries.hermes.idl.dto.ThriftResponse> {
            private com.aries.hermes.idl.dto.CompanyDTO companyDTO;
            private long replyId;
            private java.lang.String content;

            public updateContent_call(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long replyId, java.lang.String content, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyDTO = companyDTO;
                this.replyId = replyId;
                this.content = content;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateContent", org.apache.thrift.protocol.TMessageType.CALL, 0));
                updateContent_args args = new updateContent_args();
                args.setCompanyDTO(companyDTO);
                args.setReplyId(replyId);
                args.setContent(content);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.aries.hermes.idl.dto.ThriftResponse getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_updateContent();
            }
        }

        public void deleteByReplyId(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long replyId, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            deleteByReplyId_call method_call = new deleteByReplyId_call(companyDTO, replyId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class deleteByReplyId_call extends org.apache.thrift.async.TAsyncMethodCall<com.aries.hermes.idl.dto.ThriftResponse> {
            private com.aries.hermes.idl.dto.CompanyDTO companyDTO;
            private long replyId;

            public deleteByReplyId_call(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long replyId, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyDTO = companyDTO;
                this.replyId = replyId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteByReplyId", org.apache.thrift.protocol.TMessageType.CALL, 0));
                deleteByReplyId_args args = new deleteByReplyId_args();
                args.setCompanyDTO(companyDTO);
                args.setReplyId(replyId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.aries.hermes.idl.dto.ThriftResponse getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_deleteByReplyId();
            }
        }

        public void batchDeleteByTopicId(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            batchDeleteByTopicId_call method_call = new batchDeleteByTopicId_call(companyDTO, topicId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class batchDeleteByTopicId_call extends org.apache.thrift.async.TAsyncMethodCall<com.aries.hermes.idl.dto.ThriftResponse> {
            private com.aries.hermes.idl.dto.CompanyDTO companyDTO;
            private long topicId;

            public batchDeleteByTopicId_call(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyDTO = companyDTO;
                this.topicId = topicId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchDeleteByTopicId", org.apache.thrift.protocol.TMessageType.CALL, 0));
                batchDeleteByTopicId_args args = new batchDeleteByTopicId_args();
                args.setCompanyDTO(companyDTO);
                args.setTopicId(topicId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.aries.hermes.idl.dto.ThriftResponse getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_batchDeleteByTopicId();
            }
        }

        public void getReplyCount(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getReplyCount_call method_call = new getReplyCount_call(companyDTO, topicId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getReplyCount_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
            private com.aries.hermes.idl.dto.CompanyDTO companyDTO;
            private long topicId;

            public getReplyCount_call(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long topicId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyDTO = companyDTO;
                this.topicId = topicId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getReplyCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getReplyCount_args args = new getReplyCount_args();
                args.setCompanyDTO(companyDTO);
                args.setTopicId(topicId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.Long getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getReplyCount();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("ping", new ping());
            processMap.put("addReply", new addReply());
            processMap.put("queryFirst", new queryFirst());
            processMap.put("queryById", new queryById());
            processMap.put("queryNext", new queryNext());
            processMap.put("queryAllByTopicId", new queryAllByTopicId());
            processMap.put("batchQueryByTopicId", new batchQueryByTopicId());
            processMap.put("updateContent", new updateContent());
            processMap.put("deleteByReplyId", new deleteByReplyId());
            processMap.put("batchDeleteByTopicId", new batchDeleteByTopicId());
            processMap.put("getReplyCount", new getReplyCount());
            return processMap;
        }

        public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
            public ping() {
                super("ping");
            }

            public ping_args getEmptyArgsInstance() {
                return new ping_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
                ping_result result = new ping_result();
                result.success = iface.ping();
                return result;
            }
        }

        public static class addReply<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addReply_args> {
            public addReply() {
                super("addReply");
            }

            public addReply_args getEmptyArgsInstance() {
                return new addReply_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public addReply_result getResult(I iface, addReply_args args) throws org.apache.thrift.TException {
                addReply_result result = new addReply_result();
                result.success = iface.addReply(args.companyDTO, args.replyDTO);
                return result;
            }
        }

        public static class queryFirst<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryFirst_args> {
            public queryFirst() {
                super("queryFirst");
            }

            public queryFirst_args getEmptyArgsInstance() {
                return new queryFirst_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public queryFirst_result getResult(I iface, queryFirst_args args) throws org.apache.thrift.TException {
                queryFirst_result result = new queryFirst_result();
                result.success = iface.queryFirst(args.companyDTO, args.topicId);
                return result;
            }
        }

        public static class queryById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryById_args> {
            public queryById() {
                super("queryById");
            }

            public queryById_args getEmptyArgsInstance() {
                return new queryById_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public queryById_result getResult(I iface, queryById_args args) throws org.apache.thrift.TException {
                queryById_result result = new queryById_result();
                result.success = iface.queryById(args.companyDTO, args.replyId);
                return result;
            }
        }

        public static class queryNext<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryNext_args> {
            public queryNext() {
                super("queryNext");
            }

            public queryNext_args getEmptyArgsInstance() {
                return new queryNext_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public queryNext_result getResult(I iface, queryNext_args args) throws org.apache.thrift.TException {
                queryNext_result result = new queryNext_result();
                result.success = iface.queryNext(args.companyDTO, args.topicId, args.lastReplyId);
                return result;
            }
        }

        public static class queryAllByTopicId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryAllByTopicId_args> {
            public queryAllByTopicId() {
                super("queryAllByTopicId");
            }

            public queryAllByTopicId_args getEmptyArgsInstance() {
                return new queryAllByTopicId_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public queryAllByTopicId_result getResult(I iface, queryAllByTopicId_args args) throws org.apache.thrift.TException {
                queryAllByTopicId_result result = new queryAllByTopicId_result();
                result.success = iface.queryAllByTopicId(args.companyDTO, args.topicId);
                return result;
            }
        }

        public static class batchQueryByTopicId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchQueryByTopicId_args> {
            public batchQueryByTopicId() {
                super("batchQueryByTopicId");
            }

            public batchQueryByTopicId_args getEmptyArgsInstance() {
                return new batchQueryByTopicId_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public batchQueryByTopicId_result getResult(I iface, batchQueryByTopicId_args args) throws org.apache.thrift.TException {
                batchQueryByTopicId_result result = new batchQueryByTopicId_result();
                result.success = iface.batchQueryByTopicId(args.companyDTO, args.topicId, args.page, args.pageSize);
                return result;
            }
        }

        public static class updateContent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateContent_args> {
            public updateContent() {
                super("updateContent");
            }

            public updateContent_args getEmptyArgsInstance() {
                return new updateContent_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public updateContent_result getResult(I iface, updateContent_args args) throws org.apache.thrift.TException {
                updateContent_result result = new updateContent_result();
                result.success = iface.updateContent(args.companyDTO, args.replyId, args.content);
                return result;
            }
        }

        public static class deleteByReplyId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteByReplyId_args> {
            public deleteByReplyId() {
                super("deleteByReplyId");
            }

            public deleteByReplyId_args getEmptyArgsInstance() {
                return new deleteByReplyId_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public deleteByReplyId_result getResult(I iface, deleteByReplyId_args args) throws org.apache.thrift.TException {
                deleteByReplyId_result result = new deleteByReplyId_result();
                result.success = iface.deleteByReplyId(args.companyDTO, args.replyId);
                return result;
            }
        }

        public static class batchDeleteByTopicId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchDeleteByTopicId_args> {
            public batchDeleteByTopicId() {
                super("batchDeleteByTopicId");
            }

            public batchDeleteByTopicId_args getEmptyArgsInstance() {
                return new batchDeleteByTopicId_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public batchDeleteByTopicId_result getResult(I iface, batchDeleteByTopicId_args args) throws org.apache.thrift.TException {
                batchDeleteByTopicId_result result = new batchDeleteByTopicId_result();
                result.success = iface.batchDeleteByTopicId(args.companyDTO, args.topicId);
                return result;
            }
        }

        public static class getReplyCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getReplyCount_args> {
            public getReplyCount() {
                super("getReplyCount");
            }

            public getReplyCount_args getEmptyArgsInstance() {
                return new getReplyCount_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public getReplyCount_result getResult(I iface, getReplyCount_args args) throws org.apache.thrift.TException {
                getReplyCount_result result = new getReplyCount_result();
                result.success = iface.getReplyCount(args.companyDTO, args.topicId);
                result.setSuccessIsSet(true);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("ping", new ping());
            processMap.put("addReply", new addReply());
            processMap.put("queryFirst", new queryFirst());
            processMap.put("queryById", new queryById());
            processMap.put("queryNext", new queryNext());
            processMap.put("queryAllByTopicId", new queryAllByTopicId());
            processMap.put("batchQueryByTopicId", new batchQueryByTopicId());
            processMap.put("updateContent", new updateContent());
            processMap.put("deleteByReplyId", new deleteByReplyId());
            processMap.put("batchDeleteByTopicId", new batchDeleteByTopicId());
            processMap.put("getReplyCount", new getReplyCount());
            return processMap;
        }

        public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, java.lang.String> {
            public ping() {
                super("ping");
            }

            public ping_args getEmptyArgsInstance() {
                return new ping_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
                    public void onComplete(java.lang.String o) {
                        ping_result result = new ping_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        ping_result result = new ping_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
                iface.ping(resultHandler);
            }
        }

        public static class addReply<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addReply_args, com.aries.hermes.idl.dto.ThriftResponse> {
            public addReply() {
                super("addReply");
            }

            public addReply_args getEmptyArgsInstance() {
                return new addReply_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse>() {
                    public void onComplete(com.aries.hermes.idl.dto.ThriftResponse o) {
                        addReply_result result = new addReply_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        addReply_result result = new addReply_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, addReply_args args, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler) throws org.apache.thrift.TException {
                iface.addReply(args.companyDTO, args.replyDTO, resultHandler);
            }
        }

        public static class queryFirst<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryFirst_args, com.aries.hermes.idl.dto.ReplyDTO> {
            public queryFirst() {
                super("queryFirst");
            }

            public queryFirst_args getEmptyArgsInstance() {
                return new queryFirst_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ReplyDTO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ReplyDTO>() {
                    public void onComplete(com.aries.hermes.idl.dto.ReplyDTO o) {
                        queryFirst_result result = new queryFirst_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        queryFirst_result result = new queryFirst_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, queryFirst_args args, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ReplyDTO> resultHandler) throws org.apache.thrift.TException {
                iface.queryFirst(args.companyDTO, args.topicId, resultHandler);
            }
        }

        public static class queryById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryById_args, com.aries.hermes.idl.dto.ReplyDTO> {
            public queryById() {
                super("queryById");
            }

            public queryById_args getEmptyArgsInstance() {
                return new queryById_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ReplyDTO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ReplyDTO>() {
                    public void onComplete(com.aries.hermes.idl.dto.ReplyDTO o) {
                        queryById_result result = new queryById_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        queryById_result result = new queryById_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, queryById_args args, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ReplyDTO> resultHandler) throws org.apache.thrift.TException {
                iface.queryById(args.companyDTO, args.replyId, resultHandler);
            }
        }

        public static class queryNext<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryNext_args, com.aries.hermes.idl.dto.ReplyDTO> {
            public queryNext() {
                super("queryNext");
            }

            public queryNext_args getEmptyArgsInstance() {
                return new queryNext_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ReplyDTO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ReplyDTO>() {
                    public void onComplete(com.aries.hermes.idl.dto.ReplyDTO o) {
                        queryNext_result result = new queryNext_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        queryNext_result result = new queryNext_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, queryNext_args args, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ReplyDTO> resultHandler) throws org.apache.thrift.TException {
                iface.queryNext(args.companyDTO, args.topicId, args.lastReplyId, resultHandler);
            }
        }

        public static class queryAllByTopicId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryAllByTopicId_args, java.util.List<com.aries.hermes.idl.dto.ReplyDTO>> {
            public queryAllByTopicId() {
                super("queryAllByTopicId");
            }

            public queryAllByTopicId_args getEmptyArgsInstance() {
                return new queryAllByTopicId_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.hermes.idl.dto.ReplyDTO>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.hermes.idl.dto.ReplyDTO>>() {
                    public void onComplete(java.util.List<com.aries.hermes.idl.dto.ReplyDTO> o) {
                        queryAllByTopicId_result result = new queryAllByTopicId_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        queryAllByTopicId_result result = new queryAllByTopicId_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, queryAllByTopicId_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.hermes.idl.dto.ReplyDTO>> resultHandler) throws org.apache.thrift.TException {
                iface.queryAllByTopicId(args.companyDTO, args.topicId, resultHandler);
            }
        }

        public static class batchQueryByTopicId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchQueryByTopicId_args, java.util.List<com.aries.hermes.idl.dto.ReplyDTO>> {
            public batchQueryByTopicId() {
                super("batchQueryByTopicId");
            }

            public batchQueryByTopicId_args getEmptyArgsInstance() {
                return new batchQueryByTopicId_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.hermes.idl.dto.ReplyDTO>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.hermes.idl.dto.ReplyDTO>>() {
                    public void onComplete(java.util.List<com.aries.hermes.idl.dto.ReplyDTO> o) {
                        batchQueryByTopicId_result result = new batchQueryByTopicId_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        batchQueryByTopicId_result result = new batchQueryByTopicId_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, batchQueryByTopicId_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.aries.hermes.idl.dto.ReplyDTO>> resultHandler) throws org.apache.thrift.TException {
                iface.batchQueryByTopicId(args.companyDTO, args.topicId, args.page, args.pageSize, resultHandler);
            }
        }

        public static class updateContent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateContent_args, com.aries.hermes.idl.dto.ThriftResponse> {
            public updateContent() {
                super("updateContent");
            }

            public updateContent_args getEmptyArgsInstance() {
                return new updateContent_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse>() {
                    public void onComplete(com.aries.hermes.idl.dto.ThriftResponse o) {
                        updateContent_result result = new updateContent_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        updateContent_result result = new updateContent_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, updateContent_args args, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler) throws org.apache.thrift.TException {
                iface.updateContent(args.companyDTO, args.replyId, args.content, resultHandler);
            }
        }

        public static class deleteByReplyId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteByReplyId_args, com.aries.hermes.idl.dto.ThriftResponse> {
            public deleteByReplyId() {
                super("deleteByReplyId");
            }

            public deleteByReplyId_args getEmptyArgsInstance() {
                return new deleteByReplyId_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse>() {
                    public void onComplete(com.aries.hermes.idl.dto.ThriftResponse o) {
                        deleteByReplyId_result result = new deleteByReplyId_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        deleteByReplyId_result result = new deleteByReplyId_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, deleteByReplyId_args args, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler) throws org.apache.thrift.TException {
                iface.deleteByReplyId(args.companyDTO, args.replyId, resultHandler);
            }
        }

        public static class batchDeleteByTopicId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchDeleteByTopicId_args, com.aries.hermes.idl.dto.ThriftResponse> {
            public batchDeleteByTopicId() {
                super("batchDeleteByTopicId");
            }

            public batchDeleteByTopicId_args getEmptyArgsInstance() {
                return new batchDeleteByTopicId_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse>() {
                    public void onComplete(com.aries.hermes.idl.dto.ThriftResponse o) {
                        batchDeleteByTopicId_result result = new batchDeleteByTopicId_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        batchDeleteByTopicId_result result = new batchDeleteByTopicId_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, batchDeleteByTopicId_args args, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler) throws org.apache.thrift.TException {
                iface.batchDeleteByTopicId(args.companyDTO, args.topicId, resultHandler);
            }
        }

        public static class getReplyCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getReplyCount_args, java.lang.Long> {
            public getReplyCount() {
                super("getReplyCount");
            }

            public getReplyCount_args getEmptyArgsInstance() {
                return new getReplyCount_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() {
                    public void onComplete(java.lang.Long o) {
                        getReplyCount_result result = new getReplyCount_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getReplyCount_result result = new getReplyCount_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getReplyCount_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
                iface.getReplyCount(args.companyDTO, args.topicId, resultHandler);
            }
        }

    }

    public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_argsTupleSchemeFactory();


        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
        }

        public ping_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ping_args(ping_args other) {
        }

        public ping_args deepCopy() {
            return new ping_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof ping_args)
                return this.equals((ping_args) that);
            return false;
        }

        public boolean equals(ping_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(ping_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class ping_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ping_argsStandardScheme getScheme() {
                return new ping_argsStandardScheme();
            }
        }

        private static class ping_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ping_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ping_argsTupleScheme getScheme() {
                return new ping_argsTupleScheme();
            }
        }

        private static class ping_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        java.lang.String success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
        }

        public ping_result() {
        }

        public ping_result(
                java.lang.String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ping_result(ping_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public ping_result deepCopy() {
            return new ping_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getSuccess() {
            return this.success;
        }

        public ping_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.String) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof ping_result)
                return this.equals((ping_result) that);
            return false;
        }

        public boolean equals(ping_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(ping_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class ping_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ping_resultStandardScheme getScheme() {
                return new ping_resultStandardScheme();
            }
        }

        private static class ping_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ping_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ping_resultTupleScheme getScheme() {
                return new ping_resultTupleScheme();
            }
        }

        private static class ping_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addReply_args implements org.apache.thrift.TBase<addReply_args, addReply_args._Fields>, java.io.Serializable, Cloneable, Comparable<addReply_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addReply_args");

        private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField REPLY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("replyDTO", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addReply_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addReply_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.CompanyDTO companyDTO; // required
        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.ReplyDTO replyDTO; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_DTO((short) 1, "companyDTO"),
            REPLY_DTO((short) 2, "replyDTO");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // COMPANY_DTO
                        return COMPANY_DTO;
                    case 2: // REPLY_DTO
                        return REPLY_DTO;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.CompanyDTO.class)));
            tmpMap.put(_Fields.REPLY_DTO, new org.apache.thrift.meta_data.FieldMetaData("replyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.ReplyDTO.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addReply_args.class, metaDataMap);
        }

        public addReply_args() {
        }

        public addReply_args(
                com.aries.hermes.idl.dto.CompanyDTO companyDTO,
                com.aries.hermes.idl.dto.ReplyDTO replyDTO) {
            this();
            this.companyDTO = companyDTO;
            this.replyDTO = replyDTO;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addReply_args(addReply_args other) {
            if (other.isSetCompanyDTO()) {
                this.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO(other.companyDTO);
            }
            if (other.isSetReplyDTO()) {
                this.replyDTO = new com.aries.hermes.idl.dto.ReplyDTO(other.replyDTO);
            }
        }

        public addReply_args deepCopy() {
            return new addReply_args(this);
        }

        @Override
        public void clear() {
            this.companyDTO = null;
            this.replyDTO = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.CompanyDTO getCompanyDTO() {
            return this.companyDTO;
        }

        public addReply_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CompanyDTO companyDTO) {
            this.companyDTO = companyDTO;
            return this;
        }

        public void unsetCompanyDTO() {
            this.companyDTO = null;
        }

        /**
         * Returns true if field companyDTO is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCompanyDTO() {
            return this.companyDTO != null;
        }

        public void setCompanyDTOIsSet(boolean value) {
            if (!value) {
                this.companyDTO = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.ReplyDTO getReplyDTO() {
            return this.replyDTO;
        }

        public addReply_args setReplyDTO(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.ReplyDTO replyDTO) {
            this.replyDTO = replyDTO;
            return this;
        }

        public void unsetReplyDTO() {
            this.replyDTO = null;
        }

        /**
         * Returns true if field replyDTO is set (has been assigned a value) and false otherwise
         */
        public boolean isSetReplyDTO() {
            return this.replyDTO != null;
        }

        public void setReplyDTOIsSet(boolean value) {
            if (!value) {
                this.replyDTO = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case COMPANY_DTO:
                    if (value == null) {
                        unsetCompanyDTO();
                    } else {
                        setCompanyDTO((com.aries.hermes.idl.dto.CompanyDTO) value);
                    }
                    break;

                case REPLY_DTO:
                    if (value == null) {
                        unsetReplyDTO();
                    } else {
                        setReplyDTO((com.aries.hermes.idl.dto.ReplyDTO) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_DTO:
                    return getCompanyDTO();

                case REPLY_DTO:
                    return getReplyDTO();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_DTO:
                    return isSetCompanyDTO();
                case REPLY_DTO:
                    return isSetReplyDTO();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addReply_args)
                return this.equals((addReply_args) that);
            return false;
        }

        public boolean equals(addReply_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyDTO = true && this.isSetCompanyDTO();
            boolean that_present_companyDTO = true && that.isSetCompanyDTO();
            if (this_present_companyDTO || that_present_companyDTO) {
                if (!(this_present_companyDTO && that_present_companyDTO))
                    return false;
                if (!this.companyDTO.equals(that.companyDTO))
                    return false;
            }

            boolean this_present_replyDTO = true && this.isSetReplyDTO();
            boolean that_present_replyDTO = true && that.isSetReplyDTO();
            if (this_present_replyDTO || that_present_replyDTO) {
                if (!(this_present_replyDTO && that_present_replyDTO))
                    return false;
                if (!this.replyDTO.equals(that.replyDTO))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
            if (isSetCompanyDTO())
                hashCode = hashCode * 8191 + companyDTO.hashCode();

            hashCode = hashCode * 8191 + ((isSetReplyDTO()) ? 131071 : 524287);
            if (isSetReplyDTO())
                hashCode = hashCode * 8191 + replyDTO.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addReply_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyDTO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetReplyDTO()).compareTo(other.isSetReplyDTO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetReplyDTO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replyDTO, other.replyDTO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addReply_args(");
            boolean first = true;

            sb.append("companyDTO:");
            if (this.companyDTO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyDTO);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("replyDTO:");
            if (this.replyDTO == null) {
                sb.append("null");
            } else {
                sb.append(this.replyDTO);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyDTO != null) {
                companyDTO.validate();
            }
            if (replyDTO != null) {
                replyDTO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addReply_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addReply_argsStandardScheme getScheme() {
                return new addReply_argsStandardScheme();
            }
        }

        private static class addReply_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addReply_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addReply_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                                struct.companyDTO.read(iprot);
                                struct.setCompanyDTOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // REPLY_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.replyDTO = new com.aries.hermes.idl.dto.ReplyDTO();
                                struct.replyDTO.read(iprot);
                                struct.setReplyDTOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addReply_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyDTO != null) {
                    oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
                    struct.companyDTO.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.replyDTO != null) {
                    oprot.writeFieldBegin(REPLY_DTO_FIELD_DESC);
                    struct.replyDTO.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addReply_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addReply_argsTupleScheme getScheme() {
                return new addReply_argsTupleScheme();
            }
        }

        private static class addReply_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addReply_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addReply_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyDTO()) {
                    optionals.set(0);
                }
                if (struct.isSetReplyDTO()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCompanyDTO()) {
                    struct.companyDTO.write(oprot);
                }
                if (struct.isSetReplyDTO()) {
                    struct.replyDTO.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addReply_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                    struct.companyDTO.read(iprot);
                    struct.setCompanyDTOIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.replyDTO = new com.aries.hermes.idl.dto.ReplyDTO();
                    struct.replyDTO.read(iprot);
                    struct.setReplyDTOIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addReply_result implements org.apache.thrift.TBase<addReply_result, addReply_result._Fields>, java.io.Serializable, Cloneable, Comparable<addReply_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addReply_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addReply_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addReply_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.ThriftResponse success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.ThriftResponse.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addReply_result.class, metaDataMap);
        }

        public addReply_result() {
        }

        public addReply_result(
                com.aries.hermes.idl.dto.ThriftResponse success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addReply_result(addReply_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.aries.hermes.idl.dto.ThriftResponse(other.success);
            }
        }

        public addReply_result deepCopy() {
            return new addReply_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.ThriftResponse getSuccess() {
            return this.success;
        }

        public addReply_result setSuccess(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.ThriftResponse success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.aries.hermes.idl.dto.ThriftResponse) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addReply_result)
                return this.equals((addReply_result) that);
            return false;
        }

        public boolean equals(addReply_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addReply_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addReply_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addReply_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addReply_resultStandardScheme getScheme() {
                return new addReply_resultStandardScheme();
            }
        }

        private static class addReply_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addReply_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addReply_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.aries.hermes.idl.dto.ThriftResponse();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addReply_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addReply_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addReply_resultTupleScheme getScheme() {
                return new addReply_resultTupleScheme();
            }
        }

        private static class addReply_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addReply_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addReply_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addReply_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.aries.hermes.idl.dto.ThriftResponse();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryFirst_args implements org.apache.thrift.TBase<queryFirst_args, queryFirst_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryFirst_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryFirst_args");

        private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.I64, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryFirst_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryFirst_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.CompanyDTO companyDTO; // required
        public long topicId; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_DTO((short) 1, "companyDTO"),
            TOPIC_ID((short) 2, "topicId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // COMPANY_DTO
                        return COMPANY_DTO;
                    case 2: // TOPIC_ID
                        return TOPIC_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __TOPICID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.CompanyDTO.class)));
            tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryFirst_args.class, metaDataMap);
        }

        public queryFirst_args() {
        }

        public queryFirst_args(
                com.aries.hermes.idl.dto.CompanyDTO companyDTO,
                long topicId) {
            this();
            this.companyDTO = companyDTO;
            this.topicId = topicId;
            setTopicIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryFirst_args(queryFirst_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetCompanyDTO()) {
                this.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO(other.companyDTO);
            }
            this.topicId = other.topicId;
        }

        public queryFirst_args deepCopy() {
            return new queryFirst_args(this);
        }

        @Override
        public void clear() {
            this.companyDTO = null;
            setTopicIdIsSet(false);
            this.topicId = 0;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.CompanyDTO getCompanyDTO() {
            return this.companyDTO;
        }

        public queryFirst_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CompanyDTO companyDTO) {
            this.companyDTO = companyDTO;
            return this;
        }

        public void unsetCompanyDTO() {
            this.companyDTO = null;
        }

        /**
         * Returns true if field companyDTO is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCompanyDTO() {
            return this.companyDTO != null;
        }

        public void setCompanyDTOIsSet(boolean value) {
            if (!value) {
                this.companyDTO = null;
            }
        }

        public long getTopicId() {
            return this.topicId;
        }

        public queryFirst_args setTopicId(long topicId) {
            this.topicId = topicId;
            setTopicIdIsSet(true);
            return this;
        }

        public void unsetTopicId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPICID_ISSET_ID);
        }

        /**
         * Returns true if field topicId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetTopicId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPICID_ISSET_ID);
        }

        public void setTopicIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPICID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case COMPANY_DTO:
                    if (value == null) {
                        unsetCompanyDTO();
                    } else {
                        setCompanyDTO((com.aries.hermes.idl.dto.CompanyDTO) value);
                    }
                    break;

                case TOPIC_ID:
                    if (value == null) {
                        unsetTopicId();
                    } else {
                        setTopicId((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_DTO:
                    return getCompanyDTO();

                case TOPIC_ID:
                    return getTopicId();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_DTO:
                    return isSetCompanyDTO();
                case TOPIC_ID:
                    return isSetTopicId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof queryFirst_args)
                return this.equals((queryFirst_args) that);
            return false;
        }

        public boolean equals(queryFirst_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyDTO = true && this.isSetCompanyDTO();
            boolean that_present_companyDTO = true && that.isSetCompanyDTO();
            if (this_present_companyDTO || that_present_companyDTO) {
                if (!(this_present_companyDTO && that_present_companyDTO))
                    return false;
                if (!this.companyDTO.equals(that.companyDTO))
                    return false;
            }

            boolean this_present_topicId = true;
            boolean that_present_topicId = true;
            if (this_present_topicId || that_present_topicId) {
                if (!(this_present_topicId && that_present_topicId))
                    return false;
                if (this.topicId != that.topicId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
            if (isSetCompanyDTO())
                hashCode = hashCode * 8191 + companyDTO.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(topicId);

            return hashCode;
        }

        @Override
        public int compareTo(queryFirst_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyDTO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTopicId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryFirst_args(");
            boolean first = true;

            sb.append("companyDTO:");
            if (this.companyDTO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyDTO);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("topicId:");
            sb.append(this.topicId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyDTO != null) {
                companyDTO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryFirst_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryFirst_argsStandardScheme getScheme() {
                return new queryFirst_argsStandardScheme();
            }
        }

        private static class queryFirst_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryFirst_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryFirst_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                                struct.companyDTO.read(iprot);
                                struct.setCompanyDTOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // TOPIC_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.topicId = iprot.readI64();
                                struct.setTopicIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryFirst_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyDTO != null) {
                    oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
                    struct.companyDTO.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
                oprot.writeI64(struct.topicId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryFirst_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryFirst_argsTupleScheme getScheme() {
                return new queryFirst_argsTupleScheme();
            }
        }

        private static class queryFirst_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryFirst_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryFirst_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyDTO()) {
                    optionals.set(0);
                }
                if (struct.isSetTopicId()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCompanyDTO()) {
                    struct.companyDTO.write(oprot);
                }
                if (struct.isSetTopicId()) {
                    oprot.writeI64(struct.topicId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryFirst_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                    struct.companyDTO.read(iprot);
                    struct.setCompanyDTOIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.topicId = iprot.readI64();
                    struct.setTopicIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryFirst_result implements org.apache.thrift.TBase<queryFirst_result, queryFirst_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryFirst_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryFirst_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryFirst_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryFirst_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.ReplyDTO success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.ReplyDTO.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryFirst_result.class, metaDataMap);
        }

        public queryFirst_result() {
        }

        public queryFirst_result(
                com.aries.hermes.idl.dto.ReplyDTO success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryFirst_result(queryFirst_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.aries.hermes.idl.dto.ReplyDTO(other.success);
            }
        }

        public queryFirst_result deepCopy() {
            return new queryFirst_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.ReplyDTO getSuccess() {
            return this.success;
        }

        public queryFirst_result setSuccess(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.ReplyDTO success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.aries.hermes.idl.dto.ReplyDTO) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof queryFirst_result)
                return this.equals((queryFirst_result) that);
            return false;
        }

        public boolean equals(queryFirst_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryFirst_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryFirst_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryFirst_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryFirst_resultStandardScheme getScheme() {
                return new queryFirst_resultStandardScheme();
            }
        }

        private static class queryFirst_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryFirst_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryFirst_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.aries.hermes.idl.dto.ReplyDTO();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryFirst_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryFirst_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryFirst_resultTupleScheme getScheme() {
                return new queryFirst_resultTupleScheme();
            }
        }

        private static class queryFirst_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryFirst_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryFirst_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryFirst_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.aries.hermes.idl.dto.ReplyDTO();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryById_args implements org.apache.thrift.TBase<queryById_args, queryById_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryById_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryById_args");

        private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField REPLY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("replyId", org.apache.thrift.protocol.TType.I64, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryById_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryById_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.CompanyDTO companyDTO; // required
        public long replyId; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_DTO((short) 1, "companyDTO"),
            REPLY_ID((short) 2, "replyId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // COMPANY_DTO
                        return COMPANY_DTO;
                    case 2: // REPLY_ID
                        return REPLY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __REPLYID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.CompanyDTO.class)));
            tmpMap.put(_Fields.REPLY_ID, new org.apache.thrift.meta_data.FieldMetaData("replyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryById_args.class, metaDataMap);
        }

        public queryById_args() {
        }

        public queryById_args(
                com.aries.hermes.idl.dto.CompanyDTO companyDTO,
                long replyId) {
            this();
            this.companyDTO = companyDTO;
            this.replyId = replyId;
            setReplyIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryById_args(queryById_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetCompanyDTO()) {
                this.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO(other.companyDTO);
            }
            this.replyId = other.replyId;
        }

        public queryById_args deepCopy() {
            return new queryById_args(this);
        }

        @Override
        public void clear() {
            this.companyDTO = null;
            setReplyIdIsSet(false);
            this.replyId = 0;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.CompanyDTO getCompanyDTO() {
            return this.companyDTO;
        }

        public queryById_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CompanyDTO companyDTO) {
            this.companyDTO = companyDTO;
            return this;
        }

        public void unsetCompanyDTO() {
            this.companyDTO = null;
        }

        /**
         * Returns true if field companyDTO is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCompanyDTO() {
            return this.companyDTO != null;
        }

        public void setCompanyDTOIsSet(boolean value) {
            if (!value) {
                this.companyDTO = null;
            }
        }

        public long getReplyId() {
            return this.replyId;
        }

        public queryById_args setReplyId(long replyId) {
            this.replyId = replyId;
            setReplyIdIsSet(true);
            return this;
        }

        public void unsetReplyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REPLYID_ISSET_ID);
        }

        /**
         * Returns true if field replyId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetReplyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REPLYID_ISSET_ID);
        }

        public void setReplyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REPLYID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case COMPANY_DTO:
                    if (value == null) {
                        unsetCompanyDTO();
                    } else {
                        setCompanyDTO((com.aries.hermes.idl.dto.CompanyDTO) value);
                    }
                    break;

                case REPLY_ID:
                    if (value == null) {
                        unsetReplyId();
                    } else {
                        setReplyId((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_DTO:
                    return getCompanyDTO();

                case REPLY_ID:
                    return getReplyId();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_DTO:
                    return isSetCompanyDTO();
                case REPLY_ID:
                    return isSetReplyId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof queryById_args)
                return this.equals((queryById_args) that);
            return false;
        }

        public boolean equals(queryById_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyDTO = true && this.isSetCompanyDTO();
            boolean that_present_companyDTO = true && that.isSetCompanyDTO();
            if (this_present_companyDTO || that_present_companyDTO) {
                if (!(this_present_companyDTO && that_present_companyDTO))
                    return false;
                if (!this.companyDTO.equals(that.companyDTO))
                    return false;
            }

            boolean this_present_replyId = true;
            boolean that_present_replyId = true;
            if (this_present_replyId || that_present_replyId) {
                if (!(this_present_replyId && that_present_replyId))
                    return false;
                if (this.replyId != that.replyId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
            if (isSetCompanyDTO())
                hashCode = hashCode * 8191 + companyDTO.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(replyId);

            return hashCode;
        }

        @Override
        public int compareTo(queryById_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyDTO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetReplyId()).compareTo(other.isSetReplyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetReplyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replyId, other.replyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryById_args(");
            boolean first = true;

            sb.append("companyDTO:");
            if (this.companyDTO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyDTO);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("replyId:");
            sb.append(this.replyId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyDTO != null) {
                companyDTO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryById_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryById_argsStandardScheme getScheme() {
                return new queryById_argsStandardScheme();
            }
        }

        private static class queryById_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryById_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                                struct.companyDTO.read(iprot);
                                struct.setCompanyDTOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // REPLY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.replyId = iprot.readI64();
                                struct.setReplyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryById_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyDTO != null) {
                    oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
                    struct.companyDTO.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(REPLY_ID_FIELD_DESC);
                oprot.writeI64(struct.replyId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryById_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryById_argsTupleScheme getScheme() {
                return new queryById_argsTupleScheme();
            }
        }

        private static class queryById_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryById_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyDTO()) {
                    optionals.set(0);
                }
                if (struct.isSetReplyId()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCompanyDTO()) {
                    struct.companyDTO.write(oprot);
                }
                if (struct.isSetReplyId()) {
                    oprot.writeI64(struct.replyId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                    struct.companyDTO.read(iprot);
                    struct.setCompanyDTOIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.replyId = iprot.readI64();
                    struct.setReplyIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryById_result implements org.apache.thrift.TBase<queryById_result, queryById_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryById_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryById_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryById_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryById_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.ReplyDTO success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.ReplyDTO.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryById_result.class, metaDataMap);
        }

        public queryById_result() {
        }

        public queryById_result(
                com.aries.hermes.idl.dto.ReplyDTO success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryById_result(queryById_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.aries.hermes.idl.dto.ReplyDTO(other.success);
            }
        }

        public queryById_result deepCopy() {
            return new queryById_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.ReplyDTO getSuccess() {
            return this.success;
        }

        public queryById_result setSuccess(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.ReplyDTO success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.aries.hermes.idl.dto.ReplyDTO) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof queryById_result)
                return this.equals((queryById_result) that);
            return false;
        }

        public boolean equals(queryById_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryById_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryById_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryById_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryById_resultStandardScheme getScheme() {
                return new queryById_resultStandardScheme();
            }
        }

        private static class queryById_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryById_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.aries.hermes.idl.dto.ReplyDTO();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryById_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryById_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryById_resultTupleScheme getScheme() {
                return new queryById_resultTupleScheme();
            }
        }

        private static class queryById_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryById_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.aries.hermes.idl.dto.ReplyDTO();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryNext_args implements org.apache.thrift.TBase<queryNext_args, queryNext_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryNext_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryNext_args");

        private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.I64, (short) 2);
        private static final org.apache.thrift.protocol.TField LAST_REPLY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lastReplyId", org.apache.thrift.protocol.TType.I64, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryNext_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryNext_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.CompanyDTO companyDTO; // required
        public long topicId; // required
        public long lastReplyId; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_DTO((short) 1, "companyDTO"),
            TOPIC_ID((short) 2, "topicId"),
            LAST_REPLY_ID((short) 3, "lastReplyId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // COMPANY_DTO
                        return COMPANY_DTO;
                    case 2: // TOPIC_ID
                        return TOPIC_ID;
                    case 3: // LAST_REPLY_ID
                        return LAST_REPLY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __TOPICID_ISSET_ID = 0;
        private static final int __LASTREPLYID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.CompanyDTO.class)));
            tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.LAST_REPLY_ID, new org.apache.thrift.meta_data.FieldMetaData("lastReplyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryNext_args.class, metaDataMap);
        }

        public queryNext_args() {
        }

        public queryNext_args(
                com.aries.hermes.idl.dto.CompanyDTO companyDTO,
                long topicId,
                long lastReplyId) {
            this();
            this.companyDTO = companyDTO;
            this.topicId = topicId;
            setTopicIdIsSet(true);
            this.lastReplyId = lastReplyId;
            setLastReplyIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryNext_args(queryNext_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetCompanyDTO()) {
                this.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO(other.companyDTO);
            }
            this.topicId = other.topicId;
            this.lastReplyId = other.lastReplyId;
        }

        public queryNext_args deepCopy() {
            return new queryNext_args(this);
        }

        @Override
        public void clear() {
            this.companyDTO = null;
            setTopicIdIsSet(false);
            this.topicId = 0;
            setLastReplyIdIsSet(false);
            this.lastReplyId = 0;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.CompanyDTO getCompanyDTO() {
            return this.companyDTO;
        }

        public queryNext_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CompanyDTO companyDTO) {
            this.companyDTO = companyDTO;
            return this;
        }

        public void unsetCompanyDTO() {
            this.companyDTO = null;
        }

        /**
         * Returns true if field companyDTO is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCompanyDTO() {
            return this.companyDTO != null;
        }

        public void setCompanyDTOIsSet(boolean value) {
            if (!value) {
                this.companyDTO = null;
            }
        }

        public long getTopicId() {
            return this.topicId;
        }

        public queryNext_args setTopicId(long topicId) {
            this.topicId = topicId;
            setTopicIdIsSet(true);
            return this;
        }

        public void unsetTopicId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPICID_ISSET_ID);
        }

        /**
         * Returns true if field topicId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetTopicId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPICID_ISSET_ID);
        }

        public void setTopicIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPICID_ISSET_ID, value);
        }

        public long getLastReplyId() {
            return this.lastReplyId;
        }

        public queryNext_args setLastReplyId(long lastReplyId) {
            this.lastReplyId = lastReplyId;
            setLastReplyIdIsSet(true);
            return this;
        }

        public void unsetLastReplyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LASTREPLYID_ISSET_ID);
        }

        /**
         * Returns true if field lastReplyId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetLastReplyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LASTREPLYID_ISSET_ID);
        }

        public void setLastReplyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LASTREPLYID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case COMPANY_DTO:
                    if (value == null) {
                        unsetCompanyDTO();
                    } else {
                        setCompanyDTO((com.aries.hermes.idl.dto.CompanyDTO) value);
                    }
                    break;

                case TOPIC_ID:
                    if (value == null) {
                        unsetTopicId();
                    } else {
                        setTopicId((java.lang.Long) value);
                    }
                    break;

                case LAST_REPLY_ID:
                    if (value == null) {
                        unsetLastReplyId();
                    } else {
                        setLastReplyId((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_DTO:
                    return getCompanyDTO();

                case TOPIC_ID:
                    return getTopicId();

                case LAST_REPLY_ID:
                    return getLastReplyId();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_DTO:
                    return isSetCompanyDTO();
                case TOPIC_ID:
                    return isSetTopicId();
                case LAST_REPLY_ID:
                    return isSetLastReplyId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof queryNext_args)
                return this.equals((queryNext_args) that);
            return false;
        }

        public boolean equals(queryNext_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyDTO = true && this.isSetCompanyDTO();
            boolean that_present_companyDTO = true && that.isSetCompanyDTO();
            if (this_present_companyDTO || that_present_companyDTO) {
                if (!(this_present_companyDTO && that_present_companyDTO))
                    return false;
                if (!this.companyDTO.equals(that.companyDTO))
                    return false;
            }

            boolean this_present_topicId = true;
            boolean that_present_topicId = true;
            if (this_present_topicId || that_present_topicId) {
                if (!(this_present_topicId && that_present_topicId))
                    return false;
                if (this.topicId != that.topicId)
                    return false;
            }

            boolean this_present_lastReplyId = true;
            boolean that_present_lastReplyId = true;
            if (this_present_lastReplyId || that_present_lastReplyId) {
                if (!(this_present_lastReplyId && that_present_lastReplyId))
                    return false;
                if (this.lastReplyId != that.lastReplyId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
            if (isSetCompanyDTO())
                hashCode = hashCode * 8191 + companyDTO.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(topicId);

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lastReplyId);

            return hashCode;
        }

        @Override
        public int compareTo(queryNext_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyDTO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTopicId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetLastReplyId()).compareTo(other.isSetLastReplyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetLastReplyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastReplyId, other.lastReplyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryNext_args(");
            boolean first = true;

            sb.append("companyDTO:");
            if (this.companyDTO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyDTO);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("topicId:");
            sb.append(this.topicId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("lastReplyId:");
            sb.append(this.lastReplyId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyDTO != null) {
                companyDTO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryNext_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryNext_argsStandardScheme getScheme() {
                return new queryNext_argsStandardScheme();
            }
        }

        private static class queryNext_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryNext_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryNext_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                                struct.companyDTO.read(iprot);
                                struct.setCompanyDTOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // TOPIC_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.topicId = iprot.readI64();
                                struct.setTopicIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // LAST_REPLY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.lastReplyId = iprot.readI64();
                                struct.setLastReplyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryNext_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyDTO != null) {
                    oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
                    struct.companyDTO.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
                oprot.writeI64(struct.topicId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(LAST_REPLY_ID_FIELD_DESC);
                oprot.writeI64(struct.lastReplyId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryNext_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryNext_argsTupleScheme getScheme() {
                return new queryNext_argsTupleScheme();
            }
        }

        private static class queryNext_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryNext_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryNext_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyDTO()) {
                    optionals.set(0);
                }
                if (struct.isSetTopicId()) {
                    optionals.set(1);
                }
                if (struct.isSetLastReplyId()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetCompanyDTO()) {
                    struct.companyDTO.write(oprot);
                }
                if (struct.isSetTopicId()) {
                    oprot.writeI64(struct.topicId);
                }
                if (struct.isSetLastReplyId()) {
                    oprot.writeI64(struct.lastReplyId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryNext_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                    struct.companyDTO.read(iprot);
                    struct.setCompanyDTOIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.topicId = iprot.readI64();
                    struct.setTopicIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.lastReplyId = iprot.readI64();
                    struct.setLastReplyIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryNext_result implements org.apache.thrift.TBase<queryNext_result, queryNext_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryNext_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryNext_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryNext_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryNext_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.ReplyDTO success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.ReplyDTO.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryNext_result.class, metaDataMap);
        }

        public queryNext_result() {
        }

        public queryNext_result(
                com.aries.hermes.idl.dto.ReplyDTO success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryNext_result(queryNext_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.aries.hermes.idl.dto.ReplyDTO(other.success);
            }
        }

        public queryNext_result deepCopy() {
            return new queryNext_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.ReplyDTO getSuccess() {
            return this.success;
        }

        public queryNext_result setSuccess(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.ReplyDTO success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.aries.hermes.idl.dto.ReplyDTO) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof queryNext_result)
                return this.equals((queryNext_result) that);
            return false;
        }

        public boolean equals(queryNext_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryNext_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryNext_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryNext_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryNext_resultStandardScheme getScheme() {
                return new queryNext_resultStandardScheme();
            }
        }

        private static class queryNext_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryNext_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryNext_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.aries.hermes.idl.dto.ReplyDTO();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryNext_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryNext_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryNext_resultTupleScheme getScheme() {
                return new queryNext_resultTupleScheme();
            }
        }

        private static class queryNext_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryNext_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryNext_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryNext_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.aries.hermes.idl.dto.ReplyDTO();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryAllByTopicId_args implements org.apache.thrift.TBase<queryAllByTopicId_args, queryAllByTopicId_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryAllByTopicId_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAllByTopicId_args");

        private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.I64, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryAllByTopicId_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryAllByTopicId_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.CompanyDTO companyDTO; // required
        public long topicId; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_DTO((short) 1, "companyDTO"),
            TOPIC_ID((short) 2, "topicId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // COMPANY_DTO
                        return COMPANY_DTO;
                    case 2: // TOPIC_ID
                        return TOPIC_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __TOPICID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.CompanyDTO.class)));
            tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAllByTopicId_args.class, metaDataMap);
        }

        public queryAllByTopicId_args() {
        }

        public queryAllByTopicId_args(
                com.aries.hermes.idl.dto.CompanyDTO companyDTO,
                long topicId) {
            this();
            this.companyDTO = companyDTO;
            this.topicId = topicId;
            setTopicIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryAllByTopicId_args(queryAllByTopicId_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetCompanyDTO()) {
                this.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO(other.companyDTO);
            }
            this.topicId = other.topicId;
        }

        public queryAllByTopicId_args deepCopy() {
            return new queryAllByTopicId_args(this);
        }

        @Override
        public void clear() {
            this.companyDTO = null;
            setTopicIdIsSet(false);
            this.topicId = 0;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.CompanyDTO getCompanyDTO() {
            return this.companyDTO;
        }

        public queryAllByTopicId_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CompanyDTO companyDTO) {
            this.companyDTO = companyDTO;
            return this;
        }

        public void unsetCompanyDTO() {
            this.companyDTO = null;
        }

        /**
         * Returns true if field companyDTO is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCompanyDTO() {
            return this.companyDTO != null;
        }

        public void setCompanyDTOIsSet(boolean value) {
            if (!value) {
                this.companyDTO = null;
            }
        }

        public long getTopicId() {
            return this.topicId;
        }

        public queryAllByTopicId_args setTopicId(long topicId) {
            this.topicId = topicId;
            setTopicIdIsSet(true);
            return this;
        }

        public void unsetTopicId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPICID_ISSET_ID);
        }

        /**
         * Returns true if field topicId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetTopicId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPICID_ISSET_ID);
        }

        public void setTopicIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPICID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case COMPANY_DTO:
                    if (value == null) {
                        unsetCompanyDTO();
                    } else {
                        setCompanyDTO((com.aries.hermes.idl.dto.CompanyDTO) value);
                    }
                    break;

                case TOPIC_ID:
                    if (value == null) {
                        unsetTopicId();
                    } else {
                        setTopicId((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_DTO:
                    return getCompanyDTO();

                case TOPIC_ID:
                    return getTopicId();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_DTO:
                    return isSetCompanyDTO();
                case TOPIC_ID:
                    return isSetTopicId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof queryAllByTopicId_args)
                return this.equals((queryAllByTopicId_args) that);
            return false;
        }

        public boolean equals(queryAllByTopicId_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyDTO = true && this.isSetCompanyDTO();
            boolean that_present_companyDTO = true && that.isSetCompanyDTO();
            if (this_present_companyDTO || that_present_companyDTO) {
                if (!(this_present_companyDTO && that_present_companyDTO))
                    return false;
                if (!this.companyDTO.equals(that.companyDTO))
                    return false;
            }

            boolean this_present_topicId = true;
            boolean that_present_topicId = true;
            if (this_present_topicId || that_present_topicId) {
                if (!(this_present_topicId && that_present_topicId))
                    return false;
                if (this.topicId != that.topicId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
            if (isSetCompanyDTO())
                hashCode = hashCode * 8191 + companyDTO.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(topicId);

            return hashCode;
        }

        @Override
        public int compareTo(queryAllByTopicId_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyDTO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTopicId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryAllByTopicId_args(");
            boolean first = true;

            sb.append("companyDTO:");
            if (this.companyDTO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyDTO);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("topicId:");
            sb.append(this.topicId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyDTO != null) {
                companyDTO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryAllByTopicId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllByTopicId_argsStandardScheme getScheme() {
                return new queryAllByTopicId_argsStandardScheme();
            }
        }

        private static class queryAllByTopicId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryAllByTopicId_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryAllByTopicId_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                                struct.companyDTO.read(iprot);
                                struct.setCompanyDTOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // TOPIC_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.topicId = iprot.readI64();
                                struct.setTopicIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryAllByTopicId_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyDTO != null) {
                    oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
                    struct.companyDTO.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
                oprot.writeI64(struct.topicId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryAllByTopicId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllByTopicId_argsTupleScheme getScheme() {
                return new queryAllByTopicId_argsTupleScheme();
            }
        }

        private static class queryAllByTopicId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryAllByTopicId_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryAllByTopicId_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyDTO()) {
                    optionals.set(0);
                }
                if (struct.isSetTopicId()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCompanyDTO()) {
                    struct.companyDTO.write(oprot);
                }
                if (struct.isSetTopicId()) {
                    oprot.writeI64(struct.topicId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryAllByTopicId_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                    struct.companyDTO.read(iprot);
                    struct.setCompanyDTOIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.topicId = iprot.readI64();
                    struct.setTopicIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryAllByTopicId_result implements org.apache.thrift.TBase<queryAllByTopicId_result, queryAllByTopicId_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryAllByTopicId_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAllByTopicId_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryAllByTopicId_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryAllByTopicId_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        java.util.List<com.aries.hermes.idl.dto.ReplyDTO> success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.ReplyDTO.class))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAllByTopicId_result.class, metaDataMap);
        }

        public queryAllByTopicId_result() {
        }

        public queryAllByTopicId_result(
                java.util.List<com.aries.hermes.idl.dto.ReplyDTO> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryAllByTopicId_result(queryAllByTopicId_result other) {
            if (other.isSetSuccess()) {
                java.util.List<com.aries.hermes.idl.dto.ReplyDTO> __this__success = new java.util.ArrayList<com.aries.hermes.idl.dto.ReplyDTO>(other.success.size());
                for (com.aries.hermes.idl.dto.ReplyDTO other_element : other.success) {
                    __this__success.add(new com.aries.hermes.idl.dto.ReplyDTO(other_element));
                }
                this.success = __this__success;
            }
        }

        public queryAllByTopicId_result deepCopy() {
            return new queryAllByTopicId_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        @org.apache.thrift.annotation.Nullable
        public java.util.Iterator<com.aries.hermes.idl.dto.ReplyDTO> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(com.aries.hermes.idl.dto.ReplyDTO elem) {
            if (this.success == null) {
                this.success = new java.util.ArrayList<com.aries.hermes.idl.dto.ReplyDTO>();
            }
            this.success.add(elem);
        }

        @org.apache.thrift.annotation.Nullable
        public java.util.List<com.aries.hermes.idl.dto.ReplyDTO> getSuccess() {
            return this.success;
        }

        public queryAllByTopicId_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<com.aries.hermes.idl.dto.ReplyDTO> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.util.List<com.aries.hermes.idl.dto.ReplyDTO>) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof queryAllByTopicId_result)
                return this.equals((queryAllByTopicId_result) that);
            return false;
        }

        public boolean equals(queryAllByTopicId_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryAllByTopicId_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryAllByTopicId_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryAllByTopicId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllByTopicId_resultStandardScheme getScheme() {
                return new queryAllByTopicId_resultStandardScheme();
            }
        }

        private static class queryAllByTopicId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryAllByTopicId_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryAllByTopicId_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                    struct.success = new java.util.ArrayList<com.aries.hermes.idl.dto.ReplyDTO>(_list0.size);
                                    @org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.ReplyDTO _elem1;
                                    for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
                                        _elem1 = new com.aries.hermes.idl.dto.ReplyDTO();
                                        _elem1.read(iprot);
                                        struct.success.add(_elem1);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryAllByTopicId_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (com.aries.hermes.idl.dto.ReplyDTO _iter3 : struct.success) {
                            _iter3.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryAllByTopicId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllByTopicId_resultTupleScheme getScheme() {
                return new queryAllByTopicId_resultTupleScheme();
            }
        }

        private static class queryAllByTopicId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryAllByTopicId_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryAllByTopicId_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (com.aries.hermes.idl.dto.ReplyDTO _iter4 : struct.success) {
                            _iter4.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryAllByTopicId_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new java.util.ArrayList<com.aries.hermes.idl.dto.ReplyDTO>(_list5.size);
                        @org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.ReplyDTO _elem6;
                        for (int _i7 = 0; _i7 < _list5.size; ++_i7) {
                            _elem6 = new com.aries.hermes.idl.dto.ReplyDTO();
                            _elem6.read(iprot);
                            struct.success.add(_elem6);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchQueryByTopicId_args implements org.apache.thrift.TBase<batchQueryByTopicId_args, batchQueryByTopicId_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchQueryByTopicId_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchQueryByTopicId_args");

        private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.I64, (short) 2);
        private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short) 3);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short) 4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchQueryByTopicId_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchQueryByTopicId_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.CompanyDTO companyDTO; // required
        public long topicId; // required
        public int page; // required
        public int pageSize; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_DTO((short) 1, "companyDTO"),
            TOPIC_ID((short) 2, "topicId"),
            PAGE((short) 3, "page"),
            PAGE_SIZE((short) 4, "pageSize");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // COMPANY_DTO
                        return COMPANY_DTO;
                    case 2: // TOPIC_ID
                        return TOPIC_ID;
                    case 3: // PAGE
                        return PAGE;
                    case 4: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __TOPICID_ISSET_ID = 0;
        private static final int __PAGE_ISSET_ID = 1;
        private static final int __PAGESIZE_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.CompanyDTO.class)));
            tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchQueryByTopicId_args.class, metaDataMap);
        }

        public batchQueryByTopicId_args() {
        }

        public batchQueryByTopicId_args(
                com.aries.hermes.idl.dto.CompanyDTO companyDTO,
                long topicId,
                int page,
                int pageSize) {
            this();
            this.companyDTO = companyDTO;
            this.topicId = topicId;
            setTopicIdIsSet(true);
            this.page = page;
            setPageIsSet(true);
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchQueryByTopicId_args(batchQueryByTopicId_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetCompanyDTO()) {
                this.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO(other.companyDTO);
            }
            this.topicId = other.topicId;
            this.page = other.page;
            this.pageSize = other.pageSize;
        }

        public batchQueryByTopicId_args deepCopy() {
            return new batchQueryByTopicId_args(this);
        }

        @Override
        public void clear() {
            this.companyDTO = null;
            setTopicIdIsSet(false);
            this.topicId = 0;
            setPageIsSet(false);
            this.page = 0;
            setPageSizeIsSet(false);
            this.pageSize = 0;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.CompanyDTO getCompanyDTO() {
            return this.companyDTO;
        }

        public batchQueryByTopicId_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CompanyDTO companyDTO) {
            this.companyDTO = companyDTO;
            return this;
        }

        public void unsetCompanyDTO() {
            this.companyDTO = null;
        }

        /**
         * Returns true if field companyDTO is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCompanyDTO() {
            return this.companyDTO != null;
        }

        public void setCompanyDTOIsSet(boolean value) {
            if (!value) {
                this.companyDTO = null;
            }
        }

        public long getTopicId() {
            return this.topicId;
        }

        public batchQueryByTopicId_args setTopicId(long topicId) {
            this.topicId = topicId;
            setTopicIdIsSet(true);
            return this;
        }

        public void unsetTopicId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPICID_ISSET_ID);
        }

        /**
         * Returns true if field topicId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetTopicId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPICID_ISSET_ID);
        }

        public void setTopicIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPICID_ISSET_ID, value);
        }

        public int getPage() {
            return this.page;
        }

        public batchQueryByTopicId_args setPage(int page) {
            this.page = page;
            setPageIsSet(true);
            return this;
        }

        public void unsetPage() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        /**
         * Returns true if field page is set (has been assigned a value) and false otherwise
         */
        public boolean isSetPage() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        public void setPageIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
        }

        public int getPageSize() {
            return this.pageSize;
        }

        public batchQueryByTopicId_args setPageSize(int pageSize) {
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
            return this;
        }

        public void unsetPageSize() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        /**
         * Returns true if field pageSize is set (has been assigned a value) and false otherwise
         */
        public boolean isSetPageSize() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        public void setPageSizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case COMPANY_DTO:
                    if (value == null) {
                        unsetCompanyDTO();
                    } else {
                        setCompanyDTO((com.aries.hermes.idl.dto.CompanyDTO) value);
                    }
                    break;

                case TOPIC_ID:
                    if (value == null) {
                        unsetTopicId();
                    } else {
                        setTopicId((java.lang.Long) value);
                    }
                    break;

                case PAGE:
                    if (value == null) {
                        unsetPage();
                    } else {
                        setPage((java.lang.Integer) value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPageSize();
                    } else {
                        setPageSize((java.lang.Integer) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_DTO:
                    return getCompanyDTO();

                case TOPIC_ID:
                    return getTopicId();

                case PAGE:
                    return getPage();

                case PAGE_SIZE:
                    return getPageSize();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_DTO:
                    return isSetCompanyDTO();
                case TOPIC_ID:
                    return isSetTopicId();
                case PAGE:
                    return isSetPage();
                case PAGE_SIZE:
                    return isSetPageSize();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchQueryByTopicId_args)
                return this.equals((batchQueryByTopicId_args) that);
            return false;
        }

        public boolean equals(batchQueryByTopicId_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyDTO = true && this.isSetCompanyDTO();
            boolean that_present_companyDTO = true && that.isSetCompanyDTO();
            if (this_present_companyDTO || that_present_companyDTO) {
                if (!(this_present_companyDTO && that_present_companyDTO))
                    return false;
                if (!this.companyDTO.equals(that.companyDTO))
                    return false;
            }

            boolean this_present_topicId = true;
            boolean that_present_topicId = true;
            if (this_present_topicId || that_present_topicId) {
                if (!(this_present_topicId && that_present_topicId))
                    return false;
                if (this.topicId != that.topicId)
                    return false;
            }

            boolean this_present_page = true;
            boolean that_present_page = true;
            if (this_present_page || that_present_page) {
                if (!(this_present_page && that_present_page))
                    return false;
                if (this.page != that.page)
                    return false;
            }

            boolean this_present_pageSize = true;
            boolean that_present_pageSize = true;
            if (this_present_pageSize || that_present_pageSize) {
                if (!(this_present_pageSize && that_present_pageSize))
                    return false;
                if (this.pageSize != that.pageSize)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
            if (isSetCompanyDTO())
                hashCode = hashCode * 8191 + companyDTO.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(topicId);

            hashCode = hashCode * 8191 + page;

            hashCode = hashCode * 8191 + pageSize;

            return hashCode;
        }

        @Override
        public int compareTo(batchQueryByTopicId_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyDTO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTopicId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPageSize()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchQueryByTopicId_args(");
            boolean first = true;

            sb.append("companyDTO:");
            if (this.companyDTO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyDTO);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("topicId:");
            sb.append(this.topicId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page:");
            sb.append(this.page);
            first = false;
            if (!first) sb.append(", ");
            sb.append("pageSize:");
            sb.append(this.pageSize);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyDTO != null) {
                companyDTO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchQueryByTopicId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchQueryByTopicId_argsStandardScheme getScheme() {
                return new batchQueryByTopicId_argsStandardScheme();
            }
        }

        private static class batchQueryByTopicId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchQueryByTopicId_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchQueryByTopicId_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                                struct.companyDTO.read(iprot);
                                struct.setCompanyDTOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // TOPIC_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.topicId = iprot.readI64();
                                struct.setTopicIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page = iprot.readI32();
                                struct.setPageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pageSize = iprot.readI32();
                                struct.setPageSizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchQueryByTopicId_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyDTO != null) {
                    oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
                    struct.companyDTO.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
                oprot.writeI64(struct.topicId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_FIELD_DESC);
                oprot.writeI32(struct.page);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.pageSize);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchQueryByTopicId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchQueryByTopicId_argsTupleScheme getScheme() {
                return new batchQueryByTopicId_argsTupleScheme();
            }
        }

        private static class batchQueryByTopicId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchQueryByTopicId_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchQueryByTopicId_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyDTO()) {
                    optionals.set(0);
                }
                if (struct.isSetTopicId()) {
                    optionals.set(1);
                }
                if (struct.isSetPage()) {
                    optionals.set(2);
                }
                if (struct.isSetPageSize()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetCompanyDTO()) {
                    struct.companyDTO.write(oprot);
                }
                if (struct.isSetTopicId()) {
                    oprot.writeI64(struct.topicId);
                }
                if (struct.isSetPage()) {
                    oprot.writeI32(struct.page);
                }
                if (struct.isSetPageSize()) {
                    oprot.writeI32(struct.pageSize);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchQueryByTopicId_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                    struct.companyDTO.read(iprot);
                    struct.setCompanyDTOIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.topicId = iprot.readI64();
                    struct.setTopicIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.page = iprot.readI32();
                    struct.setPageIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.pageSize = iprot.readI32();
                    struct.setPageSizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchQueryByTopicId_result implements org.apache.thrift.TBase<batchQueryByTopicId_result, batchQueryByTopicId_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchQueryByTopicId_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchQueryByTopicId_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchQueryByTopicId_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchQueryByTopicId_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        java.util.List<com.aries.hermes.idl.dto.ReplyDTO> success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.ReplyDTO.class))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchQueryByTopicId_result.class, metaDataMap);
        }

        public batchQueryByTopicId_result() {
        }

        public batchQueryByTopicId_result(
                java.util.List<com.aries.hermes.idl.dto.ReplyDTO> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchQueryByTopicId_result(batchQueryByTopicId_result other) {
            if (other.isSetSuccess()) {
                java.util.List<com.aries.hermes.idl.dto.ReplyDTO> __this__success = new java.util.ArrayList<com.aries.hermes.idl.dto.ReplyDTO>(other.success.size());
                for (com.aries.hermes.idl.dto.ReplyDTO other_element : other.success) {
                    __this__success.add(new com.aries.hermes.idl.dto.ReplyDTO(other_element));
                }
                this.success = __this__success;
            }
        }

        public batchQueryByTopicId_result deepCopy() {
            return new batchQueryByTopicId_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        @org.apache.thrift.annotation.Nullable
        public java.util.Iterator<com.aries.hermes.idl.dto.ReplyDTO> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(com.aries.hermes.idl.dto.ReplyDTO elem) {
            if (this.success == null) {
                this.success = new java.util.ArrayList<com.aries.hermes.idl.dto.ReplyDTO>();
            }
            this.success.add(elem);
        }

        @org.apache.thrift.annotation.Nullable
        public java.util.List<com.aries.hermes.idl.dto.ReplyDTO> getSuccess() {
            return this.success;
        }

        public batchQueryByTopicId_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<com.aries.hermes.idl.dto.ReplyDTO> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.util.List<com.aries.hermes.idl.dto.ReplyDTO>) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchQueryByTopicId_result)
                return this.equals((batchQueryByTopicId_result) that);
            return false;
        }

        public boolean equals(batchQueryByTopicId_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(batchQueryByTopicId_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchQueryByTopicId_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchQueryByTopicId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchQueryByTopicId_resultStandardScheme getScheme() {
                return new batchQueryByTopicId_resultStandardScheme();
            }
        }

        private static class batchQueryByTopicId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchQueryByTopicId_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchQueryByTopicId_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                                    struct.success = new java.util.ArrayList<com.aries.hermes.idl.dto.ReplyDTO>(_list8.size);
                                    @org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.ReplyDTO _elem9;
                                    for (int _i10 = 0; _i10 < _list8.size; ++_i10) {
                                        _elem9 = new com.aries.hermes.idl.dto.ReplyDTO();
                                        _elem9.read(iprot);
                                        struct.success.add(_elem9);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchQueryByTopicId_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (com.aries.hermes.idl.dto.ReplyDTO _iter11 : struct.success) {
                            _iter11.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchQueryByTopicId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchQueryByTopicId_resultTupleScheme getScheme() {
                return new batchQueryByTopicId_resultTupleScheme();
            }
        }

        private static class batchQueryByTopicId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchQueryByTopicId_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchQueryByTopicId_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (com.aries.hermes.idl.dto.ReplyDTO _iter12 : struct.success) {
                            _iter12.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchQueryByTopicId_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new java.util.ArrayList<com.aries.hermes.idl.dto.ReplyDTO>(_list13.size);
                        @org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.ReplyDTO _elem14;
                        for (int _i15 = 0; _i15 < _list13.size; ++_i15) {
                            _elem14 = new com.aries.hermes.idl.dto.ReplyDTO();
                            _elem14.read(iprot);
                            struct.success.add(_elem14);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updateContent_args implements org.apache.thrift.TBase<updateContent_args, updateContent_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateContent_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateContent_args");

        private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField REPLY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("replyId", org.apache.thrift.protocol.TType.I64, (short) 2);
        private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateContent_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateContent_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.CompanyDTO companyDTO; // required
        public long replyId; // required
        public @org.apache.thrift.annotation.Nullable
        java.lang.String content; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_DTO((short) 1, "companyDTO"),
            REPLY_ID((short) 2, "replyId"),
            CONTENT((short) 3, "content");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // COMPANY_DTO
                        return COMPANY_DTO;
                    case 2: // REPLY_ID
                        return REPLY_ID;
                    case 3: // CONTENT
                        return CONTENT;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __REPLYID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.CompanyDTO.class)));
            tmpMap.put(_Fields.REPLY_ID, new org.apache.thrift.meta_data.FieldMetaData("replyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateContent_args.class, metaDataMap);
        }

        public updateContent_args() {
        }

        public updateContent_args(
                com.aries.hermes.idl.dto.CompanyDTO companyDTO,
                long replyId,
                java.lang.String content) {
            this();
            this.companyDTO = companyDTO;
            this.replyId = replyId;
            setReplyIdIsSet(true);
            this.content = content;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateContent_args(updateContent_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetCompanyDTO()) {
                this.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO(other.companyDTO);
            }
            this.replyId = other.replyId;
            if (other.isSetContent()) {
                this.content = other.content;
            }
        }

        public updateContent_args deepCopy() {
            return new updateContent_args(this);
        }

        @Override
        public void clear() {
            this.companyDTO = null;
            setReplyIdIsSet(false);
            this.replyId = 0;
            this.content = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.CompanyDTO getCompanyDTO() {
            return this.companyDTO;
        }

        public updateContent_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CompanyDTO companyDTO) {
            this.companyDTO = companyDTO;
            return this;
        }

        public void unsetCompanyDTO() {
            this.companyDTO = null;
        }

        /**
         * Returns true if field companyDTO is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCompanyDTO() {
            return this.companyDTO != null;
        }

        public void setCompanyDTOIsSet(boolean value) {
            if (!value) {
                this.companyDTO = null;
            }
        }

        public long getReplyId() {
            return this.replyId;
        }

        public updateContent_args setReplyId(long replyId) {
            this.replyId = replyId;
            setReplyIdIsSet(true);
            return this;
        }

        public void unsetReplyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REPLYID_ISSET_ID);
        }

        /**
         * Returns true if field replyId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetReplyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REPLYID_ISSET_ID);
        }

        public void setReplyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REPLYID_ISSET_ID, value);
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getContent() {
            return this.content;
        }

        public updateContent_args setContent(@org.apache.thrift.annotation.Nullable java.lang.String content) {
            this.content = content;
            return this;
        }

        public void unsetContent() {
            this.content = null;
        }

        /**
         * Returns true if field content is set (has been assigned a value) and false otherwise
         */
        public boolean isSetContent() {
            return this.content != null;
        }

        public void setContentIsSet(boolean value) {
            if (!value) {
                this.content = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case COMPANY_DTO:
                    if (value == null) {
                        unsetCompanyDTO();
                    } else {
                        setCompanyDTO((com.aries.hermes.idl.dto.CompanyDTO) value);
                    }
                    break;

                case REPLY_ID:
                    if (value == null) {
                        unsetReplyId();
                    } else {
                        setReplyId((java.lang.Long) value);
                    }
                    break;

                case CONTENT:
                    if (value == null) {
                        unsetContent();
                    } else {
                        setContent((java.lang.String) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_DTO:
                    return getCompanyDTO();

                case REPLY_ID:
                    return getReplyId();

                case CONTENT:
                    return getContent();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_DTO:
                    return isSetCompanyDTO();
                case REPLY_ID:
                    return isSetReplyId();
                case CONTENT:
                    return isSetContent();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updateContent_args)
                return this.equals((updateContent_args) that);
            return false;
        }

        public boolean equals(updateContent_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyDTO = true && this.isSetCompanyDTO();
            boolean that_present_companyDTO = true && that.isSetCompanyDTO();
            if (this_present_companyDTO || that_present_companyDTO) {
                if (!(this_present_companyDTO && that_present_companyDTO))
                    return false;
                if (!this.companyDTO.equals(that.companyDTO))
                    return false;
            }

            boolean this_present_replyId = true;
            boolean that_present_replyId = true;
            if (this_present_replyId || that_present_replyId) {
                if (!(this_present_replyId && that_present_replyId))
                    return false;
                if (this.replyId != that.replyId)
                    return false;
            }

            boolean this_present_content = true && this.isSetContent();
            boolean that_present_content = true && that.isSetContent();
            if (this_present_content || that_present_content) {
                if (!(this_present_content && that_present_content))
                    return false;
                if (!this.content.equals(that.content))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
            if (isSetCompanyDTO())
                hashCode = hashCode * 8191 + companyDTO.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(replyId);

            hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
            if (isSetContent())
                hashCode = hashCode * 8191 + content.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updateContent_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyDTO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetReplyId()).compareTo(other.isSetReplyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetReplyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replyId, other.replyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetContent()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updateContent_args(");
            boolean first = true;

            sb.append("companyDTO:");
            if (this.companyDTO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyDTO);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("replyId:");
            sb.append(this.replyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("content:");
            if (this.content == null) {
                sb.append("null");
            } else {
                sb.append(this.content);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyDTO != null) {
                companyDTO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateContent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateContent_argsStandardScheme getScheme() {
                return new updateContent_argsStandardScheme();
            }
        }

        private static class updateContent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateContent_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateContent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                                struct.companyDTO.read(iprot);
                                struct.setCompanyDTOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // REPLY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.replyId = iprot.readI64();
                                struct.setReplyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // CONTENT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.content = iprot.readString();
                                struct.setContentIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateContent_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyDTO != null) {
                    oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
                    struct.companyDTO.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(REPLY_ID_FIELD_DESC);
                oprot.writeI64(struct.replyId);
                oprot.writeFieldEnd();
                if (struct.content != null) {
                    oprot.writeFieldBegin(CONTENT_FIELD_DESC);
                    oprot.writeString(struct.content);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateContent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateContent_argsTupleScheme getScheme() {
                return new updateContent_argsTupleScheme();
            }
        }

        private static class updateContent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateContent_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateContent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyDTO()) {
                    optionals.set(0);
                }
                if (struct.isSetReplyId()) {
                    optionals.set(1);
                }
                if (struct.isSetContent()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetCompanyDTO()) {
                    struct.companyDTO.write(oprot);
                }
                if (struct.isSetReplyId()) {
                    oprot.writeI64(struct.replyId);
                }
                if (struct.isSetContent()) {
                    oprot.writeString(struct.content);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateContent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                    struct.companyDTO.read(iprot);
                    struct.setCompanyDTOIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.replyId = iprot.readI64();
                    struct.setReplyIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.content = iprot.readString();
                    struct.setContentIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updateContent_result implements org.apache.thrift.TBase<updateContent_result, updateContent_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateContent_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateContent_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateContent_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateContent_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.ThriftResponse success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.ThriftResponse.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateContent_result.class, metaDataMap);
        }

        public updateContent_result() {
        }

        public updateContent_result(
                com.aries.hermes.idl.dto.ThriftResponse success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateContent_result(updateContent_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.aries.hermes.idl.dto.ThriftResponse(other.success);
            }
        }

        public updateContent_result deepCopy() {
            return new updateContent_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.ThriftResponse getSuccess() {
            return this.success;
        }

        public updateContent_result setSuccess(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.ThriftResponse success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.aries.hermes.idl.dto.ThriftResponse) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updateContent_result)
                return this.equals((updateContent_result) that);
            return false;
        }

        public boolean equals(updateContent_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updateContent_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updateContent_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateContent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateContent_resultStandardScheme getScheme() {
                return new updateContent_resultStandardScheme();
            }
        }

        private static class updateContent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateContent_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateContent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.aries.hermes.idl.dto.ThriftResponse();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateContent_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateContent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateContent_resultTupleScheme getScheme() {
                return new updateContent_resultTupleScheme();
            }
        }

        private static class updateContent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateContent_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateContent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateContent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.aries.hermes.idl.dto.ThriftResponse();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class deleteByReplyId_args implements org.apache.thrift.TBase<deleteByReplyId_args, deleteByReplyId_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteByReplyId_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteByReplyId_args");

        private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField REPLY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("replyId", org.apache.thrift.protocol.TType.I64, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteByReplyId_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteByReplyId_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.CompanyDTO companyDTO; // required
        public long replyId; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_DTO((short) 1, "companyDTO"),
            REPLY_ID((short) 2, "replyId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // COMPANY_DTO
                        return COMPANY_DTO;
                    case 2: // REPLY_ID
                        return REPLY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __REPLYID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.CompanyDTO.class)));
            tmpMap.put(_Fields.REPLY_ID, new org.apache.thrift.meta_data.FieldMetaData("replyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteByReplyId_args.class, metaDataMap);
        }

        public deleteByReplyId_args() {
        }

        public deleteByReplyId_args(
                com.aries.hermes.idl.dto.CompanyDTO companyDTO,
                long replyId) {
            this();
            this.companyDTO = companyDTO;
            this.replyId = replyId;
            setReplyIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteByReplyId_args(deleteByReplyId_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetCompanyDTO()) {
                this.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO(other.companyDTO);
            }
            this.replyId = other.replyId;
        }

        public deleteByReplyId_args deepCopy() {
            return new deleteByReplyId_args(this);
        }

        @Override
        public void clear() {
            this.companyDTO = null;
            setReplyIdIsSet(false);
            this.replyId = 0;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.CompanyDTO getCompanyDTO() {
            return this.companyDTO;
        }

        public deleteByReplyId_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CompanyDTO companyDTO) {
            this.companyDTO = companyDTO;
            return this;
        }

        public void unsetCompanyDTO() {
            this.companyDTO = null;
        }

        /**
         * Returns true if field companyDTO is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCompanyDTO() {
            return this.companyDTO != null;
        }

        public void setCompanyDTOIsSet(boolean value) {
            if (!value) {
                this.companyDTO = null;
            }
        }

        public long getReplyId() {
            return this.replyId;
        }

        public deleteByReplyId_args setReplyId(long replyId) {
            this.replyId = replyId;
            setReplyIdIsSet(true);
            return this;
        }

        public void unsetReplyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REPLYID_ISSET_ID);
        }

        /**
         * Returns true if field replyId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetReplyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REPLYID_ISSET_ID);
        }

        public void setReplyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REPLYID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case COMPANY_DTO:
                    if (value == null) {
                        unsetCompanyDTO();
                    } else {
                        setCompanyDTO((com.aries.hermes.idl.dto.CompanyDTO) value);
                    }
                    break;

                case REPLY_ID:
                    if (value == null) {
                        unsetReplyId();
                    } else {
                        setReplyId((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_DTO:
                    return getCompanyDTO();

                case REPLY_ID:
                    return getReplyId();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_DTO:
                    return isSetCompanyDTO();
                case REPLY_ID:
                    return isSetReplyId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof deleteByReplyId_args)
                return this.equals((deleteByReplyId_args) that);
            return false;
        }

        public boolean equals(deleteByReplyId_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyDTO = true && this.isSetCompanyDTO();
            boolean that_present_companyDTO = true && that.isSetCompanyDTO();
            if (this_present_companyDTO || that_present_companyDTO) {
                if (!(this_present_companyDTO && that_present_companyDTO))
                    return false;
                if (!this.companyDTO.equals(that.companyDTO))
                    return false;
            }

            boolean this_present_replyId = true;
            boolean that_present_replyId = true;
            if (this_present_replyId || that_present_replyId) {
                if (!(this_present_replyId && that_present_replyId))
                    return false;
                if (this.replyId != that.replyId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
            if (isSetCompanyDTO())
                hashCode = hashCode * 8191 + companyDTO.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(replyId);

            return hashCode;
        }

        @Override
        public int compareTo(deleteByReplyId_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyDTO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetReplyId()).compareTo(other.isSetReplyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetReplyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replyId, other.replyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteByReplyId_args(");
            boolean first = true;

            sb.append("companyDTO:");
            if (this.companyDTO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyDTO);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("replyId:");
            sb.append(this.replyId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyDTO != null) {
                companyDTO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class deleteByReplyId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public deleteByReplyId_argsStandardScheme getScheme() {
                return new deleteByReplyId_argsStandardScheme();
            }
        }

        private static class deleteByReplyId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteByReplyId_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteByReplyId_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                                struct.companyDTO.read(iprot);
                                struct.setCompanyDTOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // REPLY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.replyId = iprot.readI64();
                                struct.setReplyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteByReplyId_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyDTO != null) {
                    oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
                    struct.companyDTO.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(REPLY_ID_FIELD_DESC);
                oprot.writeI64(struct.replyId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteByReplyId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public deleteByReplyId_argsTupleScheme getScheme() {
                return new deleteByReplyId_argsTupleScheme();
            }
        }

        private static class deleteByReplyId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteByReplyId_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteByReplyId_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyDTO()) {
                    optionals.set(0);
                }
                if (struct.isSetReplyId()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCompanyDTO()) {
                    struct.companyDTO.write(oprot);
                }
                if (struct.isSetReplyId()) {
                    oprot.writeI64(struct.replyId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteByReplyId_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                    struct.companyDTO.read(iprot);
                    struct.setCompanyDTOIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.replyId = iprot.readI64();
                    struct.setReplyIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class deleteByReplyId_result implements org.apache.thrift.TBase<deleteByReplyId_result, deleteByReplyId_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteByReplyId_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteByReplyId_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteByReplyId_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteByReplyId_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.ThriftResponse success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.ThriftResponse.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteByReplyId_result.class, metaDataMap);
        }

        public deleteByReplyId_result() {
        }

        public deleteByReplyId_result(
                com.aries.hermes.idl.dto.ThriftResponse success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteByReplyId_result(deleteByReplyId_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.aries.hermes.idl.dto.ThriftResponse(other.success);
            }
        }

        public deleteByReplyId_result deepCopy() {
            return new deleteByReplyId_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.ThriftResponse getSuccess() {
            return this.success;
        }

        public deleteByReplyId_result setSuccess(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.ThriftResponse success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.aries.hermes.idl.dto.ThriftResponse) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof deleteByReplyId_result)
                return this.equals((deleteByReplyId_result) that);
            return false;
        }

        public boolean equals(deleteByReplyId_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(deleteByReplyId_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteByReplyId_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class deleteByReplyId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public deleteByReplyId_resultStandardScheme getScheme() {
                return new deleteByReplyId_resultStandardScheme();
            }
        }

        private static class deleteByReplyId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteByReplyId_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteByReplyId_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.aries.hermes.idl.dto.ThriftResponse();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteByReplyId_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteByReplyId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public deleteByReplyId_resultTupleScheme getScheme() {
                return new deleteByReplyId_resultTupleScheme();
            }
        }

        private static class deleteByReplyId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteByReplyId_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteByReplyId_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteByReplyId_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.aries.hermes.idl.dto.ThriftResponse();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchDeleteByTopicId_args implements org.apache.thrift.TBase<batchDeleteByTopicId_args, batchDeleteByTopicId_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchDeleteByTopicId_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchDeleteByTopicId_args");

        private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.I64, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchDeleteByTopicId_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchDeleteByTopicId_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.CompanyDTO companyDTO; // required
        public long topicId; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_DTO((short) 1, "companyDTO"),
            TOPIC_ID((short) 2, "topicId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // COMPANY_DTO
                        return COMPANY_DTO;
                    case 2: // TOPIC_ID
                        return TOPIC_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __TOPICID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.CompanyDTO.class)));
            tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchDeleteByTopicId_args.class, metaDataMap);
        }

        public batchDeleteByTopicId_args() {
        }

        public batchDeleteByTopicId_args(
                com.aries.hermes.idl.dto.CompanyDTO companyDTO,
                long topicId) {
            this();
            this.companyDTO = companyDTO;
            this.topicId = topicId;
            setTopicIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchDeleteByTopicId_args(batchDeleteByTopicId_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetCompanyDTO()) {
                this.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO(other.companyDTO);
            }
            this.topicId = other.topicId;
        }

        public batchDeleteByTopicId_args deepCopy() {
            return new batchDeleteByTopicId_args(this);
        }

        @Override
        public void clear() {
            this.companyDTO = null;
            setTopicIdIsSet(false);
            this.topicId = 0;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.CompanyDTO getCompanyDTO() {
            return this.companyDTO;
        }

        public batchDeleteByTopicId_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CompanyDTO companyDTO) {
            this.companyDTO = companyDTO;
            return this;
        }

        public void unsetCompanyDTO() {
            this.companyDTO = null;
        }

        /**
         * Returns true if field companyDTO is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCompanyDTO() {
            return this.companyDTO != null;
        }

        public void setCompanyDTOIsSet(boolean value) {
            if (!value) {
                this.companyDTO = null;
            }
        }

        public long getTopicId() {
            return this.topicId;
        }

        public batchDeleteByTopicId_args setTopicId(long topicId) {
            this.topicId = topicId;
            setTopicIdIsSet(true);
            return this;
        }

        public void unsetTopicId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPICID_ISSET_ID);
        }

        /**
         * Returns true if field topicId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetTopicId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPICID_ISSET_ID);
        }

        public void setTopicIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPICID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case COMPANY_DTO:
                    if (value == null) {
                        unsetCompanyDTO();
                    } else {
                        setCompanyDTO((com.aries.hermes.idl.dto.CompanyDTO) value);
                    }
                    break;

                case TOPIC_ID:
                    if (value == null) {
                        unsetTopicId();
                    } else {
                        setTopicId((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_DTO:
                    return getCompanyDTO();

                case TOPIC_ID:
                    return getTopicId();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_DTO:
                    return isSetCompanyDTO();
                case TOPIC_ID:
                    return isSetTopicId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchDeleteByTopicId_args)
                return this.equals((batchDeleteByTopicId_args) that);
            return false;
        }

        public boolean equals(batchDeleteByTopicId_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyDTO = true && this.isSetCompanyDTO();
            boolean that_present_companyDTO = true && that.isSetCompanyDTO();
            if (this_present_companyDTO || that_present_companyDTO) {
                if (!(this_present_companyDTO && that_present_companyDTO))
                    return false;
                if (!this.companyDTO.equals(that.companyDTO))
                    return false;
            }

            boolean this_present_topicId = true;
            boolean that_present_topicId = true;
            if (this_present_topicId || that_present_topicId) {
                if (!(this_present_topicId && that_present_topicId))
                    return false;
                if (this.topicId != that.topicId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
            if (isSetCompanyDTO())
                hashCode = hashCode * 8191 + companyDTO.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(topicId);

            return hashCode;
        }

        @Override
        public int compareTo(batchDeleteByTopicId_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyDTO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTopicId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchDeleteByTopicId_args(");
            boolean first = true;

            sb.append("companyDTO:");
            if (this.companyDTO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyDTO);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("topicId:");
            sb.append(this.topicId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyDTO != null) {
                companyDTO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchDeleteByTopicId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchDeleteByTopicId_argsStandardScheme getScheme() {
                return new batchDeleteByTopicId_argsStandardScheme();
            }
        }

        private static class batchDeleteByTopicId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchDeleteByTopicId_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchDeleteByTopicId_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                                struct.companyDTO.read(iprot);
                                struct.setCompanyDTOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // TOPIC_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.topicId = iprot.readI64();
                                struct.setTopicIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchDeleteByTopicId_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyDTO != null) {
                    oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
                    struct.companyDTO.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
                oprot.writeI64(struct.topicId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchDeleteByTopicId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchDeleteByTopicId_argsTupleScheme getScheme() {
                return new batchDeleteByTopicId_argsTupleScheme();
            }
        }

        private static class batchDeleteByTopicId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchDeleteByTopicId_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchDeleteByTopicId_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyDTO()) {
                    optionals.set(0);
                }
                if (struct.isSetTopicId()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCompanyDTO()) {
                    struct.companyDTO.write(oprot);
                }
                if (struct.isSetTopicId()) {
                    oprot.writeI64(struct.topicId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchDeleteByTopicId_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                    struct.companyDTO.read(iprot);
                    struct.setCompanyDTOIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.topicId = iprot.readI64();
                    struct.setTopicIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchDeleteByTopicId_result implements org.apache.thrift.TBase<batchDeleteByTopicId_result, batchDeleteByTopicId_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchDeleteByTopicId_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchDeleteByTopicId_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchDeleteByTopicId_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchDeleteByTopicId_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.ThriftResponse success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.ThriftResponse.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchDeleteByTopicId_result.class, metaDataMap);
        }

        public batchDeleteByTopicId_result() {
        }

        public batchDeleteByTopicId_result(
                com.aries.hermes.idl.dto.ThriftResponse success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchDeleteByTopicId_result(batchDeleteByTopicId_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.aries.hermes.idl.dto.ThriftResponse(other.success);
            }
        }

        public batchDeleteByTopicId_result deepCopy() {
            return new batchDeleteByTopicId_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.ThriftResponse getSuccess() {
            return this.success;
        }

        public batchDeleteByTopicId_result setSuccess(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.ThriftResponse success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.aries.hermes.idl.dto.ThriftResponse) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchDeleteByTopicId_result)
                return this.equals((batchDeleteByTopicId_result) that);
            return false;
        }

        public boolean equals(batchDeleteByTopicId_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(batchDeleteByTopicId_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchDeleteByTopicId_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchDeleteByTopicId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchDeleteByTopicId_resultStandardScheme getScheme() {
                return new batchDeleteByTopicId_resultStandardScheme();
            }
        }

        private static class batchDeleteByTopicId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchDeleteByTopicId_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchDeleteByTopicId_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.aries.hermes.idl.dto.ThriftResponse();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchDeleteByTopicId_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchDeleteByTopicId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchDeleteByTopicId_resultTupleScheme getScheme() {
                return new batchDeleteByTopicId_resultTupleScheme();
            }
        }

        private static class batchDeleteByTopicId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchDeleteByTopicId_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchDeleteByTopicId_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchDeleteByTopicId_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.aries.hermes.idl.dto.ThriftResponse();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getReplyCount_args implements org.apache.thrift.TBase<getReplyCount_args, getReplyCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getReplyCount_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReplyCount_args");

        private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.I64, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getReplyCount_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getReplyCount_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.CompanyDTO companyDTO; // required
        public long topicId; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_DTO((short) 1, "companyDTO"),
            TOPIC_ID((short) 2, "topicId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // COMPANY_DTO
                        return COMPANY_DTO;
                    case 2: // TOPIC_ID
                        return TOPIC_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __TOPICID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.CompanyDTO.class)));
            tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReplyCount_args.class, metaDataMap);
        }

        public getReplyCount_args() {
        }

        public getReplyCount_args(
                com.aries.hermes.idl.dto.CompanyDTO companyDTO,
                long topicId) {
            this();
            this.companyDTO = companyDTO;
            this.topicId = topicId;
            setTopicIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getReplyCount_args(getReplyCount_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetCompanyDTO()) {
                this.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO(other.companyDTO);
            }
            this.topicId = other.topicId;
        }

        public getReplyCount_args deepCopy() {
            return new getReplyCount_args(this);
        }

        @Override
        public void clear() {
            this.companyDTO = null;
            setTopicIdIsSet(false);
            this.topicId = 0;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.CompanyDTO getCompanyDTO() {
            return this.companyDTO;
        }

        public getReplyCount_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CompanyDTO companyDTO) {
            this.companyDTO = companyDTO;
            return this;
        }

        public void unsetCompanyDTO() {
            this.companyDTO = null;
        }

        /**
         * Returns true if field companyDTO is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCompanyDTO() {
            return this.companyDTO != null;
        }

        public void setCompanyDTOIsSet(boolean value) {
            if (!value) {
                this.companyDTO = null;
            }
        }

        public long getTopicId() {
            return this.topicId;
        }

        public getReplyCount_args setTopicId(long topicId) {
            this.topicId = topicId;
            setTopicIdIsSet(true);
            return this;
        }

        public void unsetTopicId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPICID_ISSET_ID);
        }

        /**
         * Returns true if field topicId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetTopicId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPICID_ISSET_ID);
        }

        public void setTopicIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPICID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case COMPANY_DTO:
                    if (value == null) {
                        unsetCompanyDTO();
                    } else {
                        setCompanyDTO((com.aries.hermes.idl.dto.CompanyDTO) value);
                    }
                    break;

                case TOPIC_ID:
                    if (value == null) {
                        unsetTopicId();
                    } else {
                        setTopicId((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_DTO:
                    return getCompanyDTO();

                case TOPIC_ID:
                    return getTopicId();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_DTO:
                    return isSetCompanyDTO();
                case TOPIC_ID:
                    return isSetTopicId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getReplyCount_args)
                return this.equals((getReplyCount_args) that);
            return false;
        }

        public boolean equals(getReplyCount_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyDTO = true && this.isSetCompanyDTO();
            boolean that_present_companyDTO = true && that.isSetCompanyDTO();
            if (this_present_companyDTO || that_present_companyDTO) {
                if (!(this_present_companyDTO && that_present_companyDTO))
                    return false;
                if (!this.companyDTO.equals(that.companyDTO))
                    return false;
            }

            boolean this_present_topicId = true;
            boolean that_present_topicId = true;
            if (this_present_topicId || that_present_topicId) {
                if (!(this_present_topicId && that_present_topicId))
                    return false;
                if (this.topicId != that.topicId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
            if (isSetCompanyDTO())
                hashCode = hashCode * 8191 + companyDTO.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(topicId);

            return hashCode;
        }

        @Override
        public int compareTo(getReplyCount_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyDTO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTopicId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getReplyCount_args(");
            boolean first = true;

            sb.append("companyDTO:");
            if (this.companyDTO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyDTO);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("topicId:");
            sb.append(this.topicId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyDTO != null) {
                companyDTO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getReplyCount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getReplyCount_argsStandardScheme getScheme() {
                return new getReplyCount_argsStandardScheme();
            }
        }

        private static class getReplyCount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getReplyCount_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getReplyCount_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                                struct.companyDTO.read(iprot);
                                struct.setCompanyDTOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // TOPIC_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.topicId = iprot.readI64();
                                struct.setTopicIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getReplyCount_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyDTO != null) {
                    oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
                    struct.companyDTO.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
                oprot.writeI64(struct.topicId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getReplyCount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getReplyCount_argsTupleScheme getScheme() {
                return new getReplyCount_argsTupleScheme();
            }
        }

        private static class getReplyCount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getReplyCount_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getReplyCount_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyDTO()) {
                    optionals.set(0);
                }
                if (struct.isSetTopicId()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCompanyDTO()) {
                    struct.companyDTO.write(oprot);
                }
                if (struct.isSetTopicId()) {
                    oprot.writeI64(struct.topicId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getReplyCount_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                    struct.companyDTO.read(iprot);
                    struct.setCompanyDTOIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.topicId = iprot.readI64();
                    struct.setTopicIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getReplyCount_result implements org.apache.thrift.TBase<getReplyCount_result, getReplyCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getReplyCount_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReplyCount_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getReplyCount_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getReplyCount_resultTupleSchemeFactory();

        public long success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReplyCount_result.class, metaDataMap);
        }

        public getReplyCount_result() {
        }

        public getReplyCount_result(
                long success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getReplyCount_result(getReplyCount_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public getReplyCount_result deepCopy() {
            return new getReplyCount_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public long getSuccess() {
            return this.success;
        }

        public getReplyCount_result setSuccess(long success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getReplyCount_result)
                return this.equals((getReplyCount_result) that);
            return false;
        }

        public boolean equals(getReplyCount_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

            return hashCode;
        }

        @Override
        public int compareTo(getReplyCount_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getReplyCount_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getReplyCount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getReplyCount_resultStandardScheme getScheme() {
                return new getReplyCount_resultStandardScheme();
            }
        }

        private static class getReplyCount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getReplyCount_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getReplyCount_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.success = iprot.readI64();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getReplyCount_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI64(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getReplyCount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getReplyCount_resultTupleScheme getScheme() {
                return new getReplyCount_resultTupleScheme();
            }
        }

        private static class getReplyCount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getReplyCount_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getReplyCount_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI64(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getReplyCount_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readI64();
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
