/**
 * Autogenerated by Thrift Compiler (0.12.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.aries.hermes.idl.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-05-28")
public class TopicServer {

    public interface Iface {

        public java.lang.String ping() throws org.apache.thrift.TException;

        public com.aries.hermes.idl.dto.ThriftResponse addTopic(com.aries.hermes.idl.dto.CompanyDTO companyDTO, com.aries.hermes.idl.dto.TopicDTO topicDto) throws org.apache.thrift.TException;

        public com.aries.hermes.idl.dto.TopicThriftResponse selectTopics(com.aries.hermes.idl.dto.CompanyDTO companyDTO, com.aries.hermes.idl.dto.TopicDTO topicDto) throws org.apache.thrift.TException;

        public com.aries.hermes.idl.dto.TopicThriftResponse selectById(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id) throws org.apache.thrift.TException;

        public com.aries.hermes.idl.dto.TopicThriftResponse selectAllTopics(com.aries.hermes.idl.dto.CompanyDTO companyDTO) throws org.apache.thrift.TException;

        public com.aries.hermes.idl.dto.TopicThriftResponse batchQueryTopics(com.aries.hermes.idl.dto.CompanyDTO companyDTO, int page, int pagesize) throws org.apache.thrift.TException;

        public com.aries.hermes.idl.dto.ThriftResponse deleteById(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id) throws org.apache.thrift.TException;

        public com.aries.hermes.idl.dto.ThriftResponse updateById(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id, com.aries.hermes.idl.dto.TopicDTO topicDto) throws org.apache.thrift.TException;

        public long getTopicCount(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long categoryId) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void ping(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

        public void addTopic(com.aries.hermes.idl.dto.CompanyDTO companyDTO, com.aries.hermes.idl.dto.TopicDTO topicDto, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler) throws org.apache.thrift.TException;

        public void selectTopics(com.aries.hermes.idl.dto.CompanyDTO companyDTO, com.aries.hermes.idl.dto.TopicDTO topicDto, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.TopicThriftResponse> resultHandler) throws org.apache.thrift.TException;

        public void selectById(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.TopicThriftResponse> resultHandler) throws org.apache.thrift.TException;

        public void selectAllTopics(com.aries.hermes.idl.dto.CompanyDTO companyDTO, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.TopicThriftResponse> resultHandler) throws org.apache.thrift.TException;

        public void batchQueryTopics(com.aries.hermes.idl.dto.CompanyDTO companyDTO, int page, int pagesize, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.TopicThriftResponse> resultHandler) throws org.apache.thrift.TException;

        public void deleteById(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler) throws org.apache.thrift.TException;

        public void updateById(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id, com.aries.hermes.idl.dto.TopicDTO topicDto, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler) throws org.apache.thrift.TException;

        public void getTopicCount(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long categoryId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public java.lang.String ping() throws org.apache.thrift.TException {
            send_ping();
            return recv_ping();
        }

        public void send_ping() throws org.apache.thrift.TException {
            ping_args args = new ping_args();
            sendBase("ping", args);
        }

        public java.lang.String recv_ping() throws org.apache.thrift.TException {
            ping_result result = new ping_result();
            receiveBase(result, "ping");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
        }

        public com.aries.hermes.idl.dto.ThriftResponse addTopic(com.aries.hermes.idl.dto.CompanyDTO companyDTO, com.aries.hermes.idl.dto.TopicDTO topicDto) throws org.apache.thrift.TException {
            send_addTopic(companyDTO, topicDto);
            return recv_addTopic();
        }

        public void send_addTopic(com.aries.hermes.idl.dto.CompanyDTO companyDTO, com.aries.hermes.idl.dto.TopicDTO topicDto) throws org.apache.thrift.TException {
            addTopic_args args = new addTopic_args();
            args.setCompanyDTO(companyDTO);
            args.setTopicDto(topicDto);
            sendBase("addTopic", args);
        }

        public com.aries.hermes.idl.dto.ThriftResponse recv_addTopic() throws org.apache.thrift.TException {
            addTopic_result result = new addTopic_result();
            receiveBase(result, "addTopic");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addTopic failed: unknown result");
        }

        public com.aries.hermes.idl.dto.TopicThriftResponse selectTopics(com.aries.hermes.idl.dto.CompanyDTO companyDTO, com.aries.hermes.idl.dto.TopicDTO topicDto) throws org.apache.thrift.TException {
            send_selectTopics(companyDTO, topicDto);
            return recv_selectTopics();
        }

        public void send_selectTopics(com.aries.hermes.idl.dto.CompanyDTO companyDTO, com.aries.hermes.idl.dto.TopicDTO topicDto) throws org.apache.thrift.TException {
            selectTopics_args args = new selectTopics_args();
            args.setCompanyDTO(companyDTO);
            args.setTopicDto(topicDto);
            sendBase("selectTopics", args);
        }

        public com.aries.hermes.idl.dto.TopicThriftResponse recv_selectTopics() throws org.apache.thrift.TException {
            selectTopics_result result = new selectTopics_result();
            receiveBase(result, "selectTopics");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "selectTopics failed: unknown result");
        }

        public com.aries.hermes.idl.dto.TopicThriftResponse selectById(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id) throws org.apache.thrift.TException {
            send_selectById(companyDTO, id);
            return recv_selectById();
        }

        public void send_selectById(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id) throws org.apache.thrift.TException {
            selectById_args args = new selectById_args();
            args.setCompanyDTO(companyDTO);
            args.setId(id);
            sendBase("selectById", args);
        }

        public com.aries.hermes.idl.dto.TopicThriftResponse recv_selectById() throws org.apache.thrift.TException {
            selectById_result result = new selectById_result();
            receiveBase(result, "selectById");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "selectById failed: unknown result");
        }

        public com.aries.hermes.idl.dto.TopicThriftResponse selectAllTopics(com.aries.hermes.idl.dto.CompanyDTO companyDTO) throws org.apache.thrift.TException {
            send_selectAllTopics(companyDTO);
            return recv_selectAllTopics();
        }

        public void send_selectAllTopics(com.aries.hermes.idl.dto.CompanyDTO companyDTO) throws org.apache.thrift.TException {
            selectAllTopics_args args = new selectAllTopics_args();
            args.setCompanyDTO(companyDTO);
            sendBase("selectAllTopics", args);
        }

        public com.aries.hermes.idl.dto.TopicThriftResponse recv_selectAllTopics() throws org.apache.thrift.TException {
            selectAllTopics_result result = new selectAllTopics_result();
            receiveBase(result, "selectAllTopics");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "selectAllTopics failed: unknown result");
        }

        public com.aries.hermes.idl.dto.TopicThriftResponse batchQueryTopics(com.aries.hermes.idl.dto.CompanyDTO companyDTO, int page, int pagesize) throws org.apache.thrift.TException {
            send_batchQueryTopics(companyDTO, page, pagesize);
            return recv_batchQueryTopics();
        }

        public void send_batchQueryTopics(com.aries.hermes.idl.dto.CompanyDTO companyDTO, int page, int pagesize) throws org.apache.thrift.TException {
            batchQueryTopics_args args = new batchQueryTopics_args();
            args.setCompanyDTO(companyDTO);
            args.setPage(page);
            args.setPagesize(pagesize);
            sendBase("batchQueryTopics", args);
        }

        public com.aries.hermes.idl.dto.TopicThriftResponse recv_batchQueryTopics() throws org.apache.thrift.TException {
            batchQueryTopics_result result = new batchQueryTopics_result();
            receiveBase(result, "batchQueryTopics");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchQueryTopics failed: unknown result");
        }

        public com.aries.hermes.idl.dto.ThriftResponse deleteById(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id) throws org.apache.thrift.TException {
            send_deleteById(companyDTO, id);
            return recv_deleteById();
        }

        public void send_deleteById(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id) throws org.apache.thrift.TException {
            deleteById_args args = new deleteById_args();
            args.setCompanyDTO(companyDTO);
            args.setId(id);
            sendBase("deleteById", args);
        }

        public com.aries.hermes.idl.dto.ThriftResponse recv_deleteById() throws org.apache.thrift.TException {
            deleteById_result result = new deleteById_result();
            receiveBase(result, "deleteById");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteById failed: unknown result");
        }

        public com.aries.hermes.idl.dto.ThriftResponse updateById(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id, com.aries.hermes.idl.dto.TopicDTO topicDto) throws org.apache.thrift.TException {
            send_updateById(companyDTO, id, topicDto);
            return recv_updateById();
        }

        public void send_updateById(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id, com.aries.hermes.idl.dto.TopicDTO topicDto) throws org.apache.thrift.TException {
            updateById_args args = new updateById_args();
            args.setCompanyDTO(companyDTO);
            args.setId(id);
            args.setTopicDto(topicDto);
            sendBase("updateById", args);
        }

        public com.aries.hermes.idl.dto.ThriftResponse recv_updateById() throws org.apache.thrift.TException {
            updateById_result result = new updateById_result();
            receiveBase(result, "updateById");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateById failed: unknown result");
        }

        public long getTopicCount(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long categoryId) throws org.apache.thrift.TException {
            send_getTopicCount(companyDTO, categoryId);
            return recv_getTopicCount();
        }

        public void send_getTopicCount(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long categoryId) throws org.apache.thrift.TException {
            getTopicCount_args args = new getTopicCount_args();
            args.setCompanyDTO(companyDTO);
            args.setCategoryId(categoryId);
            sendBase("getTopicCount", args);
        }

        public long recv_getTopicCount() throws org.apache.thrift.TException {
            getTopicCount_result result = new getTopicCount_result();
            receiveBase(result, "getTopicCount");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTopicCount failed: unknown result");
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void ping(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
            public ping_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
                ping_args args = new ping_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_ping();
            }
        }

        public void addTopic(com.aries.hermes.idl.dto.CompanyDTO companyDTO, com.aries.hermes.idl.dto.TopicDTO topicDto, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            addTopic_call method_call = new addTopic_call(companyDTO, topicDto, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class addTopic_call extends org.apache.thrift.async.TAsyncMethodCall<com.aries.hermes.idl.dto.ThriftResponse> {
            private com.aries.hermes.idl.dto.CompanyDTO companyDTO;
            private com.aries.hermes.idl.dto.TopicDTO topicDto;

            public addTopic_call(com.aries.hermes.idl.dto.CompanyDTO companyDTO, com.aries.hermes.idl.dto.TopicDTO topicDto, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyDTO = companyDTO;
                this.topicDto = topicDto;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addTopic", org.apache.thrift.protocol.TMessageType.CALL, 0));
                addTopic_args args = new addTopic_args();
                args.setCompanyDTO(companyDTO);
                args.setTopicDto(topicDto);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.aries.hermes.idl.dto.ThriftResponse getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_addTopic();
            }
        }

        public void selectTopics(com.aries.hermes.idl.dto.CompanyDTO companyDTO, com.aries.hermes.idl.dto.TopicDTO topicDto, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.TopicThriftResponse> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            selectTopics_call method_call = new selectTopics_call(companyDTO, topicDto, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class selectTopics_call extends org.apache.thrift.async.TAsyncMethodCall<com.aries.hermes.idl.dto.TopicThriftResponse> {
            private com.aries.hermes.idl.dto.CompanyDTO companyDTO;
            private com.aries.hermes.idl.dto.TopicDTO topicDto;

            public selectTopics_call(com.aries.hermes.idl.dto.CompanyDTO companyDTO, com.aries.hermes.idl.dto.TopicDTO topicDto, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.TopicThriftResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyDTO = companyDTO;
                this.topicDto = topicDto;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("selectTopics", org.apache.thrift.protocol.TMessageType.CALL, 0));
                selectTopics_args args = new selectTopics_args();
                args.setCompanyDTO(companyDTO);
                args.setTopicDto(topicDto);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.aries.hermes.idl.dto.TopicThriftResponse getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_selectTopics();
            }
        }

        public void selectById(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.TopicThriftResponse> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            selectById_call method_call = new selectById_call(companyDTO, id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class selectById_call extends org.apache.thrift.async.TAsyncMethodCall<com.aries.hermes.idl.dto.TopicThriftResponse> {
            private com.aries.hermes.idl.dto.CompanyDTO companyDTO;
            private long id;

            public selectById_call(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.TopicThriftResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyDTO = companyDTO;
                this.id = id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("selectById", org.apache.thrift.protocol.TMessageType.CALL, 0));
                selectById_args args = new selectById_args();
                args.setCompanyDTO(companyDTO);
                args.setId(id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.aries.hermes.idl.dto.TopicThriftResponse getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_selectById();
            }
        }

        public void selectAllTopics(com.aries.hermes.idl.dto.CompanyDTO companyDTO, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.TopicThriftResponse> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            selectAllTopics_call method_call = new selectAllTopics_call(companyDTO, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class selectAllTopics_call extends org.apache.thrift.async.TAsyncMethodCall<com.aries.hermes.idl.dto.TopicThriftResponse> {
            private com.aries.hermes.idl.dto.CompanyDTO companyDTO;

            public selectAllTopics_call(com.aries.hermes.idl.dto.CompanyDTO companyDTO, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.TopicThriftResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyDTO = companyDTO;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("selectAllTopics", org.apache.thrift.protocol.TMessageType.CALL, 0));
                selectAllTopics_args args = new selectAllTopics_args();
                args.setCompanyDTO(companyDTO);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.aries.hermes.idl.dto.TopicThriftResponse getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_selectAllTopics();
            }
        }

        public void batchQueryTopics(com.aries.hermes.idl.dto.CompanyDTO companyDTO, int page, int pagesize, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.TopicThriftResponse> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            batchQueryTopics_call method_call = new batchQueryTopics_call(companyDTO, page, pagesize, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class batchQueryTopics_call extends org.apache.thrift.async.TAsyncMethodCall<com.aries.hermes.idl.dto.TopicThriftResponse> {
            private com.aries.hermes.idl.dto.CompanyDTO companyDTO;
            private int page;
            private int pagesize;

            public batchQueryTopics_call(com.aries.hermes.idl.dto.CompanyDTO companyDTO, int page, int pagesize, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.TopicThriftResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyDTO = companyDTO;
                this.page = page;
                this.pagesize = pagesize;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchQueryTopics", org.apache.thrift.protocol.TMessageType.CALL, 0));
                batchQueryTopics_args args = new batchQueryTopics_args();
                args.setCompanyDTO(companyDTO);
                args.setPage(page);
                args.setPagesize(pagesize);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.aries.hermes.idl.dto.TopicThriftResponse getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_batchQueryTopics();
            }
        }

        public void deleteById(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            deleteById_call method_call = new deleteById_call(companyDTO, id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class deleteById_call extends org.apache.thrift.async.TAsyncMethodCall<com.aries.hermes.idl.dto.ThriftResponse> {
            private com.aries.hermes.idl.dto.CompanyDTO companyDTO;
            private long id;

            public deleteById_call(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyDTO = companyDTO;
                this.id = id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteById", org.apache.thrift.protocol.TMessageType.CALL, 0));
                deleteById_args args = new deleteById_args();
                args.setCompanyDTO(companyDTO);
                args.setId(id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.aries.hermes.idl.dto.ThriftResponse getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_deleteById();
            }
        }

        public void updateById(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id, com.aries.hermes.idl.dto.TopicDTO topicDto, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            updateById_call method_call = new updateById_call(companyDTO, id, topicDto, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class updateById_call extends org.apache.thrift.async.TAsyncMethodCall<com.aries.hermes.idl.dto.ThriftResponse> {
            private com.aries.hermes.idl.dto.CompanyDTO companyDTO;
            private long id;
            private com.aries.hermes.idl.dto.TopicDTO topicDto;

            public updateById_call(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long id, com.aries.hermes.idl.dto.TopicDTO topicDto, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyDTO = companyDTO;
                this.id = id;
                this.topicDto = topicDto;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateById", org.apache.thrift.protocol.TMessageType.CALL, 0));
                updateById_args args = new updateById_args();
                args.setCompanyDTO(companyDTO);
                args.setId(id);
                args.setTopicDto(topicDto);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.aries.hermes.idl.dto.ThriftResponse getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_updateById();
            }
        }

        public void getTopicCount(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long categoryId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getTopicCount_call method_call = new getTopicCount_call(companyDTO, categoryId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getTopicCount_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
            private com.aries.hermes.idl.dto.CompanyDTO companyDTO;
            private long categoryId;

            public getTopicCount_call(com.aries.hermes.idl.dto.CompanyDTO companyDTO, long categoryId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyDTO = companyDTO;
                this.categoryId = categoryId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTopicCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getTopicCount_args args = new getTopicCount_args();
                args.setCompanyDTO(companyDTO);
                args.setCategoryId(categoryId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.Long getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getTopicCount();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("ping", new ping());
            processMap.put("addTopic", new addTopic());
            processMap.put("selectTopics", new selectTopics());
            processMap.put("selectById", new selectById());
            processMap.put("selectAllTopics", new selectAllTopics());
            processMap.put("batchQueryTopics", new batchQueryTopics());
            processMap.put("deleteById", new deleteById());
            processMap.put("updateById", new updateById());
            processMap.put("getTopicCount", new getTopicCount());
            return processMap;
        }

        public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
            public ping() {
                super("ping");
            }

            public ping_args getEmptyArgsInstance() {
                return new ping_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
                ping_result result = new ping_result();
                result.success = iface.ping();
                return result;
            }
        }

        public static class addTopic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addTopic_args> {
            public addTopic() {
                super("addTopic");
            }

            public addTopic_args getEmptyArgsInstance() {
                return new addTopic_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public addTopic_result getResult(I iface, addTopic_args args) throws org.apache.thrift.TException {
                addTopic_result result = new addTopic_result();
                result.success = iface.addTopic(args.companyDTO, args.topicDto);
                return result;
            }
        }

        public static class selectTopics<I extends Iface> extends org.apache.thrift.ProcessFunction<I, selectTopics_args> {
            public selectTopics() {
                super("selectTopics");
            }

            public selectTopics_args getEmptyArgsInstance() {
                return new selectTopics_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public selectTopics_result getResult(I iface, selectTopics_args args) throws org.apache.thrift.TException {
                selectTopics_result result = new selectTopics_result();
                result.success = iface.selectTopics(args.companyDTO, args.topicDto);
                return result;
            }
        }

        public static class selectById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, selectById_args> {
            public selectById() {
                super("selectById");
            }

            public selectById_args getEmptyArgsInstance() {
                return new selectById_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public selectById_result getResult(I iface, selectById_args args) throws org.apache.thrift.TException {
                selectById_result result = new selectById_result();
                result.success = iface.selectById(args.companyDTO, args.id);
                return result;
            }
        }

        public static class selectAllTopics<I extends Iface> extends org.apache.thrift.ProcessFunction<I, selectAllTopics_args> {
            public selectAllTopics() {
                super("selectAllTopics");
            }

            public selectAllTopics_args getEmptyArgsInstance() {
                return new selectAllTopics_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public selectAllTopics_result getResult(I iface, selectAllTopics_args args) throws org.apache.thrift.TException {
                selectAllTopics_result result = new selectAllTopics_result();
                result.success = iface.selectAllTopics(args.companyDTO);
                return result;
            }
        }

        public static class batchQueryTopics<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchQueryTopics_args> {
            public batchQueryTopics() {
                super("batchQueryTopics");
            }

            public batchQueryTopics_args getEmptyArgsInstance() {
                return new batchQueryTopics_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public batchQueryTopics_result getResult(I iface, batchQueryTopics_args args) throws org.apache.thrift.TException {
                batchQueryTopics_result result = new batchQueryTopics_result();
                result.success = iface.batchQueryTopics(args.companyDTO, args.page, args.pagesize);
                return result;
            }
        }

        public static class deleteById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteById_args> {
            public deleteById() {
                super("deleteById");
            }

            public deleteById_args getEmptyArgsInstance() {
                return new deleteById_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public deleteById_result getResult(I iface, deleteById_args args) throws org.apache.thrift.TException {
                deleteById_result result = new deleteById_result();
                result.success = iface.deleteById(args.companyDTO, args.id);
                return result;
            }
        }

        public static class updateById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateById_args> {
            public updateById() {
                super("updateById");
            }

            public updateById_args getEmptyArgsInstance() {
                return new updateById_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public updateById_result getResult(I iface, updateById_args args) throws org.apache.thrift.TException {
                updateById_result result = new updateById_result();
                result.success = iface.updateById(args.companyDTO, args.id, args.topicDto);
                return result;
            }
        }

        public static class getTopicCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTopicCount_args> {
            public getTopicCount() {
                super("getTopicCount");
            }

            public getTopicCount_args getEmptyArgsInstance() {
                return new getTopicCount_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public getTopicCount_result getResult(I iface, getTopicCount_args args) throws org.apache.thrift.TException {
                getTopicCount_result result = new getTopicCount_result();
                result.success = iface.getTopicCount(args.companyDTO, args.categoryId);
                result.setSuccessIsSet(true);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("ping", new ping());
            processMap.put("addTopic", new addTopic());
            processMap.put("selectTopics", new selectTopics());
            processMap.put("selectById", new selectById());
            processMap.put("selectAllTopics", new selectAllTopics());
            processMap.put("batchQueryTopics", new batchQueryTopics());
            processMap.put("deleteById", new deleteById());
            processMap.put("updateById", new updateById());
            processMap.put("getTopicCount", new getTopicCount());
            return processMap;
        }

        public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, java.lang.String> {
            public ping() {
                super("ping");
            }

            public ping_args getEmptyArgsInstance() {
                return new ping_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
                    public void onComplete(java.lang.String o) {
                        ping_result result = new ping_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        ping_result result = new ping_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
                iface.ping(resultHandler);
            }
        }

        public static class addTopic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addTopic_args, com.aries.hermes.idl.dto.ThriftResponse> {
            public addTopic() {
                super("addTopic");
            }

            public addTopic_args getEmptyArgsInstance() {
                return new addTopic_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse>() {
                    public void onComplete(com.aries.hermes.idl.dto.ThriftResponse o) {
                        addTopic_result result = new addTopic_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        addTopic_result result = new addTopic_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, addTopic_args args, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler) throws org.apache.thrift.TException {
                iface.addTopic(args.companyDTO, args.topicDto, resultHandler);
            }
        }

        public static class selectTopics<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, selectTopics_args, com.aries.hermes.idl.dto.TopicThriftResponse> {
            public selectTopics() {
                super("selectTopics");
            }

            public selectTopics_args getEmptyArgsInstance() {
                return new selectTopics_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.TopicThriftResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.TopicThriftResponse>() {
                    public void onComplete(com.aries.hermes.idl.dto.TopicThriftResponse o) {
                        selectTopics_result result = new selectTopics_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        selectTopics_result result = new selectTopics_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, selectTopics_args args, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.TopicThriftResponse> resultHandler) throws org.apache.thrift.TException {
                iface.selectTopics(args.companyDTO, args.topicDto, resultHandler);
            }
        }

        public static class selectById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, selectById_args, com.aries.hermes.idl.dto.TopicThriftResponse> {
            public selectById() {
                super("selectById");
            }

            public selectById_args getEmptyArgsInstance() {
                return new selectById_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.TopicThriftResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.TopicThriftResponse>() {
                    public void onComplete(com.aries.hermes.idl.dto.TopicThriftResponse o) {
                        selectById_result result = new selectById_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        selectById_result result = new selectById_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, selectById_args args, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.TopicThriftResponse> resultHandler) throws org.apache.thrift.TException {
                iface.selectById(args.companyDTO, args.id, resultHandler);
            }
        }

        public static class selectAllTopics<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, selectAllTopics_args, com.aries.hermes.idl.dto.TopicThriftResponse> {
            public selectAllTopics() {
                super("selectAllTopics");
            }

            public selectAllTopics_args getEmptyArgsInstance() {
                return new selectAllTopics_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.TopicThriftResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.TopicThriftResponse>() {
                    public void onComplete(com.aries.hermes.idl.dto.TopicThriftResponse o) {
                        selectAllTopics_result result = new selectAllTopics_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        selectAllTopics_result result = new selectAllTopics_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, selectAllTopics_args args, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.TopicThriftResponse> resultHandler) throws org.apache.thrift.TException {
                iface.selectAllTopics(args.companyDTO, resultHandler);
            }
        }

        public static class batchQueryTopics<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchQueryTopics_args, com.aries.hermes.idl.dto.TopicThriftResponse> {
            public batchQueryTopics() {
                super("batchQueryTopics");
            }

            public batchQueryTopics_args getEmptyArgsInstance() {
                return new batchQueryTopics_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.TopicThriftResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.TopicThriftResponse>() {
                    public void onComplete(com.aries.hermes.idl.dto.TopicThriftResponse o) {
                        batchQueryTopics_result result = new batchQueryTopics_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        batchQueryTopics_result result = new batchQueryTopics_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, batchQueryTopics_args args, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.TopicThriftResponse> resultHandler) throws org.apache.thrift.TException {
                iface.batchQueryTopics(args.companyDTO, args.page, args.pagesize, resultHandler);
            }
        }

        public static class deleteById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteById_args, com.aries.hermes.idl.dto.ThriftResponse> {
            public deleteById() {
                super("deleteById");
            }

            public deleteById_args getEmptyArgsInstance() {
                return new deleteById_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse>() {
                    public void onComplete(com.aries.hermes.idl.dto.ThriftResponse o) {
                        deleteById_result result = new deleteById_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        deleteById_result result = new deleteById_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, deleteById_args args, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler) throws org.apache.thrift.TException {
                iface.deleteById(args.companyDTO, args.id, resultHandler);
            }
        }

        public static class updateById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateById_args, com.aries.hermes.idl.dto.ThriftResponse> {
            public updateById() {
                super("updateById");
            }

            public updateById_args getEmptyArgsInstance() {
                return new updateById_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse>() {
                    public void onComplete(com.aries.hermes.idl.dto.ThriftResponse o) {
                        updateById_result result = new updateById_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        updateById_result result = new updateById_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, updateById_args args, org.apache.thrift.async.AsyncMethodCallback<com.aries.hermes.idl.dto.ThriftResponse> resultHandler) throws org.apache.thrift.TException {
                iface.updateById(args.companyDTO, args.id, args.topicDto, resultHandler);
            }
        }

        public static class getTopicCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTopicCount_args, java.lang.Long> {
            public getTopicCount() {
                super("getTopicCount");
            }

            public getTopicCount_args getEmptyArgsInstance() {
                return new getTopicCount_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() {
                    public void onComplete(java.lang.Long o) {
                        getTopicCount_result result = new getTopicCount_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getTopicCount_result result = new getTopicCount_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getTopicCount_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
                iface.getTopicCount(args.companyDTO, args.categoryId, resultHandler);
            }
        }

    }

    public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_argsTupleSchemeFactory();


        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
        }

        public ping_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ping_args(ping_args other) {
        }

        public ping_args deepCopy() {
            return new ping_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof ping_args)
                return this.equals((ping_args) that);
            return false;
        }

        public boolean equals(ping_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(ping_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class ping_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ping_argsStandardScheme getScheme() {
                return new ping_argsStandardScheme();
            }
        }

        private static class ping_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ping_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ping_argsTupleScheme getScheme() {
                return new ping_argsTupleScheme();
            }
        }

        private static class ping_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        java.lang.String success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
        }

        public ping_result() {
        }

        public ping_result(
                java.lang.String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ping_result(ping_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public ping_result deepCopy() {
            return new ping_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getSuccess() {
            return this.success;
        }

        public ping_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.String) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof ping_result)
                return this.equals((ping_result) that);
            return false;
        }

        public boolean equals(ping_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(ping_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class ping_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ping_resultStandardScheme getScheme() {
                return new ping_resultStandardScheme();
            }
        }

        private static class ping_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ping_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ping_resultTupleScheme getScheme() {
                return new ping_resultTupleScheme();
            }
        }

        private static class ping_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addTopic_args implements org.apache.thrift.TBase<addTopic_args, addTopic_args._Fields>, java.io.Serializable, Cloneable, Comparable<addTopic_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTopic_args");

        private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField TOPIC_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("topicDto", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addTopic_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addTopic_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.CompanyDTO companyDTO; // required
        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.TopicDTO topicDto; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_DTO((short) 1, "companyDTO"),
            TOPIC_DTO((short) 2, "topicDto");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // COMPANY_DTO
                        return COMPANY_DTO;
                    case 2: // TOPIC_DTO
                        return TOPIC_DTO;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.CompanyDTO.class)));
            tmpMap.put(_Fields.TOPIC_DTO, new org.apache.thrift.meta_data.FieldMetaData("topicDto", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.TopicDTO.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTopic_args.class, metaDataMap);
        }

        public addTopic_args() {
        }

        public addTopic_args(
                com.aries.hermes.idl.dto.CompanyDTO companyDTO,
                com.aries.hermes.idl.dto.TopicDTO topicDto) {
            this();
            this.companyDTO = companyDTO;
            this.topicDto = topicDto;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addTopic_args(addTopic_args other) {
            if (other.isSetCompanyDTO()) {
                this.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO(other.companyDTO);
            }
            if (other.isSetTopicDto()) {
                this.topicDto = new com.aries.hermes.idl.dto.TopicDTO(other.topicDto);
            }
        }

        public addTopic_args deepCopy() {
            return new addTopic_args(this);
        }

        @Override
        public void clear() {
            this.companyDTO = null;
            this.topicDto = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.CompanyDTO getCompanyDTO() {
            return this.companyDTO;
        }

        public addTopic_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CompanyDTO companyDTO) {
            this.companyDTO = companyDTO;
            return this;
        }

        public void unsetCompanyDTO() {
            this.companyDTO = null;
        }

        /**
         * Returns true if field companyDTO is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCompanyDTO() {
            return this.companyDTO != null;
        }

        public void setCompanyDTOIsSet(boolean value) {
            if (!value) {
                this.companyDTO = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.TopicDTO getTopicDto() {
            return this.topicDto;
        }

        public addTopic_args setTopicDto(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.TopicDTO topicDto) {
            this.topicDto = topicDto;
            return this;
        }

        public void unsetTopicDto() {
            this.topicDto = null;
        }

        /**
         * Returns true if field topicDto is set (has been assigned a value) and false otherwise
         */
        public boolean isSetTopicDto() {
            return this.topicDto != null;
        }

        public void setTopicDtoIsSet(boolean value) {
            if (!value) {
                this.topicDto = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case COMPANY_DTO:
                    if (value == null) {
                        unsetCompanyDTO();
                    } else {
                        setCompanyDTO((com.aries.hermes.idl.dto.CompanyDTO) value);
                    }
                    break;

                case TOPIC_DTO:
                    if (value == null) {
                        unsetTopicDto();
                    } else {
                        setTopicDto((com.aries.hermes.idl.dto.TopicDTO) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_DTO:
                    return getCompanyDTO();

                case TOPIC_DTO:
                    return getTopicDto();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_DTO:
                    return isSetCompanyDTO();
                case TOPIC_DTO:
                    return isSetTopicDto();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addTopic_args)
                return this.equals((addTopic_args) that);
            return false;
        }

        public boolean equals(addTopic_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyDTO = true && this.isSetCompanyDTO();
            boolean that_present_companyDTO = true && that.isSetCompanyDTO();
            if (this_present_companyDTO || that_present_companyDTO) {
                if (!(this_present_companyDTO && that_present_companyDTO))
                    return false;
                if (!this.companyDTO.equals(that.companyDTO))
                    return false;
            }

            boolean this_present_topicDto = true && this.isSetTopicDto();
            boolean that_present_topicDto = true && that.isSetTopicDto();
            if (this_present_topicDto || that_present_topicDto) {
                if (!(this_present_topicDto && that_present_topicDto))
                    return false;
                if (!this.topicDto.equals(that.topicDto))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
            if (isSetCompanyDTO())
                hashCode = hashCode * 8191 + companyDTO.hashCode();

            hashCode = hashCode * 8191 + ((isSetTopicDto()) ? 131071 : 524287);
            if (isSetTopicDto())
                hashCode = hashCode * 8191 + topicDto.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addTopic_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyDTO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetTopicDto()).compareTo(other.isSetTopicDto());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTopicDto()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicDto, other.topicDto);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addTopic_args(");
            boolean first = true;

            sb.append("companyDTO:");
            if (this.companyDTO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyDTO);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("topicDto:");
            if (this.topicDto == null) {
                sb.append("null");
            } else {
                sb.append(this.topicDto);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyDTO != null) {
                companyDTO.validate();
            }
            if (topicDto != null) {
                topicDto.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addTopic_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addTopic_argsStandardScheme getScheme() {
                return new addTopic_argsStandardScheme();
            }
        }

        private static class addTopic_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addTopic_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addTopic_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                                struct.companyDTO.read(iprot);
                                struct.setCompanyDTOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // TOPIC_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.topicDto = new com.aries.hermes.idl.dto.TopicDTO();
                                struct.topicDto.read(iprot);
                                struct.setTopicDtoIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addTopic_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyDTO != null) {
                    oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
                    struct.companyDTO.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.topicDto != null) {
                    oprot.writeFieldBegin(TOPIC_DTO_FIELD_DESC);
                    struct.topicDto.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addTopic_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addTopic_argsTupleScheme getScheme() {
                return new addTopic_argsTupleScheme();
            }
        }

        private static class addTopic_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addTopic_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addTopic_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyDTO()) {
                    optionals.set(0);
                }
                if (struct.isSetTopicDto()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCompanyDTO()) {
                    struct.companyDTO.write(oprot);
                }
                if (struct.isSetTopicDto()) {
                    struct.topicDto.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addTopic_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                    struct.companyDTO.read(iprot);
                    struct.setCompanyDTOIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.topicDto = new com.aries.hermes.idl.dto.TopicDTO();
                    struct.topicDto.read(iprot);
                    struct.setTopicDtoIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addTopic_result implements org.apache.thrift.TBase<addTopic_result, addTopic_result._Fields>, java.io.Serializable, Cloneable, Comparable<addTopic_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTopic_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addTopic_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addTopic_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.ThriftResponse success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.ThriftResponse.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTopic_result.class, metaDataMap);
        }

        public addTopic_result() {
        }

        public addTopic_result(
                com.aries.hermes.idl.dto.ThriftResponse success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addTopic_result(addTopic_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.aries.hermes.idl.dto.ThriftResponse(other.success);
            }
        }

        public addTopic_result deepCopy() {
            return new addTopic_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.ThriftResponse getSuccess() {
            return this.success;
        }

        public addTopic_result setSuccess(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.ThriftResponse success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.aries.hermes.idl.dto.ThriftResponse) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addTopic_result)
                return this.equals((addTopic_result) that);
            return false;
        }

        public boolean equals(addTopic_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addTopic_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addTopic_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addTopic_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addTopic_resultStandardScheme getScheme() {
                return new addTopic_resultStandardScheme();
            }
        }

        private static class addTopic_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addTopic_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addTopic_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.aries.hermes.idl.dto.ThriftResponse();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addTopic_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addTopic_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addTopic_resultTupleScheme getScheme() {
                return new addTopic_resultTupleScheme();
            }
        }

        private static class addTopic_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addTopic_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addTopic_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addTopic_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.aries.hermes.idl.dto.ThriftResponse();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class selectTopics_args implements org.apache.thrift.TBase<selectTopics_args, selectTopics_args._Fields>, java.io.Serializable, Cloneable, Comparable<selectTopics_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectTopics_args");

        private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField TOPIC_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("topicDto", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new selectTopics_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new selectTopics_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.CompanyDTO companyDTO; // required
        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.TopicDTO topicDto; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_DTO((short) 1, "companyDTO"),
            TOPIC_DTO((short) 2, "topicDto");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // COMPANY_DTO
                        return COMPANY_DTO;
                    case 2: // TOPIC_DTO
                        return TOPIC_DTO;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.CompanyDTO.class)));
            tmpMap.put(_Fields.TOPIC_DTO, new org.apache.thrift.meta_data.FieldMetaData("topicDto", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.TopicDTO.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectTopics_args.class, metaDataMap);
        }

        public selectTopics_args() {
        }

        public selectTopics_args(
                com.aries.hermes.idl.dto.CompanyDTO companyDTO,
                com.aries.hermes.idl.dto.TopicDTO topicDto) {
            this();
            this.companyDTO = companyDTO;
            this.topicDto = topicDto;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public selectTopics_args(selectTopics_args other) {
            if (other.isSetCompanyDTO()) {
                this.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO(other.companyDTO);
            }
            if (other.isSetTopicDto()) {
                this.topicDto = new com.aries.hermes.idl.dto.TopicDTO(other.topicDto);
            }
        }

        public selectTopics_args deepCopy() {
            return new selectTopics_args(this);
        }

        @Override
        public void clear() {
            this.companyDTO = null;
            this.topicDto = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.CompanyDTO getCompanyDTO() {
            return this.companyDTO;
        }

        public selectTopics_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CompanyDTO companyDTO) {
            this.companyDTO = companyDTO;
            return this;
        }

        public void unsetCompanyDTO() {
            this.companyDTO = null;
        }

        /**
         * Returns true if field companyDTO is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCompanyDTO() {
            return this.companyDTO != null;
        }

        public void setCompanyDTOIsSet(boolean value) {
            if (!value) {
                this.companyDTO = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.TopicDTO getTopicDto() {
            return this.topicDto;
        }

        public selectTopics_args setTopicDto(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.TopicDTO topicDto) {
            this.topicDto = topicDto;
            return this;
        }

        public void unsetTopicDto() {
            this.topicDto = null;
        }

        /**
         * Returns true if field topicDto is set (has been assigned a value) and false otherwise
         */
        public boolean isSetTopicDto() {
            return this.topicDto != null;
        }

        public void setTopicDtoIsSet(boolean value) {
            if (!value) {
                this.topicDto = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case COMPANY_DTO:
                    if (value == null) {
                        unsetCompanyDTO();
                    } else {
                        setCompanyDTO((com.aries.hermes.idl.dto.CompanyDTO) value);
                    }
                    break;

                case TOPIC_DTO:
                    if (value == null) {
                        unsetTopicDto();
                    } else {
                        setTopicDto((com.aries.hermes.idl.dto.TopicDTO) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_DTO:
                    return getCompanyDTO();

                case TOPIC_DTO:
                    return getTopicDto();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_DTO:
                    return isSetCompanyDTO();
                case TOPIC_DTO:
                    return isSetTopicDto();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof selectTopics_args)
                return this.equals((selectTopics_args) that);
            return false;
        }

        public boolean equals(selectTopics_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyDTO = true && this.isSetCompanyDTO();
            boolean that_present_companyDTO = true && that.isSetCompanyDTO();
            if (this_present_companyDTO || that_present_companyDTO) {
                if (!(this_present_companyDTO && that_present_companyDTO))
                    return false;
                if (!this.companyDTO.equals(that.companyDTO))
                    return false;
            }

            boolean this_present_topicDto = true && this.isSetTopicDto();
            boolean that_present_topicDto = true && that.isSetTopicDto();
            if (this_present_topicDto || that_present_topicDto) {
                if (!(this_present_topicDto && that_present_topicDto))
                    return false;
                if (!this.topicDto.equals(that.topicDto))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
            if (isSetCompanyDTO())
                hashCode = hashCode * 8191 + companyDTO.hashCode();

            hashCode = hashCode * 8191 + ((isSetTopicDto()) ? 131071 : 524287);
            if (isSetTopicDto())
                hashCode = hashCode * 8191 + topicDto.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(selectTopics_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyDTO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetTopicDto()).compareTo(other.isSetTopicDto());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTopicDto()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicDto, other.topicDto);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("selectTopics_args(");
            boolean first = true;

            sb.append("companyDTO:");
            if (this.companyDTO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyDTO);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("topicDto:");
            if (this.topicDto == null) {
                sb.append("null");
            } else {
                sb.append(this.topicDto);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyDTO != null) {
                companyDTO.validate();
            }
            if (topicDto != null) {
                topicDto.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class selectTopics_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public selectTopics_argsStandardScheme getScheme() {
                return new selectTopics_argsStandardScheme();
            }
        }

        private static class selectTopics_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<selectTopics_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, selectTopics_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                                struct.companyDTO.read(iprot);
                                struct.setCompanyDTOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // TOPIC_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.topicDto = new com.aries.hermes.idl.dto.TopicDTO();
                                struct.topicDto.read(iprot);
                                struct.setTopicDtoIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, selectTopics_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyDTO != null) {
                    oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
                    struct.companyDTO.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.topicDto != null) {
                    oprot.writeFieldBegin(TOPIC_DTO_FIELD_DESC);
                    struct.topicDto.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class selectTopics_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public selectTopics_argsTupleScheme getScheme() {
                return new selectTopics_argsTupleScheme();
            }
        }

        private static class selectTopics_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<selectTopics_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, selectTopics_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyDTO()) {
                    optionals.set(0);
                }
                if (struct.isSetTopicDto()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCompanyDTO()) {
                    struct.companyDTO.write(oprot);
                }
                if (struct.isSetTopicDto()) {
                    struct.topicDto.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, selectTopics_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                    struct.companyDTO.read(iprot);
                    struct.setCompanyDTOIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.topicDto = new com.aries.hermes.idl.dto.TopicDTO();
                    struct.topicDto.read(iprot);
                    struct.setTopicDtoIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class selectTopics_result implements org.apache.thrift.TBase<selectTopics_result, selectTopics_result._Fields>, java.io.Serializable, Cloneable, Comparable<selectTopics_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectTopics_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new selectTopics_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new selectTopics_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.TopicThriftResponse success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.TopicThriftResponse.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectTopics_result.class, metaDataMap);
        }

        public selectTopics_result() {
        }

        public selectTopics_result(
                com.aries.hermes.idl.dto.TopicThriftResponse success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public selectTopics_result(selectTopics_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.aries.hermes.idl.dto.TopicThriftResponse(other.success);
            }
        }

        public selectTopics_result deepCopy() {
            return new selectTopics_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.TopicThriftResponse getSuccess() {
            return this.success;
        }

        public selectTopics_result setSuccess(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.TopicThriftResponse success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.aries.hermes.idl.dto.TopicThriftResponse) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof selectTopics_result)
                return this.equals((selectTopics_result) that);
            return false;
        }

        public boolean equals(selectTopics_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(selectTopics_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("selectTopics_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class selectTopics_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public selectTopics_resultStandardScheme getScheme() {
                return new selectTopics_resultStandardScheme();
            }
        }

        private static class selectTopics_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<selectTopics_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, selectTopics_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.aries.hermes.idl.dto.TopicThriftResponse();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, selectTopics_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class selectTopics_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public selectTopics_resultTupleScheme getScheme() {
                return new selectTopics_resultTupleScheme();
            }
        }

        private static class selectTopics_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<selectTopics_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, selectTopics_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, selectTopics_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.aries.hermes.idl.dto.TopicThriftResponse();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class selectById_args implements org.apache.thrift.TBase<selectById_args, selectById_args._Fields>, java.io.Serializable, Cloneable, Comparable<selectById_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectById_args");

        private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new selectById_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new selectById_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.CompanyDTO companyDTO; // required
        public long id; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_DTO((short) 1, "companyDTO"),
            ID((short) 2, "id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // COMPANY_DTO
                        return COMPANY_DTO;
                    case 2: // ID
                        return ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.CompanyDTO.class)));
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectById_args.class, metaDataMap);
        }

        public selectById_args() {
        }

        public selectById_args(
                com.aries.hermes.idl.dto.CompanyDTO companyDTO,
                long id) {
            this();
            this.companyDTO = companyDTO;
            this.id = id;
            setIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public selectById_args(selectById_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetCompanyDTO()) {
                this.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO(other.companyDTO);
            }
            this.id = other.id;
        }

        public selectById_args deepCopy() {
            return new selectById_args(this);
        }

        @Override
        public void clear() {
            this.companyDTO = null;
            setIdIsSet(false);
            this.id = 0;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.CompanyDTO getCompanyDTO() {
            return this.companyDTO;
        }

        public selectById_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CompanyDTO companyDTO) {
            this.companyDTO = companyDTO;
            return this;
        }

        public void unsetCompanyDTO() {
            this.companyDTO = null;
        }

        /**
         * Returns true if field companyDTO is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCompanyDTO() {
            return this.companyDTO != null;
        }

        public void setCompanyDTOIsSet(boolean value) {
            if (!value) {
                this.companyDTO = null;
            }
        }

        public long getId() {
            return this.id;
        }

        public selectById_args setId(long id) {
            this.id = id;
            setIdIsSet(true);
            return this;
        }

        public void unsetId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
        }

        /**
         * Returns true if field id is set (has been assigned a value) and false otherwise
         */
        public boolean isSetId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case COMPANY_DTO:
                    if (value == null) {
                        unsetCompanyDTO();
                    } else {
                        setCompanyDTO((com.aries.hermes.idl.dto.CompanyDTO) value);
                    }
                    break;

                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_DTO:
                    return getCompanyDTO();

                case ID:
                    return getId();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_DTO:
                    return isSetCompanyDTO();
                case ID:
                    return isSetId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof selectById_args)
                return this.equals((selectById_args) that);
            return false;
        }

        public boolean equals(selectById_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyDTO = true && this.isSetCompanyDTO();
            boolean that_present_companyDTO = true && that.isSetCompanyDTO();
            if (this_present_companyDTO || that_present_companyDTO) {
                if (!(this_present_companyDTO && that_present_companyDTO))
                    return false;
                if (!this.companyDTO.equals(that.companyDTO))
                    return false;
            }

            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
            if (isSetCompanyDTO())
                hashCode = hashCode * 8191 + companyDTO.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

            return hashCode;
        }

        @Override
        public int compareTo(selectById_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyDTO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("selectById_args(");
            boolean first = true;

            sb.append("companyDTO:");
            if (this.companyDTO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyDTO);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("id:");
            sb.append(this.id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyDTO != null) {
                companyDTO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class selectById_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public selectById_argsStandardScheme getScheme() {
                return new selectById_argsStandardScheme();
            }
        }

        private static class selectById_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<selectById_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, selectById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                                struct.companyDTO.read(iprot);
                                struct.setCompanyDTOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.id = iprot.readI64();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, selectById_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyDTO != null) {
                    oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
                    struct.companyDTO.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI64(struct.id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class selectById_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public selectById_argsTupleScheme getScheme() {
                return new selectById_argsTupleScheme();
            }
        }

        private static class selectById_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<selectById_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, selectById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyDTO()) {
                    optionals.set(0);
                }
                if (struct.isSetId()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCompanyDTO()) {
                    struct.companyDTO.write(oprot);
                }
                if (struct.isSetId()) {
                    oprot.writeI64(struct.id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, selectById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                    struct.companyDTO.read(iprot);
                    struct.setCompanyDTOIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.id = iprot.readI64();
                    struct.setIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class selectById_result implements org.apache.thrift.TBase<selectById_result, selectById_result._Fields>, java.io.Serializable, Cloneable, Comparable<selectById_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectById_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new selectById_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new selectById_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.TopicThriftResponse success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.TopicThriftResponse.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectById_result.class, metaDataMap);
        }

        public selectById_result() {
        }

        public selectById_result(
                com.aries.hermes.idl.dto.TopicThriftResponse success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public selectById_result(selectById_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.aries.hermes.idl.dto.TopicThriftResponse(other.success);
            }
        }

        public selectById_result deepCopy() {
            return new selectById_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.TopicThriftResponse getSuccess() {
            return this.success;
        }

        public selectById_result setSuccess(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.TopicThriftResponse success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.aries.hermes.idl.dto.TopicThriftResponse) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof selectById_result)
                return this.equals((selectById_result) that);
            return false;
        }

        public boolean equals(selectById_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(selectById_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("selectById_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class selectById_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public selectById_resultStandardScheme getScheme() {
                return new selectById_resultStandardScheme();
            }
        }

        private static class selectById_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<selectById_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, selectById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.aries.hermes.idl.dto.TopicThriftResponse();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, selectById_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class selectById_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public selectById_resultTupleScheme getScheme() {
                return new selectById_resultTupleScheme();
            }
        }

        private static class selectById_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<selectById_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, selectById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, selectById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.aries.hermes.idl.dto.TopicThriftResponse();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class selectAllTopics_args implements org.apache.thrift.TBase<selectAllTopics_args, selectAllTopics_args._Fields>, java.io.Serializable, Cloneable, Comparable<selectAllTopics_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectAllTopics_args");

        private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new selectAllTopics_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new selectAllTopics_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.CompanyDTO companyDTO; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_DTO((short) 1, "companyDTO");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // COMPANY_DTO
                        return COMPANY_DTO;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.CompanyDTO.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectAllTopics_args.class, metaDataMap);
        }

        public selectAllTopics_args() {
        }

        public selectAllTopics_args(
                com.aries.hermes.idl.dto.CompanyDTO companyDTO) {
            this();
            this.companyDTO = companyDTO;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public selectAllTopics_args(selectAllTopics_args other) {
            if (other.isSetCompanyDTO()) {
                this.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO(other.companyDTO);
            }
        }

        public selectAllTopics_args deepCopy() {
            return new selectAllTopics_args(this);
        }

        @Override
        public void clear() {
            this.companyDTO = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.CompanyDTO getCompanyDTO() {
            return this.companyDTO;
        }

        public selectAllTopics_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CompanyDTO companyDTO) {
            this.companyDTO = companyDTO;
            return this;
        }

        public void unsetCompanyDTO() {
            this.companyDTO = null;
        }

        /**
         * Returns true if field companyDTO is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCompanyDTO() {
            return this.companyDTO != null;
        }

        public void setCompanyDTOIsSet(boolean value) {
            if (!value) {
                this.companyDTO = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case COMPANY_DTO:
                    if (value == null) {
                        unsetCompanyDTO();
                    } else {
                        setCompanyDTO((com.aries.hermes.idl.dto.CompanyDTO) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_DTO:
                    return getCompanyDTO();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_DTO:
                    return isSetCompanyDTO();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof selectAllTopics_args)
                return this.equals((selectAllTopics_args) that);
            return false;
        }

        public boolean equals(selectAllTopics_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyDTO = true && this.isSetCompanyDTO();
            boolean that_present_companyDTO = true && that.isSetCompanyDTO();
            if (this_present_companyDTO || that_present_companyDTO) {
                if (!(this_present_companyDTO && that_present_companyDTO))
                    return false;
                if (!this.companyDTO.equals(that.companyDTO))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
            if (isSetCompanyDTO())
                hashCode = hashCode * 8191 + companyDTO.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(selectAllTopics_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyDTO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("selectAllTopics_args(");
            boolean first = true;

            sb.append("companyDTO:");
            if (this.companyDTO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyDTO);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyDTO != null) {
                companyDTO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class selectAllTopics_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public selectAllTopics_argsStandardScheme getScheme() {
                return new selectAllTopics_argsStandardScheme();
            }
        }

        private static class selectAllTopics_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<selectAllTopics_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, selectAllTopics_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                                struct.companyDTO.read(iprot);
                                struct.setCompanyDTOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, selectAllTopics_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyDTO != null) {
                    oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
                    struct.companyDTO.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class selectAllTopics_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public selectAllTopics_argsTupleScheme getScheme() {
                return new selectAllTopics_argsTupleScheme();
            }
        }

        private static class selectAllTopics_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<selectAllTopics_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, selectAllTopics_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyDTO()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetCompanyDTO()) {
                    struct.companyDTO.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, selectAllTopics_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                    struct.companyDTO.read(iprot);
                    struct.setCompanyDTOIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class selectAllTopics_result implements org.apache.thrift.TBase<selectAllTopics_result, selectAllTopics_result._Fields>, java.io.Serializable, Cloneable, Comparable<selectAllTopics_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectAllTopics_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new selectAllTopics_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new selectAllTopics_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.TopicThriftResponse success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.TopicThriftResponse.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectAllTopics_result.class, metaDataMap);
        }

        public selectAllTopics_result() {
        }

        public selectAllTopics_result(
                com.aries.hermes.idl.dto.TopicThriftResponse success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public selectAllTopics_result(selectAllTopics_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.aries.hermes.idl.dto.TopicThriftResponse(other.success);
            }
        }

        public selectAllTopics_result deepCopy() {
            return new selectAllTopics_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.TopicThriftResponse getSuccess() {
            return this.success;
        }

        public selectAllTopics_result setSuccess(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.TopicThriftResponse success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.aries.hermes.idl.dto.TopicThriftResponse) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof selectAllTopics_result)
                return this.equals((selectAllTopics_result) that);
            return false;
        }

        public boolean equals(selectAllTopics_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(selectAllTopics_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("selectAllTopics_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class selectAllTopics_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public selectAllTopics_resultStandardScheme getScheme() {
                return new selectAllTopics_resultStandardScheme();
            }
        }

        private static class selectAllTopics_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<selectAllTopics_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, selectAllTopics_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.aries.hermes.idl.dto.TopicThriftResponse();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, selectAllTopics_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class selectAllTopics_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public selectAllTopics_resultTupleScheme getScheme() {
                return new selectAllTopics_resultTupleScheme();
            }
        }

        private static class selectAllTopics_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<selectAllTopics_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, selectAllTopics_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, selectAllTopics_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.aries.hermes.idl.dto.TopicThriftResponse();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchQueryTopics_args implements org.apache.thrift.TBase<batchQueryTopics_args, batchQueryTopics_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchQueryTopics_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchQueryTopics_args");

        private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short) 2);
        private static final org.apache.thrift.protocol.TField PAGESIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pagesize", org.apache.thrift.protocol.TType.I32, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchQueryTopics_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchQueryTopics_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.CompanyDTO companyDTO; // required
        public int page; // required
        public int pagesize; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_DTO((short) 1, "companyDTO"),
            PAGE((short) 2, "page"),
            PAGESIZE((short) 3, "pagesize");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // COMPANY_DTO
                        return COMPANY_DTO;
                    case 2: // PAGE
                        return PAGE;
                    case 3: // PAGESIZE
                        return PAGESIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PAGE_ISSET_ID = 0;
        private static final int __PAGESIZE_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.CompanyDTO.class)));
            tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGESIZE, new org.apache.thrift.meta_data.FieldMetaData("pagesize", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchQueryTopics_args.class, metaDataMap);
        }

        public batchQueryTopics_args() {
        }

        public batchQueryTopics_args(
                com.aries.hermes.idl.dto.CompanyDTO companyDTO,
                int page,
                int pagesize) {
            this();
            this.companyDTO = companyDTO;
            this.page = page;
            setPageIsSet(true);
            this.pagesize = pagesize;
            setPagesizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchQueryTopics_args(batchQueryTopics_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetCompanyDTO()) {
                this.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO(other.companyDTO);
            }
            this.page = other.page;
            this.pagesize = other.pagesize;
        }

        public batchQueryTopics_args deepCopy() {
            return new batchQueryTopics_args(this);
        }

        @Override
        public void clear() {
            this.companyDTO = null;
            setPageIsSet(false);
            this.page = 0;
            setPagesizeIsSet(false);
            this.pagesize = 0;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.CompanyDTO getCompanyDTO() {
            return this.companyDTO;
        }

        public batchQueryTopics_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CompanyDTO companyDTO) {
            this.companyDTO = companyDTO;
            return this;
        }

        public void unsetCompanyDTO() {
            this.companyDTO = null;
        }

        /**
         * Returns true if field companyDTO is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCompanyDTO() {
            return this.companyDTO != null;
        }

        public void setCompanyDTOIsSet(boolean value) {
            if (!value) {
                this.companyDTO = null;
            }
        }

        public int getPage() {
            return this.page;
        }

        public batchQueryTopics_args setPage(int page) {
            this.page = page;
            setPageIsSet(true);
            return this;
        }

        public void unsetPage() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        /**
         * Returns true if field page is set (has been assigned a value) and false otherwise
         */
        public boolean isSetPage() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
        }

        public void setPageIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
        }

        public int getPagesize() {
            return this.pagesize;
        }

        public batchQueryTopics_args setPagesize(int pagesize) {
            this.pagesize = pagesize;
            setPagesizeIsSet(true);
            return this;
        }

        public void unsetPagesize() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        /**
         * Returns true if field pagesize is set (has been assigned a value) and false otherwise
         */
        public boolean isSetPagesize() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        public void setPagesizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case COMPANY_DTO:
                    if (value == null) {
                        unsetCompanyDTO();
                    } else {
                        setCompanyDTO((com.aries.hermes.idl.dto.CompanyDTO) value);
                    }
                    break;

                case PAGE:
                    if (value == null) {
                        unsetPage();
                    } else {
                        setPage((java.lang.Integer) value);
                    }
                    break;

                case PAGESIZE:
                    if (value == null) {
                        unsetPagesize();
                    } else {
                        setPagesize((java.lang.Integer) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_DTO:
                    return getCompanyDTO();

                case PAGE:
                    return getPage();

                case PAGESIZE:
                    return getPagesize();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_DTO:
                    return isSetCompanyDTO();
                case PAGE:
                    return isSetPage();
                case PAGESIZE:
                    return isSetPagesize();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchQueryTopics_args)
                return this.equals((batchQueryTopics_args) that);
            return false;
        }

        public boolean equals(batchQueryTopics_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyDTO = true && this.isSetCompanyDTO();
            boolean that_present_companyDTO = true && that.isSetCompanyDTO();
            if (this_present_companyDTO || that_present_companyDTO) {
                if (!(this_present_companyDTO && that_present_companyDTO))
                    return false;
                if (!this.companyDTO.equals(that.companyDTO))
                    return false;
            }

            boolean this_present_page = true;
            boolean that_present_page = true;
            if (this_present_page || that_present_page) {
                if (!(this_present_page && that_present_page))
                    return false;
                if (this.page != that.page)
                    return false;
            }

            boolean this_present_pagesize = true;
            boolean that_present_pagesize = true;
            if (this_present_pagesize || that_present_pagesize) {
                if (!(this_present_pagesize && that_present_pagesize))
                    return false;
                if (this.pagesize != that.pagesize)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
            if (isSetCompanyDTO())
                hashCode = hashCode * 8191 + companyDTO.hashCode();

            hashCode = hashCode * 8191 + page;

            hashCode = hashCode * 8191 + pagesize;

            return hashCode;
        }

        @Override
        public int compareTo(batchQueryTopics_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyDTO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPagesize()).compareTo(other.isSetPagesize());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPagesize()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pagesize, other.pagesize);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchQueryTopics_args(");
            boolean first = true;

            sb.append("companyDTO:");
            if (this.companyDTO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyDTO);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("page:");
            sb.append(this.page);
            first = false;
            if (!first) sb.append(", ");
            sb.append("pagesize:");
            sb.append(this.pagesize);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyDTO != null) {
                companyDTO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchQueryTopics_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchQueryTopics_argsStandardScheme getScheme() {
                return new batchQueryTopics_argsStandardScheme();
            }
        }

        private static class batchQueryTopics_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchQueryTopics_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchQueryTopics_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                                struct.companyDTO.read(iprot);
                                struct.setCompanyDTOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page = iprot.readI32();
                                struct.setPageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PAGESIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pagesize = iprot.readI32();
                                struct.setPagesizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchQueryTopics_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyDTO != null) {
                    oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
                    struct.companyDTO.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(PAGE_FIELD_DESC);
                oprot.writeI32(struct.page);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGESIZE_FIELD_DESC);
                oprot.writeI32(struct.pagesize);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchQueryTopics_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchQueryTopics_argsTupleScheme getScheme() {
                return new batchQueryTopics_argsTupleScheme();
            }
        }

        private static class batchQueryTopics_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchQueryTopics_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchQueryTopics_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyDTO()) {
                    optionals.set(0);
                }
                if (struct.isSetPage()) {
                    optionals.set(1);
                }
                if (struct.isSetPagesize()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetCompanyDTO()) {
                    struct.companyDTO.write(oprot);
                }
                if (struct.isSetPage()) {
                    oprot.writeI32(struct.page);
                }
                if (struct.isSetPagesize()) {
                    oprot.writeI32(struct.pagesize);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchQueryTopics_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                    struct.companyDTO.read(iprot);
                    struct.setCompanyDTOIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.page = iprot.readI32();
                    struct.setPageIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.pagesize = iprot.readI32();
                    struct.setPagesizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchQueryTopics_result implements org.apache.thrift.TBase<batchQueryTopics_result, batchQueryTopics_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchQueryTopics_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchQueryTopics_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchQueryTopics_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchQueryTopics_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.TopicThriftResponse success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.TopicThriftResponse.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchQueryTopics_result.class, metaDataMap);
        }

        public batchQueryTopics_result() {
        }

        public batchQueryTopics_result(
                com.aries.hermes.idl.dto.TopicThriftResponse success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchQueryTopics_result(batchQueryTopics_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.aries.hermes.idl.dto.TopicThriftResponse(other.success);
            }
        }

        public batchQueryTopics_result deepCopy() {
            return new batchQueryTopics_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.TopicThriftResponse getSuccess() {
            return this.success;
        }

        public batchQueryTopics_result setSuccess(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.TopicThriftResponse success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.aries.hermes.idl.dto.TopicThriftResponse) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchQueryTopics_result)
                return this.equals((batchQueryTopics_result) that);
            return false;
        }

        public boolean equals(batchQueryTopics_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(batchQueryTopics_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchQueryTopics_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchQueryTopics_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchQueryTopics_resultStandardScheme getScheme() {
                return new batchQueryTopics_resultStandardScheme();
            }
        }

        private static class batchQueryTopics_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchQueryTopics_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchQueryTopics_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.aries.hermes.idl.dto.TopicThriftResponse();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchQueryTopics_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchQueryTopics_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchQueryTopics_resultTupleScheme getScheme() {
                return new batchQueryTopics_resultTupleScheme();
            }
        }

        private static class batchQueryTopics_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchQueryTopics_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchQueryTopics_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchQueryTopics_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.aries.hermes.idl.dto.TopicThriftResponse();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class deleteById_args implements org.apache.thrift.TBase<deleteById_args, deleteById_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteById_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteById_args");

        private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteById_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteById_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.CompanyDTO companyDTO; // required
        public long id; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_DTO((short) 1, "companyDTO"),
            ID((short) 2, "id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // COMPANY_DTO
                        return COMPANY_DTO;
                    case 2: // ID
                        return ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.CompanyDTO.class)));
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteById_args.class, metaDataMap);
        }

        public deleteById_args() {
        }

        public deleteById_args(
                com.aries.hermes.idl.dto.CompanyDTO companyDTO,
                long id) {
            this();
            this.companyDTO = companyDTO;
            this.id = id;
            setIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteById_args(deleteById_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetCompanyDTO()) {
                this.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO(other.companyDTO);
            }
            this.id = other.id;
        }

        public deleteById_args deepCopy() {
            return new deleteById_args(this);
        }

        @Override
        public void clear() {
            this.companyDTO = null;
            setIdIsSet(false);
            this.id = 0;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.CompanyDTO getCompanyDTO() {
            return this.companyDTO;
        }

        public deleteById_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CompanyDTO companyDTO) {
            this.companyDTO = companyDTO;
            return this;
        }

        public void unsetCompanyDTO() {
            this.companyDTO = null;
        }

        /**
         * Returns true if field companyDTO is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCompanyDTO() {
            return this.companyDTO != null;
        }

        public void setCompanyDTOIsSet(boolean value) {
            if (!value) {
                this.companyDTO = null;
            }
        }

        public long getId() {
            return this.id;
        }

        public deleteById_args setId(long id) {
            this.id = id;
            setIdIsSet(true);
            return this;
        }

        public void unsetId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
        }

        /**
         * Returns true if field id is set (has been assigned a value) and false otherwise
         */
        public boolean isSetId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case COMPANY_DTO:
                    if (value == null) {
                        unsetCompanyDTO();
                    } else {
                        setCompanyDTO((com.aries.hermes.idl.dto.CompanyDTO) value);
                    }
                    break;

                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_DTO:
                    return getCompanyDTO();

                case ID:
                    return getId();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_DTO:
                    return isSetCompanyDTO();
                case ID:
                    return isSetId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof deleteById_args)
                return this.equals((deleteById_args) that);
            return false;
        }

        public boolean equals(deleteById_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyDTO = true && this.isSetCompanyDTO();
            boolean that_present_companyDTO = true && that.isSetCompanyDTO();
            if (this_present_companyDTO || that_present_companyDTO) {
                if (!(this_present_companyDTO && that_present_companyDTO))
                    return false;
                if (!this.companyDTO.equals(that.companyDTO))
                    return false;
            }

            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
            if (isSetCompanyDTO())
                hashCode = hashCode * 8191 + companyDTO.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

            return hashCode;
        }

        @Override
        public int compareTo(deleteById_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyDTO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteById_args(");
            boolean first = true;

            sb.append("companyDTO:");
            if (this.companyDTO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyDTO);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("id:");
            sb.append(this.id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyDTO != null) {
                companyDTO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class deleteById_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public deleteById_argsStandardScheme getScheme() {
                return new deleteById_argsStandardScheme();
            }
        }

        private static class deleteById_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteById_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                                struct.companyDTO.read(iprot);
                                struct.setCompanyDTOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.id = iprot.readI64();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteById_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyDTO != null) {
                    oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
                    struct.companyDTO.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI64(struct.id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteById_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public deleteById_argsTupleScheme getScheme() {
                return new deleteById_argsTupleScheme();
            }
        }

        private static class deleteById_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteById_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyDTO()) {
                    optionals.set(0);
                }
                if (struct.isSetId()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCompanyDTO()) {
                    struct.companyDTO.write(oprot);
                }
                if (struct.isSetId()) {
                    oprot.writeI64(struct.id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                    struct.companyDTO.read(iprot);
                    struct.setCompanyDTOIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.id = iprot.readI64();
                    struct.setIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class deleteById_result implements org.apache.thrift.TBase<deleteById_result, deleteById_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteById_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteById_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteById_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteById_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.ThriftResponse success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.ThriftResponse.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteById_result.class, metaDataMap);
        }

        public deleteById_result() {
        }

        public deleteById_result(
                com.aries.hermes.idl.dto.ThriftResponse success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteById_result(deleteById_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.aries.hermes.idl.dto.ThriftResponse(other.success);
            }
        }

        public deleteById_result deepCopy() {
            return new deleteById_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.ThriftResponse getSuccess() {
            return this.success;
        }

        public deleteById_result setSuccess(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.ThriftResponse success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.aries.hermes.idl.dto.ThriftResponse) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof deleteById_result)
                return this.equals((deleteById_result) that);
            return false;
        }

        public boolean equals(deleteById_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(deleteById_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteById_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class deleteById_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public deleteById_resultStandardScheme getScheme() {
                return new deleteById_resultStandardScheme();
            }
        }

        private static class deleteById_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteById_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.aries.hermes.idl.dto.ThriftResponse();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteById_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteById_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public deleteById_resultTupleScheme getScheme() {
                return new deleteById_resultTupleScheme();
            }
        }

        private static class deleteById_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteById_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.aries.hermes.idl.dto.ThriftResponse();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updateById_args implements org.apache.thrift.TBase<updateById_args, updateById_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateById_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateById_args");

        private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short) 2);
        private static final org.apache.thrift.protocol.TField TOPIC_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("topicDto", org.apache.thrift.protocol.TType.STRUCT, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateById_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateById_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.CompanyDTO companyDTO; // required
        public long id; // required
        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.TopicDTO topicDto; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_DTO((short) 1, "companyDTO"),
            ID((short) 2, "id"),
            TOPIC_DTO((short) 3, "topicDto");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // COMPANY_DTO
                        return COMPANY_DTO;
                    case 2: // ID
                        return ID;
                    case 3: // TOPIC_DTO
                        return TOPIC_DTO;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.CompanyDTO.class)));
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.TOPIC_DTO, new org.apache.thrift.meta_data.FieldMetaData("topicDto", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.TopicDTO.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateById_args.class, metaDataMap);
        }

        public updateById_args() {
        }

        public updateById_args(
                com.aries.hermes.idl.dto.CompanyDTO companyDTO,
                long id,
                com.aries.hermes.idl.dto.TopicDTO topicDto) {
            this();
            this.companyDTO = companyDTO;
            this.id = id;
            setIdIsSet(true);
            this.topicDto = topicDto;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateById_args(updateById_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetCompanyDTO()) {
                this.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO(other.companyDTO);
            }
            this.id = other.id;
            if (other.isSetTopicDto()) {
                this.topicDto = new com.aries.hermes.idl.dto.TopicDTO(other.topicDto);
            }
        }

        public updateById_args deepCopy() {
            return new updateById_args(this);
        }

        @Override
        public void clear() {
            this.companyDTO = null;
            setIdIsSet(false);
            this.id = 0;
            this.topicDto = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.CompanyDTO getCompanyDTO() {
            return this.companyDTO;
        }

        public updateById_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CompanyDTO companyDTO) {
            this.companyDTO = companyDTO;
            return this;
        }

        public void unsetCompanyDTO() {
            this.companyDTO = null;
        }

        /**
         * Returns true if field companyDTO is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCompanyDTO() {
            return this.companyDTO != null;
        }

        public void setCompanyDTOIsSet(boolean value) {
            if (!value) {
                this.companyDTO = null;
            }
        }

        public long getId() {
            return this.id;
        }

        public updateById_args setId(long id) {
            this.id = id;
            setIdIsSet(true);
            return this;
        }

        public void unsetId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
        }

        /**
         * Returns true if field id is set (has been assigned a value) and false otherwise
         */
        public boolean isSetId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.TopicDTO getTopicDto() {
            return this.topicDto;
        }

        public updateById_args setTopicDto(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.TopicDTO topicDto) {
            this.topicDto = topicDto;
            return this;
        }

        public void unsetTopicDto() {
            this.topicDto = null;
        }

        /**
         * Returns true if field topicDto is set (has been assigned a value) and false otherwise
         */
        public boolean isSetTopicDto() {
            return this.topicDto != null;
        }

        public void setTopicDtoIsSet(boolean value) {
            if (!value) {
                this.topicDto = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case COMPANY_DTO:
                    if (value == null) {
                        unsetCompanyDTO();
                    } else {
                        setCompanyDTO((com.aries.hermes.idl.dto.CompanyDTO) value);
                    }
                    break;

                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((java.lang.Long) value);
                    }
                    break;

                case TOPIC_DTO:
                    if (value == null) {
                        unsetTopicDto();
                    } else {
                        setTopicDto((com.aries.hermes.idl.dto.TopicDTO) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_DTO:
                    return getCompanyDTO();

                case ID:
                    return getId();

                case TOPIC_DTO:
                    return getTopicDto();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_DTO:
                    return isSetCompanyDTO();
                case ID:
                    return isSetId();
                case TOPIC_DTO:
                    return isSetTopicDto();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updateById_args)
                return this.equals((updateById_args) that);
            return false;
        }

        public boolean equals(updateById_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyDTO = true && this.isSetCompanyDTO();
            boolean that_present_companyDTO = true && that.isSetCompanyDTO();
            if (this_present_companyDTO || that_present_companyDTO) {
                if (!(this_present_companyDTO && that_present_companyDTO))
                    return false;
                if (!this.companyDTO.equals(that.companyDTO))
                    return false;
            }

            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            boolean this_present_topicDto = true && this.isSetTopicDto();
            boolean that_present_topicDto = true && that.isSetTopicDto();
            if (this_present_topicDto || that_present_topicDto) {
                if (!(this_present_topicDto && that_present_topicDto))
                    return false;
                if (!this.topicDto.equals(that.topicDto))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
            if (isSetCompanyDTO())
                hashCode = hashCode * 8191 + companyDTO.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

            hashCode = hashCode * 8191 + ((isSetTopicDto()) ? 131071 : 524287);
            if (isSetTopicDto())
                hashCode = hashCode * 8191 + topicDto.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updateById_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyDTO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetTopicDto()).compareTo(other.isSetTopicDto());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTopicDto()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicDto, other.topicDto);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updateById_args(");
            boolean first = true;

            sb.append("companyDTO:");
            if (this.companyDTO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyDTO);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("id:");
            sb.append(this.id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("topicDto:");
            if (this.topicDto == null) {
                sb.append("null");
            } else {
                sb.append(this.topicDto);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyDTO != null) {
                companyDTO.validate();
            }
            if (topicDto != null) {
                topicDto.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateById_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateById_argsStandardScheme getScheme() {
                return new updateById_argsStandardScheme();
            }
        }

        private static class updateById_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateById_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                                struct.companyDTO.read(iprot);
                                struct.setCompanyDTOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.id = iprot.readI64();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TOPIC_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.topicDto = new com.aries.hermes.idl.dto.TopicDTO();
                                struct.topicDto.read(iprot);
                                struct.setTopicDtoIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateById_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyDTO != null) {
                    oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
                    struct.companyDTO.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI64(struct.id);
                oprot.writeFieldEnd();
                if (struct.topicDto != null) {
                    oprot.writeFieldBegin(TOPIC_DTO_FIELD_DESC);
                    struct.topicDto.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateById_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateById_argsTupleScheme getScheme() {
                return new updateById_argsTupleScheme();
            }
        }

        private static class updateById_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateById_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyDTO()) {
                    optionals.set(0);
                }
                if (struct.isSetId()) {
                    optionals.set(1);
                }
                if (struct.isSetTopicDto()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetCompanyDTO()) {
                    struct.companyDTO.write(oprot);
                }
                if (struct.isSetId()) {
                    oprot.writeI64(struct.id);
                }
                if (struct.isSetTopicDto()) {
                    struct.topicDto.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                    struct.companyDTO.read(iprot);
                    struct.setCompanyDTOIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.id = iprot.readI64();
                    struct.setIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.topicDto = new com.aries.hermes.idl.dto.TopicDTO();
                    struct.topicDto.read(iprot);
                    struct.setTopicDtoIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updateById_result implements org.apache.thrift.TBase<updateById_result, updateById_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateById_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateById_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateById_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateById_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.ThriftResponse success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.ThriftResponse.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateById_result.class, metaDataMap);
        }

        public updateById_result() {
        }

        public updateById_result(
                com.aries.hermes.idl.dto.ThriftResponse success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateById_result(updateById_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.aries.hermes.idl.dto.ThriftResponse(other.success);
            }
        }

        public updateById_result deepCopy() {
            return new updateById_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.ThriftResponse getSuccess() {
            return this.success;
        }

        public updateById_result setSuccess(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.ThriftResponse success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.aries.hermes.idl.dto.ThriftResponse) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updateById_result)
                return this.equals((updateById_result) that);
            return false;
        }

        public boolean equals(updateById_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updateById_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updateById_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateById_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateById_resultStandardScheme getScheme() {
                return new updateById_resultStandardScheme();
            }
        }

        private static class updateById_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateById_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.aries.hermes.idl.dto.ThriftResponse();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateById_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateById_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateById_resultTupleScheme getScheme() {
                return new updateById_resultTupleScheme();
            }
        }

        private static class updateById_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateById_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.aries.hermes.idl.dto.ThriftResponse();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getTopicCount_args implements org.apache.thrift.TBase<getTopicCount_args, getTopicCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTopicCount_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTopicCount_args");

        private static final org.apache.thrift.protocol.TField COMPANY_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyDTO", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.I64, (short) 2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTopicCount_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTopicCount_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        com.aries.hermes.idl.dto.CompanyDTO companyDTO; // required
        public long categoryId; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_DTO((short) 1, "companyDTO"),
            CATEGORY_ID((short) 2, "categoryId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // COMPANY_DTO
                        return COMPANY_DTO;
                    case 2: // CATEGORY_ID
                        return CATEGORY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __CATEGORYID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_DTO, new org.apache.thrift.meta_data.FieldMetaData("companyDTO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aries.hermes.idl.dto.CompanyDTO.class)));
            tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTopicCount_args.class, metaDataMap);
        }

        public getTopicCount_args() {
        }

        public getTopicCount_args(
                com.aries.hermes.idl.dto.CompanyDTO companyDTO,
                long categoryId) {
            this();
            this.companyDTO = companyDTO;
            this.categoryId = categoryId;
            setCategoryIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTopicCount_args(getTopicCount_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetCompanyDTO()) {
                this.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO(other.companyDTO);
            }
            this.categoryId = other.categoryId;
        }

        public getTopicCount_args deepCopy() {
            return new getTopicCount_args(this);
        }

        @Override
        public void clear() {
            this.companyDTO = null;
            setCategoryIdIsSet(false);
            this.categoryId = 0;
        }

        @org.apache.thrift.annotation.Nullable
        public com.aries.hermes.idl.dto.CompanyDTO getCompanyDTO() {
            return this.companyDTO;
        }

        public getTopicCount_args setCompanyDTO(@org.apache.thrift.annotation.Nullable com.aries.hermes.idl.dto.CompanyDTO companyDTO) {
            this.companyDTO = companyDTO;
            return this;
        }

        public void unsetCompanyDTO() {
            this.companyDTO = null;
        }

        /**
         * Returns true if field companyDTO is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCompanyDTO() {
            return this.companyDTO != null;
        }

        public void setCompanyDTOIsSet(boolean value) {
            if (!value) {
                this.companyDTO = null;
            }
        }

        public long getCategoryId() {
            return this.categoryId;
        }

        public getTopicCount_args setCategoryId(long categoryId) {
            this.categoryId = categoryId;
            setCategoryIdIsSet(true);
            return this;
        }

        public void unsetCategoryId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
        }

        /**
         * Returns true if field categoryId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCategoryId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
        }

        public void setCategoryIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CATEGORYID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case COMPANY_DTO:
                    if (value == null) {
                        unsetCompanyDTO();
                    } else {
                        setCompanyDTO((com.aries.hermes.idl.dto.CompanyDTO) value);
                    }
                    break;

                case CATEGORY_ID:
                    if (value == null) {
                        unsetCategoryId();
                    } else {
                        setCategoryId((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_DTO:
                    return getCompanyDTO();

                case CATEGORY_ID:
                    return getCategoryId();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_DTO:
                    return isSetCompanyDTO();
                case CATEGORY_ID:
                    return isSetCategoryId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getTopicCount_args)
                return this.equals((getTopicCount_args) that);
            return false;
        }

        public boolean equals(getTopicCount_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyDTO = true && this.isSetCompanyDTO();
            boolean that_present_companyDTO = true && that.isSetCompanyDTO();
            if (this_present_companyDTO || that_present_companyDTO) {
                if (!(this_present_companyDTO && that_present_companyDTO))
                    return false;
                if (!this.companyDTO.equals(that.companyDTO))
                    return false;
            }

            boolean this_present_categoryId = true;
            boolean that_present_categoryId = true;
            if (this_present_categoryId || that_present_categoryId) {
                if (!(this_present_categoryId && that_present_categoryId))
                    return false;
                if (this.categoryId != that.categoryId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyDTO()) ? 131071 : 524287);
            if (isSetCompanyDTO())
                hashCode = hashCode * 8191 + companyDTO.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(categoryId);

            return hashCode;
        }

        @Override
        public int compareTo(getTopicCount_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyDTO()).compareTo(other.isSetCompanyDTO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyDTO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyDTO, other.companyDTO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCategoryId()).compareTo(other.isSetCategoryId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCategoryId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, other.categoryId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getTopicCount_args(");
            boolean first = true;

            sb.append("companyDTO:");
            if (this.companyDTO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyDTO);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("categoryId:");
            sb.append(this.categoryId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyDTO != null) {
                companyDTO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getTopicCount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTopicCount_argsStandardScheme getScheme() {
                return new getTopicCount_argsStandardScheme();
            }
        }

        private static class getTopicCount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTopicCount_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getTopicCount_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_DTO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                                struct.companyDTO.read(iprot);
                                struct.setCompanyDTOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // CATEGORY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.categoryId = iprot.readI64();
                                struct.setCategoryIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getTopicCount_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyDTO != null) {
                    oprot.writeFieldBegin(COMPANY_DTO_FIELD_DESC);
                    struct.companyDTO.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
                oprot.writeI64(struct.categoryId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getTopicCount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTopicCount_argsTupleScheme getScheme() {
                return new getTopicCount_argsTupleScheme();
            }
        }

        private static class getTopicCount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTopicCount_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getTopicCount_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyDTO()) {
                    optionals.set(0);
                }
                if (struct.isSetCategoryId()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCompanyDTO()) {
                    struct.companyDTO.write(oprot);
                }
                if (struct.isSetCategoryId()) {
                    oprot.writeI64(struct.categoryId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getTopicCount_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.companyDTO = new com.aries.hermes.idl.dto.CompanyDTO();
                    struct.companyDTO.read(iprot);
                    struct.setCompanyDTOIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.categoryId = iprot.readI64();
                    struct.setCategoryIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getTopicCount_result implements org.apache.thrift.TBase<getTopicCount_result, getTopicCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTopicCount_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTopicCount_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTopicCount_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTopicCount_resultTupleSchemeFactory();

        public long success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTopicCount_result.class, metaDataMap);
        }

        public getTopicCount_result() {
        }

        public getTopicCount_result(
                long success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTopicCount_result(getTopicCount_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public getTopicCount_result deepCopy() {
            return new getTopicCount_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public long getSuccess() {
            return this.success;
        }

        public getTopicCount_result setSuccess(long success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.Long) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getTopicCount_result)
                return this.equals((getTopicCount_result) that);
            return false;
        }

        public boolean equals(getTopicCount_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

            return hashCode;
        }

        @Override
        public int compareTo(getTopicCount_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getTopicCount_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getTopicCount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTopicCount_resultStandardScheme getScheme() {
                return new getTopicCount_resultStandardScheme();
            }
        }

        private static class getTopicCount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTopicCount_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getTopicCount_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.success = iprot.readI64();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getTopicCount_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI64(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getTopicCount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTopicCount_resultTupleScheme getScheme() {
                return new getTopicCount_resultTupleScheme();
            }
        }

        private static class getTopicCount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTopicCount_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getTopicCount_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI64(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getTopicCount_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readI64();
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
