/**
 * Autogenerated by Thrift Compiler (0.12.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.aries.hermes.idl.dto;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-05-28")
public class SubReplyDTO implements org.apache.thrift.TBase<SubReplyDTO, SubReplyDTO._Fields>, java.io.Serializable, Cloneable, Comparable<SubReplyDTO> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SubReplyDTO");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short) 1);
    private static final org.apache.thrift.protocol.TField REPLY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("replyId", org.apache.thrift.protocol.TType.I64, (short) 2);
    private static final org.apache.thrift.protocol.TField SENDER_GAEA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("senderGaeaId", org.apache.thrift.protocol.TType.I64, (short) 3);
    private static final org.apache.thrift.protocol.TField RECEIVER_GAEA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("receiverGaeaId", org.apache.thrift.protocol.TType.I64, (short) 4);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short) 5);
    private static final org.apache.thrift.protocol.TField INSERT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("insertTime", org.apache.thrift.protocol.TType.STRING, (short) 6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SubReplyDTOStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SubReplyDTOTupleSchemeFactory();

    public long id; // required
    public long replyId; // required
    public long senderGaeaId; // required
    public long receiverGaeaId; // required
    public @org.apache.thrift.annotation.Nullable
    java.lang.String content; // required
    public @org.apache.thrift.annotation.Nullable
    java.lang.String insertTime; // optional

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ID((short) 1, "id"),
        REPLY_ID((short) 2, "replyId"),
        SENDER_GAEA_ID((short) 3, "senderGaeaId"),
        RECEIVER_GAEA_ID((short) 4, "receiverGaeaId"),
        CONTENT((short) 5, "content"),
        INSERT_TIME((short) 6, "insertTime");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // ID
                    return ID;
                case 2: // REPLY_ID
                    return REPLY_ID;
                case 3: // SENDER_GAEA_ID
                    return SENDER_GAEA_ID;
                case 4: // RECEIVER_GAEA_ID
                    return RECEIVER_GAEA_ID;
                case 5: // CONTENT
                    return CONTENT;
                case 6: // INSERT_TIME
                    return INSERT_TIME;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private static final int __REPLYID_ISSET_ID = 1;
    private static final int __SENDERGAEAID_ISSET_ID = 2;
    private static final int __RECEIVERGAEAID_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.INSERT_TIME};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.REPLY_ID, new org.apache.thrift.meta_data.FieldMetaData("replyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.SENDER_GAEA_ID, new org.apache.thrift.meta_data.FieldMetaData("senderGaeaId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.RECEIVER_GAEA_ID, new org.apache.thrift.meta_data.FieldMetaData("receiverGaeaId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.INSERT_TIME, new org.apache.thrift.meta_data.FieldMetaData("insertTime", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SubReplyDTO.class, metaDataMap);
    }

    public SubReplyDTO() {
    }

    public SubReplyDTO(
            long id,
            long replyId,
            long senderGaeaId,
            long receiverGaeaId,
            java.lang.String content) {
        this();
        this.id = id;
        setIdIsSet(true);
        this.replyId = replyId;
        setReplyIdIsSet(true);
        this.senderGaeaId = senderGaeaId;
        setSenderGaeaIdIsSet(true);
        this.receiverGaeaId = receiverGaeaId;
        setReceiverGaeaIdIsSet(true);
        this.content = content;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SubReplyDTO(SubReplyDTO other) {
        __isset_bitfield = other.__isset_bitfield;
        this.id = other.id;
        this.replyId = other.replyId;
        this.senderGaeaId = other.senderGaeaId;
        this.receiverGaeaId = other.receiverGaeaId;
        if (other.isSetContent()) {
            this.content = other.content;
        }
        if (other.isSetInsertTime()) {
            this.insertTime = other.insertTime;
        }
    }

    public SubReplyDTO deepCopy() {
        return new SubReplyDTO(this);
    }

    @Override
    public void clear() {
        setIdIsSet(false);
        this.id = 0;
        setReplyIdIsSet(false);
        this.replyId = 0;
        setSenderGaeaIdIsSet(false);
        this.senderGaeaId = 0;
        setReceiverGaeaIdIsSet(false);
        this.receiverGaeaId = 0;
        this.content = null;
        this.insertTime = null;
    }

    public long getId() {
        return this.id;
    }

    public SubReplyDTO setId(long id) {
        this.id = id;
        setIdIsSet(true);
        return this;
    }

    public void unsetId() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /**
     * Returns true if field id is set (has been assigned a value) and false otherwise
     */
    public boolean isSetId() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public long getReplyId() {
        return this.replyId;
    }

    public SubReplyDTO setReplyId(long replyId) {
        this.replyId = replyId;
        setReplyIdIsSet(true);
        return this;
    }

    public void unsetReplyId() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REPLYID_ISSET_ID);
    }

    /**
     * Returns true if field replyId is set (has been assigned a value) and false otherwise
     */
    public boolean isSetReplyId() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REPLYID_ISSET_ID);
    }

    public void setReplyIdIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REPLYID_ISSET_ID, value);
    }

    public long getSenderGaeaId() {
        return this.senderGaeaId;
    }

    public SubReplyDTO setSenderGaeaId(long senderGaeaId) {
        this.senderGaeaId = senderGaeaId;
        setSenderGaeaIdIsSet(true);
        return this;
    }

    public void unsetSenderGaeaId() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SENDERGAEAID_ISSET_ID);
    }

    /**
     * Returns true if field senderGaeaId is set (has been assigned a value) and false otherwise
     */
    public boolean isSetSenderGaeaId() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SENDERGAEAID_ISSET_ID);
    }

    public void setSenderGaeaIdIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SENDERGAEAID_ISSET_ID, value);
    }

    public long getReceiverGaeaId() {
        return this.receiverGaeaId;
    }

    public SubReplyDTO setReceiverGaeaId(long receiverGaeaId) {
        this.receiverGaeaId = receiverGaeaId;
        setReceiverGaeaIdIsSet(true);
        return this;
    }

    public void unsetReceiverGaeaId() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECEIVERGAEAID_ISSET_ID);
    }

    /**
     * Returns true if field receiverGaeaId is set (has been assigned a value) and false otherwise
     */
    public boolean isSetReceiverGaeaId() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECEIVERGAEAID_ISSET_ID);
    }

    public void setReceiverGaeaIdIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECEIVERGAEAID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getContent() {
        return this.content;
    }

    public SubReplyDTO setContent(@org.apache.thrift.annotation.Nullable java.lang.String content) {
        this.content = content;
        return this;
    }

    public void unsetContent() {
        this.content = null;
    }

    /**
     * Returns true if field content is set (has been assigned a value) and false otherwise
     */
    public boolean isSetContent() {
        return this.content != null;
    }

    public void setContentIsSet(boolean value) {
        if (!value) {
            this.content = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getInsertTime() {
        return this.insertTime;
    }

    public SubReplyDTO setInsertTime(@org.apache.thrift.annotation.Nullable java.lang.String insertTime) {
        this.insertTime = insertTime;
        return this;
    }

    public void unsetInsertTime() {
        this.insertTime = null;
    }

    /**
     * Returns true if field insertTime is set (has been assigned a value) and false otherwise
     */
    public boolean isSetInsertTime() {
        return this.insertTime != null;
    }

    public void setInsertTimeIsSet(boolean value) {
        if (!value) {
            this.insertTime = null;
        }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case ID:
                if (value == null) {
                    unsetId();
                } else {
                    setId((java.lang.Long) value);
                }
                break;

            case REPLY_ID:
                if (value == null) {
                    unsetReplyId();
                } else {
                    setReplyId((java.lang.Long) value);
                }
                break;

            case SENDER_GAEA_ID:
                if (value == null) {
                    unsetSenderGaeaId();
                } else {
                    setSenderGaeaId((java.lang.Long) value);
                }
                break;

            case RECEIVER_GAEA_ID:
                if (value == null) {
                    unsetReceiverGaeaId();
                } else {
                    setReceiverGaeaId((java.lang.Long) value);
                }
                break;

            case CONTENT:
                if (value == null) {
                    unsetContent();
                } else {
                    setContent((java.lang.String) value);
                }
                break;

            case INSERT_TIME:
                if (value == null) {
                    unsetInsertTime();
                } else {
                    setInsertTime((java.lang.String) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case ID:
                return getId();

            case REPLY_ID:
                return getReplyId();

            case SENDER_GAEA_ID:
                return getSenderGaeaId();

            case RECEIVER_GAEA_ID:
                return getReceiverGaeaId();

            case CONTENT:
                return getContent();

            case INSERT_TIME:
                return getInsertTime();

        }
        throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case ID:
                return isSetId();
            case REPLY_ID:
                return isSetReplyId();
            case SENDER_GAEA_ID:
                return isSetSenderGaeaId();
            case RECEIVER_GAEA_ID:
                return isSetReceiverGaeaId();
            case CONTENT:
                return isSetContent();
            case INSERT_TIME:
                return isSetInsertTime();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that == null)
            return false;
        if (that instanceof SubReplyDTO)
            return this.equals((SubReplyDTO) that);
        return false;
    }

    public boolean equals(SubReplyDTO that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_id = true;
        boolean that_present_id = true;
        if (this_present_id || that_present_id) {
            if (!(this_present_id && that_present_id))
                return false;
            if (this.id != that.id)
                return false;
        }

        boolean this_present_replyId = true;
        boolean that_present_replyId = true;
        if (this_present_replyId || that_present_replyId) {
            if (!(this_present_replyId && that_present_replyId))
                return false;
            if (this.replyId != that.replyId)
                return false;
        }

        boolean this_present_senderGaeaId = true;
        boolean that_present_senderGaeaId = true;
        if (this_present_senderGaeaId || that_present_senderGaeaId) {
            if (!(this_present_senderGaeaId && that_present_senderGaeaId))
                return false;
            if (this.senderGaeaId != that.senderGaeaId)
                return false;
        }

        boolean this_present_receiverGaeaId = true;
        boolean that_present_receiverGaeaId = true;
        if (this_present_receiverGaeaId || that_present_receiverGaeaId) {
            if (!(this_present_receiverGaeaId && that_present_receiverGaeaId))
                return false;
            if (this.receiverGaeaId != that.receiverGaeaId)
                return false;
        }

        boolean this_present_content = true && this.isSetContent();
        boolean that_present_content = true && that.isSetContent();
        if (this_present_content || that_present_content) {
            if (!(this_present_content && that_present_content))
                return false;
            if (!this.content.equals(that.content))
                return false;
        }

        boolean this_present_insertTime = true && this.isSetInsertTime();
        boolean that_present_insertTime = true && that.isSetInsertTime();
        if (this_present_insertTime || that_present_insertTime) {
            if (!(this_present_insertTime && that_present_insertTime))
                return false;
            if (!this.insertTime.equals(that.insertTime))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(replyId);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(senderGaeaId);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(receiverGaeaId);

        hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
        if (isSetContent())
            hashCode = hashCode * 8191 + content.hashCode();

        hashCode = hashCode * 8191 + ((isSetInsertTime()) ? 131071 : 524287);
        if (isSetInsertTime())
            hashCode = hashCode * 8191 + insertTime.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(SubReplyDTO other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetReplyId()).compareTo(other.isSetReplyId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetReplyId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replyId, other.replyId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetSenderGaeaId()).compareTo(other.isSetSenderGaeaId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSenderGaeaId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.senderGaeaId, other.senderGaeaId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetReceiverGaeaId()).compareTo(other.isSetReceiverGaeaId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetReceiverGaeaId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiverGaeaId, other.receiverGaeaId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetContent()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetInsertTime()).compareTo(other.isSetInsertTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetInsertTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insertTime, other.insertTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("SubReplyDTO(");
        boolean first = true;

        sb.append("id:");
        sb.append(this.id);
        first = false;
        if (!first) sb.append(", ");
        sb.append("replyId:");
        sb.append(this.replyId);
        first = false;
        if (!first) sb.append(", ");
        sb.append("senderGaeaId:");
        sb.append(this.senderGaeaId);
        first = false;
        if (!first) sb.append(", ");
        sb.append("receiverGaeaId:");
        sb.append(this.receiverGaeaId);
        first = false;
        if (!first) sb.append(", ");
        sb.append("content:");
        if (this.content == null) {
            sb.append("null");
        } else {
            sb.append(this.content);
        }
        first = false;
        if (isSetInsertTime()) {
            if (!first) sb.append(", ");
            sb.append("insertTime:");
            if (this.insertTime == null) {
                sb.append("null");
            } else {
                sb.append(this.insertTime);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class SubReplyDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public SubReplyDTOStandardScheme getScheme() {
            return new SubReplyDTOStandardScheme();
        }
    }

    private static class SubReplyDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<SubReplyDTO> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, SubReplyDTO struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.id = iprot.readI64();
                            struct.setIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // REPLY_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.replyId = iprot.readI64();
                            struct.setReplyIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // SENDER_GAEA_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.senderGaeaId = iprot.readI64();
                            struct.setSenderGaeaIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // RECEIVER_GAEA_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.receiverGaeaId = iprot.readI64();
                            struct.setReceiverGaeaIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // CONTENT
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.content = iprot.readString();
                            struct.setContentIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // INSERT_TIME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.insertTime = iprot.readString();
                            struct.setInsertTimeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, SubReplyDTO struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(ID_FIELD_DESC);
            oprot.writeI64(struct.id);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(REPLY_ID_FIELD_DESC);
            oprot.writeI64(struct.replyId);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(SENDER_GAEA_ID_FIELD_DESC);
            oprot.writeI64(struct.senderGaeaId);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(RECEIVER_GAEA_ID_FIELD_DESC);
            oprot.writeI64(struct.receiverGaeaId);
            oprot.writeFieldEnd();
            if (struct.content != null) {
                oprot.writeFieldBegin(CONTENT_FIELD_DESC);
                oprot.writeString(struct.content);
                oprot.writeFieldEnd();
            }
            if (struct.insertTime != null) {
                if (struct.isSetInsertTime()) {
                    oprot.writeFieldBegin(INSERT_TIME_FIELD_DESC);
                    oprot.writeString(struct.insertTime);
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class SubReplyDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public SubReplyDTOTupleScheme getScheme() {
            return new SubReplyDTOTupleScheme();
        }
    }

    private static class SubReplyDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<SubReplyDTO> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, SubReplyDTO struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetId()) {
                optionals.set(0);
            }
            if (struct.isSetReplyId()) {
                optionals.set(1);
            }
            if (struct.isSetSenderGaeaId()) {
                optionals.set(2);
            }
            if (struct.isSetReceiverGaeaId()) {
                optionals.set(3);
            }
            if (struct.isSetContent()) {
                optionals.set(4);
            }
            if (struct.isSetInsertTime()) {
                optionals.set(5);
            }
            oprot.writeBitSet(optionals, 6);
            if (struct.isSetId()) {
                oprot.writeI64(struct.id);
            }
            if (struct.isSetReplyId()) {
                oprot.writeI64(struct.replyId);
            }
            if (struct.isSetSenderGaeaId()) {
                oprot.writeI64(struct.senderGaeaId);
            }
            if (struct.isSetReceiverGaeaId()) {
                oprot.writeI64(struct.receiverGaeaId);
            }
            if (struct.isSetContent()) {
                oprot.writeString(struct.content);
            }
            if (struct.isSetInsertTime()) {
                oprot.writeString(struct.insertTime);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, SubReplyDTO struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(6);
            if (incoming.get(0)) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
            }
            if (incoming.get(1)) {
                struct.replyId = iprot.readI64();
                struct.setReplyIdIsSet(true);
            }
            if (incoming.get(2)) {
                struct.senderGaeaId = iprot.readI64();
                struct.setSenderGaeaIdIsSet(true);
            }
            if (incoming.get(3)) {
                struct.receiverGaeaId = iprot.readI64();
                struct.setReceiverGaeaIdIsSet(true);
            }
            if (incoming.get(4)) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
            }
            if (incoming.get(5)) {
                struct.insertTime = iprot.readString();
                struct.setInsertTimeIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

