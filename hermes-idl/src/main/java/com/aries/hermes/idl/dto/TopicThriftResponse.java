/**
 * Autogenerated by Thrift Compiler (0.12.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.aries.hermes.idl.dto;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-05-28")
public class TopicThriftResponse implements org.apache.thrift.TBase<TopicThriftResponse, TopicThriftResponse._Fields>, java.io.Serializable, Cloneable, Comparable<TopicThriftResponse> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TopicThriftResponse");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField TOPIC_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("topicDTO", org.apache.thrift.protocol.TType.LIST, (short) 3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TopicThriftResponseStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TopicThriftResponseTupleSchemeFactory();

    public int code; // required
    public @org.apache.thrift.annotation.Nullable
    java.lang.String message; // required
    public @org.apache.thrift.annotation.Nullable
    java.util.List<TopicDTO> topicDTO; // optional

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        CODE((short) 1, "code"),
        MESSAGE((short) 2, "message"),
        TOPIC_DTO((short) 3, "topicDTO");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // CODE
                    return CODE;
                case 2: // MESSAGE
                    return MESSAGE;
                case 3: // TOPIC_DTO
                    return TOPIC_DTO;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __CODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.TOPIC_DTO};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.TOPIC_DTO, new org.apache.thrift.meta_data.FieldMetaData("topicDTO", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TopicDTO.class))));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TopicThriftResponse.class, metaDataMap);
    }

    public TopicThriftResponse() {
    }

    public TopicThriftResponse(
            int code,
            java.lang.String message) {
        this();
        this.code = code;
        setCodeIsSet(true);
        this.message = message;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TopicThriftResponse(TopicThriftResponse other) {
        __isset_bitfield = other.__isset_bitfield;
        this.code = other.code;
        if (other.isSetMessage()) {
            this.message = other.message;
        }
        if (other.isSetTopicDTO()) {
            java.util.List<TopicDTO> __this__topicDTO = new java.util.ArrayList<TopicDTO>(other.topicDTO.size());
            for (TopicDTO other_element : other.topicDTO) {
                __this__topicDTO.add(new TopicDTO(other_element));
            }
            this.topicDTO = __this__topicDTO;
        }
    }

    public TopicThriftResponse deepCopy() {
        return new TopicThriftResponse(this);
    }

    @Override
    public void clear() {
        setCodeIsSet(false);
        this.code = 0;
        this.message = null;
        this.topicDTO = null;
    }

    public int getCode() {
        return this.code;
    }

    public TopicThriftResponse setCode(int code) {
        this.code = code;
        setCodeIsSet(true);
        return this;
    }

    public void unsetCode() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CODE_ISSET_ID);
    }

    /**
     * Returns true if field code is set (has been assigned a value) and false otherwise
     */
    public boolean isSetCode() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CODE_ISSET_ID);
    }

    public void setCodeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CODE_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMessage() {
        return this.message;
    }

    public TopicThriftResponse setMessage(@org.apache.thrift.annotation.Nullable java.lang.String message) {
        this.message = message;
        return this;
    }

    public void unsetMessage() {
        this.message = null;
    }

    /**
     * Returns true if field message is set (has been assigned a value) and false otherwise
     */
    public boolean isSetMessage() {
        return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
        if (!value) {
            this.message = null;
        }
    }

    public int getTopicDTOSize() {
        return (this.topicDTO == null) ? 0 : this.topicDTO.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<TopicDTO> getTopicDTOIterator() {
        return (this.topicDTO == null) ? null : this.topicDTO.iterator();
    }

    public void addToTopicDTO(TopicDTO elem) {
        if (this.topicDTO == null) {
            this.topicDTO = new java.util.ArrayList<TopicDTO>();
        }
        this.topicDTO.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<TopicDTO> getTopicDTO() {
        return this.topicDTO;
    }

    public TopicThriftResponse setTopicDTO(@org.apache.thrift.annotation.Nullable java.util.List<TopicDTO> topicDTO) {
        this.topicDTO = topicDTO;
        return this;
    }

    public void unsetTopicDTO() {
        this.topicDTO = null;
    }

    /**
     * Returns true if field topicDTO is set (has been assigned a value) and false otherwise
     */
    public boolean isSetTopicDTO() {
        return this.topicDTO != null;
    }

    public void setTopicDTOIsSet(boolean value) {
        if (!value) {
            this.topicDTO = null;
        }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case CODE:
                if (value == null) {
                    unsetCode();
                } else {
                    setCode((java.lang.Integer) value);
                }
                break;

            case MESSAGE:
                if (value == null) {
                    unsetMessage();
                } else {
                    setMessage((java.lang.String) value);
                }
                break;

            case TOPIC_DTO:
                if (value == null) {
                    unsetTopicDTO();
                } else {
                    setTopicDTO((java.util.List<TopicDTO>) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case CODE:
                return getCode();

            case MESSAGE:
                return getMessage();

            case TOPIC_DTO:
                return getTopicDTO();

        }
        throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case CODE:
                return isSetCode();
            case MESSAGE:
                return isSetMessage();
            case TOPIC_DTO:
                return isSetTopicDTO();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that == null)
            return false;
        if (that instanceof TopicThriftResponse)
            return this.equals((TopicThriftResponse) that);
        return false;
    }

    public boolean equals(TopicThriftResponse that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_code = true;
        boolean that_present_code = true;
        if (this_present_code || that_present_code) {
            if (!(this_present_code && that_present_code))
                return false;
            if (this.code != that.code)
                return false;
        }

        boolean this_present_message = true && this.isSetMessage();
        boolean that_present_message = true && that.isSetMessage();
        if (this_present_message || that_present_message) {
            if (!(this_present_message && that_present_message))
                return false;
            if (!this.message.equals(that.message))
                return false;
        }

        boolean this_present_topicDTO = true && this.isSetTopicDTO();
        boolean that_present_topicDTO = true && that.isSetTopicDTO();
        if (this_present_topicDTO || that_present_topicDTO) {
            if (!(this_present_topicDTO && that_present_topicDTO))
                return false;
            if (!this.topicDTO.equals(that.topicDTO))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + code;

        hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
        if (isSetMessage())
            hashCode = hashCode * 8191 + message.hashCode();

        hashCode = hashCode * 8191 + ((isSetTopicDTO()) ? 131071 : 524287);
        if (isSetTopicDTO())
            hashCode = hashCode * 8191 + topicDTO.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(TopicThriftResponse other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCode()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMessage()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetTopicDTO()).compareTo(other.isSetTopicDTO());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTopicDTO()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicDTO, other.topicDTO);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("TopicThriftResponse(");
        boolean first = true;

        sb.append("code:");
        sb.append(this.code);
        first = false;
        if (!first) sb.append(", ");
        sb.append("message:");
        if (this.message == null) {
            sb.append("null");
        } else {
            sb.append(this.message);
        }
        first = false;
        if (isSetTopicDTO()) {
            if (!first) sb.append(", ");
            sb.append("topicDTO:");
            if (this.topicDTO == null) {
                sb.append("null");
            } else {
                sb.append(this.topicDTO);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class TopicThriftResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public TopicThriftResponseStandardScheme getScheme() {
            return new TopicThriftResponseStandardScheme();
        }
    }

    private static class TopicThriftResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<TopicThriftResponse> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, TopicThriftResponse struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // CODE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.code = iprot.readI32();
                            struct.setCodeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // MESSAGE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.message = iprot.readString();
                            struct.setMessageIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // TOPIC_DTO
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                struct.topicDTO = new java.util.ArrayList<TopicDTO>(_list0.size);
                                @org.apache.thrift.annotation.Nullable TopicDTO _elem1;
                                for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
                                    _elem1 = new TopicDTO();
                                    _elem1.read(iprot);
                                    struct.topicDTO.add(_elem1);
                                }
                                iprot.readListEnd();
                            }
                            struct.setTopicDTOIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, TopicThriftResponse struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(CODE_FIELD_DESC);
            oprot.writeI32(struct.code);
            oprot.writeFieldEnd();
            if (struct.message != null) {
                oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
                oprot.writeString(struct.message);
                oprot.writeFieldEnd();
            }
            if (struct.topicDTO != null) {
                if (struct.isSetTopicDTO()) {
                    oprot.writeFieldBegin(TOPIC_DTO_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.topicDTO.size()));
                        for (TopicDTO _iter3 : struct.topicDTO) {
                            _iter3.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class TopicThriftResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public TopicThriftResponseTupleScheme getScheme() {
            return new TopicThriftResponseTupleScheme();
        }
    }

    private static class TopicThriftResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<TopicThriftResponse> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, TopicThriftResponse struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetCode()) {
                optionals.set(0);
            }
            if (struct.isSetMessage()) {
                optionals.set(1);
            }
            if (struct.isSetTopicDTO()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetCode()) {
                oprot.writeI32(struct.code);
            }
            if (struct.isSetMessage()) {
                oprot.writeString(struct.message);
            }
            if (struct.isSetTopicDTO()) {
                {
                    oprot.writeI32(struct.topicDTO.size());
                    for (TopicDTO _iter4 : struct.topicDTO) {
                        _iter4.write(oprot);
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, TopicThriftResponse struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                struct.code = iprot.readI32();
                struct.setCodeIsSet(true);
            }
            if (incoming.get(1)) {
                struct.message = iprot.readString();
                struct.setMessageIsSet(true);
            }
            if (incoming.get(2)) {
                {
                    org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    struct.topicDTO = new java.util.ArrayList<TopicDTO>(_list5.size);
                    @org.apache.thrift.annotation.Nullable TopicDTO _elem6;
                    for (int _i7 = 0; _i7 < _list5.size; ++_i7) {
                        _elem6 = new TopicDTO();
                        _elem6.read(iprot);
                        struct.topicDTO.add(_elem6);
                    }
                }
                struct.setTopicDTOIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

