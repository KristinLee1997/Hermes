/**
 * Autogenerated by Thrift Compiler (0.12.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.aries.hermes.idl.dto;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-05-28")
public class ReplyDTO implements org.apache.thrift.TBase<ReplyDTO, ReplyDTO._Fields>, java.io.Serializable, Cloneable, Comparable<ReplyDTO> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReplyDTO");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short) 1);
    private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.I64, (short) 2);
    private static final org.apache.thrift.protocol.TField GAEA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gaeaId", org.apache.thrift.protocol.TType.I64, (short) 3);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short) 4);
    private static final org.apache.thrift.protocol.TField INSERT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("insertTime", org.apache.thrift.protocol.TType.STRING, (short) 5);
    private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short) 6);
    private static final org.apache.thrift.protocol.TField ANONYMOUS_SEND_FIELD_DESC = new org.apache.thrift.protocol.TField("anonymousSend", org.apache.thrift.protocol.TType.BOOL, (short) 7);
    private static final org.apache.thrift.protocol.TField SUB_REPLIES_FIELD_DESC = new org.apache.thrift.protocol.TField("subReplies", org.apache.thrift.protocol.TType.LIST, (short) 8);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ReplyDTOStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ReplyDTOTupleSchemeFactory();

    public long id; // required
    public long topicId; // required
    public long gaeaId; // required
    public @org.apache.thrift.annotation.Nullable
    java.lang.String content; // required
    public @org.apache.thrift.annotation.Nullable
    java.lang.String insertTime; // optional
    public @org.apache.thrift.annotation.Nullable
    java.lang.String updateTime; // optional
    public boolean anonymousSend; // required
    public @org.apache.thrift.annotation.Nullable
    java.util.List<SubReplyDTO> subReplies; // optional

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ID((short) 1, "id"),
        TOPIC_ID((short) 2, "topicId"),
        GAEA_ID((short) 3, "gaeaId"),
        CONTENT((short) 4, "content"),
        INSERT_TIME((short) 5, "insertTime"),
        UPDATE_TIME((short) 6, "updateTime"),
        ANONYMOUS_SEND((short) 7, "anonymousSend"),
        SUB_REPLIES((short) 8, "subReplies");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // ID
                    return ID;
                case 2: // TOPIC_ID
                    return TOPIC_ID;
                case 3: // GAEA_ID
                    return GAEA_ID;
                case 4: // CONTENT
                    return CONTENT;
                case 5: // INSERT_TIME
                    return INSERT_TIME;
                case 6: // UPDATE_TIME
                    return UPDATE_TIME;
                case 7: // ANONYMOUS_SEND
                    return ANONYMOUS_SEND;
                case 8: // SUB_REPLIES
                    return SUB_REPLIES;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private static final int __TOPICID_ISSET_ID = 1;
    private static final int __GAEAID_ISSET_ID = 2;
    private static final int __ANONYMOUSSEND_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.INSERT_TIME, _Fields.UPDATE_TIME, _Fields.SUB_REPLIES};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.GAEA_ID, new org.apache.thrift.meta_data.FieldMetaData("gaeaId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.INSERT_TIME, new org.apache.thrift.meta_data.FieldMetaData("insertTime", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.ANONYMOUS_SEND, new org.apache.thrift.meta_data.FieldMetaData("anonymousSend", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
        tmpMap.put(_Fields.SUB_REPLIES, new org.apache.thrift.meta_data.FieldMetaData("subReplies", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SubReplyDTO.class))));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReplyDTO.class, metaDataMap);
    }

    public ReplyDTO() {
    }

    public ReplyDTO(
            long id,
            long topicId,
            long gaeaId,
            java.lang.String content,
            boolean anonymousSend) {
        this();
        this.id = id;
        setIdIsSet(true);
        this.topicId = topicId;
        setTopicIdIsSet(true);
        this.gaeaId = gaeaId;
        setGaeaIdIsSet(true);
        this.content = content;
        this.anonymousSend = anonymousSend;
        setAnonymousSendIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReplyDTO(ReplyDTO other) {
        __isset_bitfield = other.__isset_bitfield;
        this.id = other.id;
        this.topicId = other.topicId;
        this.gaeaId = other.gaeaId;
        if (other.isSetContent()) {
            this.content = other.content;
        }
        if (other.isSetInsertTime()) {
            this.insertTime = other.insertTime;
        }
        if (other.isSetUpdateTime()) {
            this.updateTime = other.updateTime;
        }
        this.anonymousSend = other.anonymousSend;
        if (other.isSetSubReplies()) {
            java.util.List<SubReplyDTO> __this__subReplies = new java.util.ArrayList<SubReplyDTO>(other.subReplies.size());
            for (SubReplyDTO other_element : other.subReplies) {
                __this__subReplies.add(new SubReplyDTO(other_element));
            }
            this.subReplies = __this__subReplies;
        }
    }

    public ReplyDTO deepCopy() {
        return new ReplyDTO(this);
    }

    @Override
    public void clear() {
        setIdIsSet(false);
        this.id = 0;
        setTopicIdIsSet(false);
        this.topicId = 0;
        setGaeaIdIsSet(false);
        this.gaeaId = 0;
        this.content = null;
        this.insertTime = null;
        this.updateTime = null;
        setAnonymousSendIsSet(false);
        this.anonymousSend = false;
        this.subReplies = null;
    }

    public long getId() {
        return this.id;
    }

    public ReplyDTO setId(long id) {
        this.id = id;
        setIdIsSet(true);
        return this;
    }

    public void unsetId() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /**
     * Returns true if field id is set (has been assigned a value) and false otherwise
     */
    public boolean isSetId() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public long getTopicId() {
        return this.topicId;
    }

    public ReplyDTO setTopicId(long topicId) {
        this.topicId = topicId;
        setTopicIdIsSet(true);
        return this;
    }

    public void unsetTopicId() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    /**
     * Returns true if field topicId is set (has been assigned a value) and false otherwise
     */
    public boolean isSetTopicId() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    public void setTopicIdIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPICID_ISSET_ID, value);
    }

    public long getGaeaId() {
        return this.gaeaId;
    }

    public ReplyDTO setGaeaId(long gaeaId) {
        this.gaeaId = gaeaId;
        setGaeaIdIsSet(true);
        return this;
    }

    public void unsetGaeaId() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GAEAID_ISSET_ID);
    }

    /**
     * Returns true if field gaeaId is set (has been assigned a value) and false otherwise
     */
    public boolean isSetGaeaId() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GAEAID_ISSET_ID);
    }

    public void setGaeaIdIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GAEAID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getContent() {
        return this.content;
    }

    public ReplyDTO setContent(@org.apache.thrift.annotation.Nullable java.lang.String content) {
        this.content = content;
        return this;
    }

    public void unsetContent() {
        this.content = null;
    }

    /**
     * Returns true if field content is set (has been assigned a value) and false otherwise
     */
    public boolean isSetContent() {
        return this.content != null;
    }

    public void setContentIsSet(boolean value) {
        if (!value) {
            this.content = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getInsertTime() {
        return this.insertTime;
    }

    public ReplyDTO setInsertTime(@org.apache.thrift.annotation.Nullable java.lang.String insertTime) {
        this.insertTime = insertTime;
        return this;
    }

    public void unsetInsertTime() {
        this.insertTime = null;
    }

    /**
     * Returns true if field insertTime is set (has been assigned a value) and false otherwise
     */
    public boolean isSetInsertTime() {
        return this.insertTime != null;
    }

    public void setInsertTimeIsSet(boolean value) {
        if (!value) {
            this.insertTime = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUpdateTime() {
        return this.updateTime;
    }

    public ReplyDTO setUpdateTime(@org.apache.thrift.annotation.Nullable java.lang.String updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    public void unsetUpdateTime() {
        this.updateTime = null;
    }

    /**
     * Returns true if field updateTime is set (has been assigned a value) and false otherwise
     */
    public boolean isSetUpdateTime() {
        return this.updateTime != null;
    }

    public void setUpdateTimeIsSet(boolean value) {
        if (!value) {
            this.updateTime = null;
        }
    }

    public boolean isAnonymousSend() {
        return this.anonymousSend;
    }

    public ReplyDTO setAnonymousSend(boolean anonymousSend) {
        this.anonymousSend = anonymousSend;
        setAnonymousSendIsSet(true);
        return this;
    }

    public void unsetAnonymousSend() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ANONYMOUSSEND_ISSET_ID);
    }

    /**
     * Returns true if field anonymousSend is set (has been assigned a value) and false otherwise
     */
    public boolean isSetAnonymousSend() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ANONYMOUSSEND_ISSET_ID);
    }

    public void setAnonymousSendIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ANONYMOUSSEND_ISSET_ID, value);
    }

    public int getSubRepliesSize() {
        return (this.subReplies == null) ? 0 : this.subReplies.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<SubReplyDTO> getSubRepliesIterator() {
        return (this.subReplies == null) ? null : this.subReplies.iterator();
    }

    public void addToSubReplies(SubReplyDTO elem) {
        if (this.subReplies == null) {
            this.subReplies = new java.util.ArrayList<SubReplyDTO>();
        }
        this.subReplies.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<SubReplyDTO> getSubReplies() {
        return this.subReplies;
    }

    public ReplyDTO setSubReplies(@org.apache.thrift.annotation.Nullable java.util.List<SubReplyDTO> subReplies) {
        this.subReplies = subReplies;
        return this;
    }

    public void unsetSubReplies() {
        this.subReplies = null;
    }

    /**
     * Returns true if field subReplies is set (has been assigned a value) and false otherwise
     */
    public boolean isSetSubReplies() {
        return this.subReplies != null;
    }

    public void setSubRepliesIsSet(boolean value) {
        if (!value) {
            this.subReplies = null;
        }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case ID:
                if (value == null) {
                    unsetId();
                } else {
                    setId((java.lang.Long) value);
                }
                break;

            case TOPIC_ID:
                if (value == null) {
                    unsetTopicId();
                } else {
                    setTopicId((java.lang.Long) value);
                }
                break;

            case GAEA_ID:
                if (value == null) {
                    unsetGaeaId();
                } else {
                    setGaeaId((java.lang.Long) value);
                }
                break;

            case CONTENT:
                if (value == null) {
                    unsetContent();
                } else {
                    setContent((java.lang.String) value);
                }
                break;

            case INSERT_TIME:
                if (value == null) {
                    unsetInsertTime();
                } else {
                    setInsertTime((java.lang.String) value);
                }
                break;

            case UPDATE_TIME:
                if (value == null) {
                    unsetUpdateTime();
                } else {
                    setUpdateTime((java.lang.String) value);
                }
                break;

            case ANONYMOUS_SEND:
                if (value == null) {
                    unsetAnonymousSend();
                } else {
                    setAnonymousSend((java.lang.Boolean) value);
                }
                break;

            case SUB_REPLIES:
                if (value == null) {
                    unsetSubReplies();
                } else {
                    setSubReplies((java.util.List<SubReplyDTO>) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case ID:
                return getId();

            case TOPIC_ID:
                return getTopicId();

            case GAEA_ID:
                return getGaeaId();

            case CONTENT:
                return getContent();

            case INSERT_TIME:
                return getInsertTime();

            case UPDATE_TIME:
                return getUpdateTime();

            case ANONYMOUS_SEND:
                return isAnonymousSend();

            case SUB_REPLIES:
                return getSubReplies();

        }
        throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case ID:
                return isSetId();
            case TOPIC_ID:
                return isSetTopicId();
            case GAEA_ID:
                return isSetGaeaId();
            case CONTENT:
                return isSetContent();
            case INSERT_TIME:
                return isSetInsertTime();
            case UPDATE_TIME:
                return isSetUpdateTime();
            case ANONYMOUS_SEND:
                return isSetAnonymousSend();
            case SUB_REPLIES:
                return isSetSubReplies();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that == null)
            return false;
        if (that instanceof ReplyDTO)
            return this.equals((ReplyDTO) that);
        return false;
    }

    public boolean equals(ReplyDTO that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_id = true;
        boolean that_present_id = true;
        if (this_present_id || that_present_id) {
            if (!(this_present_id && that_present_id))
                return false;
            if (this.id != that.id)
                return false;
        }

        boolean this_present_topicId = true;
        boolean that_present_topicId = true;
        if (this_present_topicId || that_present_topicId) {
            if (!(this_present_topicId && that_present_topicId))
                return false;
            if (this.topicId != that.topicId)
                return false;
        }

        boolean this_present_gaeaId = true;
        boolean that_present_gaeaId = true;
        if (this_present_gaeaId || that_present_gaeaId) {
            if (!(this_present_gaeaId && that_present_gaeaId))
                return false;
            if (this.gaeaId != that.gaeaId)
                return false;
        }

        boolean this_present_content = true && this.isSetContent();
        boolean that_present_content = true && that.isSetContent();
        if (this_present_content || that_present_content) {
            if (!(this_present_content && that_present_content))
                return false;
            if (!this.content.equals(that.content))
                return false;
        }

        boolean this_present_insertTime = true && this.isSetInsertTime();
        boolean that_present_insertTime = true && that.isSetInsertTime();
        if (this_present_insertTime || that_present_insertTime) {
            if (!(this_present_insertTime && that_present_insertTime))
                return false;
            if (!this.insertTime.equals(that.insertTime))
                return false;
        }

        boolean this_present_updateTime = true && this.isSetUpdateTime();
        boolean that_present_updateTime = true && that.isSetUpdateTime();
        if (this_present_updateTime || that_present_updateTime) {
            if (!(this_present_updateTime && that_present_updateTime))
                return false;
            if (!this.updateTime.equals(that.updateTime))
                return false;
        }

        boolean this_present_anonymousSend = true;
        boolean that_present_anonymousSend = true;
        if (this_present_anonymousSend || that_present_anonymousSend) {
            if (!(this_present_anonymousSend && that_present_anonymousSend))
                return false;
            if (this.anonymousSend != that.anonymousSend)
                return false;
        }

        boolean this_present_subReplies = true && this.isSetSubReplies();
        boolean that_present_subReplies = true && that.isSetSubReplies();
        if (this_present_subReplies || that_present_subReplies) {
            if (!(this_present_subReplies && that_present_subReplies))
                return false;
            if (!this.subReplies.equals(that.subReplies))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(topicId);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(gaeaId);

        hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
        if (isSetContent())
            hashCode = hashCode * 8191 + content.hashCode();

        hashCode = hashCode * 8191 + ((isSetInsertTime()) ? 131071 : 524287);
        if (isSetInsertTime())
            hashCode = hashCode * 8191 + insertTime.hashCode();

        hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
        if (isSetUpdateTime())
            hashCode = hashCode * 8191 + updateTime.hashCode();

        hashCode = hashCode * 8191 + ((anonymousSend) ? 131071 : 524287);

        hashCode = hashCode * 8191 + ((isSetSubReplies()) ? 131071 : 524287);
        if (isSetSubReplies())
            hashCode = hashCode * 8191 + subReplies.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(ReplyDTO other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTopicId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetGaeaId()).compareTo(other.isSetGaeaId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetGaeaId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gaeaId, other.gaeaId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetContent()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetInsertTime()).compareTo(other.isSetInsertTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetInsertTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insertTime, other.insertTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUpdateTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetAnonymousSend()).compareTo(other.isSetAnonymousSend());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAnonymousSend()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.anonymousSend, other.anonymousSend);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetSubReplies()).compareTo(other.isSetSubReplies());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSubReplies()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subReplies, other.subReplies);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("ReplyDTO(");
        boolean first = true;

        sb.append("id:");
        sb.append(this.id);
        first = false;
        if (!first) sb.append(", ");
        sb.append("topicId:");
        sb.append(this.topicId);
        first = false;
        if (!first) sb.append(", ");
        sb.append("gaeaId:");
        sb.append(this.gaeaId);
        first = false;
        if (!first) sb.append(", ");
        sb.append("content:");
        if (this.content == null) {
            sb.append("null");
        } else {
            sb.append(this.content);
        }
        first = false;
        if (isSetInsertTime()) {
            if (!first) sb.append(", ");
            sb.append("insertTime:");
            if (this.insertTime == null) {
                sb.append("null");
            } else {
                sb.append(this.insertTime);
            }
            first = false;
        }
        if (isSetUpdateTime()) {
            if (!first) sb.append(", ");
            sb.append("updateTime:");
            if (this.updateTime == null) {
                sb.append("null");
            } else {
                sb.append(this.updateTime);
            }
            first = false;
        }
        if (!first) sb.append(", ");
        sb.append("anonymousSend:");
        sb.append(this.anonymousSend);
        first = false;
        if (isSetSubReplies()) {
            if (!first) sb.append(", ");
            sb.append("subReplies:");
            if (this.subReplies == null) {
                sb.append("null");
            } else {
                sb.append(this.subReplies);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class ReplyDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ReplyDTOStandardScheme getScheme() {
            return new ReplyDTOStandardScheme();
        }
    }

    private static class ReplyDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ReplyDTO> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, ReplyDTO struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.id = iprot.readI64();
                            struct.setIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // TOPIC_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.topicId = iprot.readI64();
                            struct.setTopicIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // GAEA_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.gaeaId = iprot.readI64();
                            struct.setGaeaIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // CONTENT
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.content = iprot.readString();
                            struct.setContentIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // INSERT_TIME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.insertTime = iprot.readString();
                            struct.setInsertTimeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // UPDATE_TIME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.updateTime = iprot.readString();
                            struct.setUpdateTimeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // ANONYMOUS_SEND
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.anonymousSend = iprot.readBool();
                            struct.setAnonymousSendIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // SUB_REPLIES
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                                struct.subReplies = new java.util.ArrayList<SubReplyDTO>(_list8.size);
                                @org.apache.thrift.annotation.Nullable SubReplyDTO _elem9;
                                for (int _i10 = 0; _i10 < _list8.size; ++_i10) {
                                    _elem9 = new SubReplyDTO();
                                    _elem9.read(iprot);
                                    struct.subReplies.add(_elem9);
                                }
                                iprot.readListEnd();
                            }
                            struct.setSubRepliesIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, ReplyDTO struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(ID_FIELD_DESC);
            oprot.writeI64(struct.id);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
            oprot.writeI64(struct.topicId);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(GAEA_ID_FIELD_DESC);
            oprot.writeI64(struct.gaeaId);
            oprot.writeFieldEnd();
            if (struct.content != null) {
                oprot.writeFieldBegin(CONTENT_FIELD_DESC);
                oprot.writeString(struct.content);
                oprot.writeFieldEnd();
            }
            if (struct.insertTime != null) {
                if (struct.isSetInsertTime()) {
                    oprot.writeFieldBegin(INSERT_TIME_FIELD_DESC);
                    oprot.writeString(struct.insertTime);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.updateTime != null) {
                if (struct.isSetUpdateTime()) {
                    oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
                    oprot.writeString(struct.updateTime);
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldBegin(ANONYMOUS_SEND_FIELD_DESC);
            oprot.writeBool(struct.anonymousSend);
            oprot.writeFieldEnd();
            if (struct.subReplies != null) {
                if (struct.isSetSubReplies()) {
                    oprot.writeFieldBegin(SUB_REPLIES_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.subReplies.size()));
                        for (SubReplyDTO _iter11 : struct.subReplies) {
                            _iter11.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class ReplyDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ReplyDTOTupleScheme getScheme() {
            return new ReplyDTOTupleScheme();
        }
    }

    private static class ReplyDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ReplyDTO> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, ReplyDTO struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetId()) {
                optionals.set(0);
            }
            if (struct.isSetTopicId()) {
                optionals.set(1);
            }
            if (struct.isSetGaeaId()) {
                optionals.set(2);
            }
            if (struct.isSetContent()) {
                optionals.set(3);
            }
            if (struct.isSetInsertTime()) {
                optionals.set(4);
            }
            if (struct.isSetUpdateTime()) {
                optionals.set(5);
            }
            if (struct.isSetAnonymousSend()) {
                optionals.set(6);
            }
            if (struct.isSetSubReplies()) {
                optionals.set(7);
            }
            oprot.writeBitSet(optionals, 8);
            if (struct.isSetId()) {
                oprot.writeI64(struct.id);
            }
            if (struct.isSetTopicId()) {
                oprot.writeI64(struct.topicId);
            }
            if (struct.isSetGaeaId()) {
                oprot.writeI64(struct.gaeaId);
            }
            if (struct.isSetContent()) {
                oprot.writeString(struct.content);
            }
            if (struct.isSetInsertTime()) {
                oprot.writeString(struct.insertTime);
            }
            if (struct.isSetUpdateTime()) {
                oprot.writeString(struct.updateTime);
            }
            if (struct.isSetAnonymousSend()) {
                oprot.writeBool(struct.anonymousSend);
            }
            if (struct.isSetSubReplies()) {
                {
                    oprot.writeI32(struct.subReplies.size());
                    for (SubReplyDTO _iter12 : struct.subReplies) {
                        _iter12.write(oprot);
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, ReplyDTO struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(8);
            if (incoming.get(0)) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
            }
            if (incoming.get(1)) {
                struct.topicId = iprot.readI64();
                struct.setTopicIdIsSet(true);
            }
            if (incoming.get(2)) {
                struct.gaeaId = iprot.readI64();
                struct.setGaeaIdIsSet(true);
            }
            if (incoming.get(3)) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
            }
            if (incoming.get(4)) {
                struct.insertTime = iprot.readString();
                struct.setInsertTimeIsSet(true);
            }
            if (incoming.get(5)) {
                struct.updateTime = iprot.readString();
                struct.setUpdateTimeIsSet(true);
            }
            if (incoming.get(6)) {
                struct.anonymousSend = iprot.readBool();
                struct.setAnonymousSendIsSet(true);
            }
            if (incoming.get(7)) {
                {
                    org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    struct.subReplies = new java.util.ArrayList<SubReplyDTO>(_list13.size);
                    @org.apache.thrift.annotation.Nullable SubReplyDTO _elem14;
                    for (int _i15 = 0; _i15 < _list13.size; ++_i15) {
                        _elem14 = new SubReplyDTO();
                        _elem14.read(iprot);
                        struct.subReplies.add(_elem14);
                    }
                }
                struct.setSubRepliesIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

